/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SystemReboot0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemReboot0{}

// SystemReboot0 struct for SystemReboot0
type SystemReboot0 struct {
	Delay *int32 `json:"delay,omitempty"`
}

// NewSystemReboot0 instantiates a new SystemReboot0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemReboot0() *SystemReboot0 {
	this := SystemReboot0{}
	return &this
}

// NewSystemReboot0WithDefaults instantiates a new SystemReboot0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemReboot0WithDefaults() *SystemReboot0 {
	this := SystemReboot0{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *SystemReboot0) GetDelay() int32 {
	if o == nil || IsNil(o.Delay) {
		var ret int32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemReboot0) GetDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *SystemReboot0) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given int32 and assigns it to the Delay field.
func (o *SystemReboot0) SetDelay(v int32) {
	o.Delay = &v
}

func (o SystemReboot0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemReboot0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	return toSerialize, nil
}

type NullableSystemReboot0 struct {
	value *SystemReboot0
	isSet bool
}

func (v NullableSystemReboot0) Get() *SystemReboot0 {
	return v.value
}

func (v *NullableSystemReboot0) Set(val *SystemReboot0) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemReboot0) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemReboot0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemReboot0(val *SystemReboot0) *NullableSystemReboot0 {
	return &NullableSystemReboot0{value: val, isSet: true}
}

func (v NullableSystemReboot0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemReboot0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
