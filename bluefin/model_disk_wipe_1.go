/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// DiskWipe1 the model 'DiskWipe1'
type DiskWipe1 string

// List of disk_wipe_1
const (
	QUICK       DiskWipe1 = "QUICK"
	FULL        DiskWipe1 = "FULL"
	FULL_RANDOM DiskWipe1 = "FULL_RANDOM"
)

// All allowed values of DiskWipe1 enum
var AllowedDiskWipe1EnumValues = []DiskWipe1{
	"QUICK",
	"FULL",
	"FULL_RANDOM",
}

func (v *DiskWipe1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskWipe1(value)
	for _, existing := range AllowedDiskWipe1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskWipe1", value)
}

// NewDiskWipe1FromValue returns a pointer to a valid DiskWipe1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskWipe1FromValue(v string) (*DiskWipe1, error) {
	ev := DiskWipe1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskWipe1: valid values are %v", v, AllowedDiskWipe1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskWipe1) IsValid() bool {
	for _, existing := range AllowedDiskWipe1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to disk_wipe_1 value
func (v DiskWipe1) Ptr() *DiskWipe1 {
	return &v
}

type NullableDiskWipe1 struct {
	value *DiskWipe1
	isSet bool
}

func (v NullableDiskWipe1) Get() *DiskWipe1 {
	return v.value
}

func (v *NullableDiskWipe1) Set(val *DiskWipe1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskWipe1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskWipe1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskWipe1(val *DiskWipe1) *NullableDiskWipe1 {
	return &NullableDiskWipe1{value: val, isSet: true}
}

func (v NullableDiskWipe1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskWipe1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
