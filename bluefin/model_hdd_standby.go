/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// HDDStandby the model 'HDDStandby'
type HDDStandby string

// List of HDDStandby
const (
	ALWAYS_ON HDDStandby = "ALWAYS ON"
	_5        HDDStandby = "5"
	_10       HDDStandby = "10"
	_20       HDDStandby = "20"
	_30       HDDStandby = "30"
	_60       HDDStandby = "60"
	_120      HDDStandby = "120"
	_180      HDDStandby = "180"
	_240      HDDStandby = "240"
	_300      HDDStandby = "300"
	_330      HDDStandby = "330"
)

// All allowed values of HDDStandby enum
var AllowedHDDStandbyEnumValues = []HDDStandby{
	"ALWAYS ON",
	"5",
	"10",
	"20",
	"30",
	"60",
	"120",
	"180",
	"240",
	"300",
	"330",
}

func (v *HDDStandby) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HDDStandby(value)
	for _, existing := range AllowedHDDStandbyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HDDStandby", value)
}

// NewHDDStandbyFromValue returns a pointer to a valid HDDStandby
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHDDStandbyFromValue(v string) (*HDDStandby, error) {
	ev := HDDStandby(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HDDStandby: valid values are %v", v, AllowedHDDStandbyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HDDStandby) IsValid() bool {
	for _, existing := range AllowedHDDStandbyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HDDStandby value
func (v HDDStandby) Ptr() *HDDStandby {
	return &v
}

type NullableHDDStandby struct {
	value *HDDStandby
	isSet bool
}

func (v NullableHDDStandby) Get() *HDDStandby {
	return v.value
}

func (v *NullableHDDStandby) Set(val *HDDStandby) {
	v.value = val
	v.isSet = true
}

func (v NullableHDDStandby) IsSet() bool {
	return v.isSet
}

func (v *NullableHDDStandby) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHDDStandby(val *HDDStandby) *NullableHDDStandby {
	return &NullableHDDStandby{value: val, isSet: true}
}

func (v NullableHDDStandby) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHDDStandby) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
