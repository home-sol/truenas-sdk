/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the DiskResize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskResize{}

// DiskResize struct for DiskResize
type DiskResize struct {
	Disks []DiskResize0Inner `json:"disks,omitempty"`
	// `sync`: boolean, when true (default) will synchronize the new size of the disk(s)     with the database cache.
	Sync *bool `json:"sync,omitempty"`
	// `raise_error`: boolean     when true, will raise a `CallError` if any failures occur     when false, will will log the errors if any failures occur
	RaiseError           *bool `json:"raise_error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskResize DiskResize

// NewDiskResize instantiates a new DiskResize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskResize() *DiskResize {
	this := DiskResize{}
	var sync bool
	this.Sync = &sync
	var raiseError bool
	this.RaiseError = &raiseError
	return &this
}

// NewDiskResizeWithDefaults instantiates a new DiskResize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskResizeWithDefaults() *DiskResize {
	this := DiskResize{}
	var sync bool
	this.Sync = &sync
	var raiseError bool
	this.RaiseError = &raiseError
	return &this
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *DiskResize) GetDisks() []DiskResize0Inner {
	if o == nil || IsNil(o.Disks) {
		var ret []DiskResize0Inner
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskResize) GetDisksOk() ([]DiskResize0Inner, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *DiskResize) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []DiskResize0Inner and assigns it to the Disks field.
func (o *DiskResize) SetDisks(v []DiskResize0Inner) {
	o.Disks = v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *DiskResize) GetSync() bool {
	if o == nil || IsNil(o.Sync) {
		var ret bool
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskResize) GetSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Sync) {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *DiskResize) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}

// SetSync gets a reference to the given bool and assigns it to the Sync field.
func (o *DiskResize) SetSync(v bool) {
	o.Sync = &v
}

// GetRaiseError returns the RaiseError field value if set, zero value otherwise.
func (o *DiskResize) GetRaiseError() bool {
	if o == nil || IsNil(o.RaiseError) {
		var ret bool
		return ret
	}
	return *o.RaiseError
}

// GetRaiseErrorOk returns a tuple with the RaiseError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskResize) GetRaiseErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.RaiseError) {
		return nil, false
	}
	return o.RaiseError, true
}

// HasRaiseError returns a boolean if a field has been set.
func (o *DiskResize) HasRaiseError() bool {
	if o != nil && !IsNil(o.RaiseError) {
		return true
	}

	return false
}

// SetRaiseError gets a reference to the given bool and assigns it to the RaiseError field.
func (o *DiskResize) SetRaiseError(v bool) {
	o.RaiseError = &v
}

func (o DiskResize) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskResize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}
	if !IsNil(o.RaiseError) {
		toSerialize["raise_error"] = o.RaiseError
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskResize) UnmarshalJSON(bytes []byte) (err error) {
	varDiskResize := _DiskResize{}

	if err = json.Unmarshal(bytes, &varDiskResize); err == nil {
		*o = DiskResize(varDiskResize)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "disks")
		delete(additionalProperties, "sync")
		delete(additionalProperties, "raise_error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskResize struct {
	value *DiskResize
	isSet bool
}

func (v NullableDiskResize) Get() *DiskResize {
	return v.value
}

func (v *NullableDiskResize) Set(val *DiskResize) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskResize) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskResize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskResize(val *DiskResize) *NullableDiskResize {
	return &NullableDiskResize{value: val, isSet: true}
}

func (v NullableDiskResize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskResize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
