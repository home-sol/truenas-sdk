/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CatalogItems1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogItems1{}

// CatalogItems1 struct for CatalogItems1
type CatalogItems1 struct {
	Cache             *bool    `json:"cache,omitempty"`
	CacheOnly         *bool    `json:"cache_only,omitempty"`
	RetrieveAllTrains *bool    `json:"retrieve_all_trains,omitempty"`
	Trains            []string `json:"trains,omitempty"`
}

// NewCatalogItems1 instantiates a new CatalogItems1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogItems1() *CatalogItems1 {
	this := CatalogItems1{}
	var cache bool
	this.Cache = &cache
	var cacheOnly bool
	this.CacheOnly = &cacheOnly
	var retrieveAllTrains bool
	this.RetrieveAllTrains = &retrieveAllTrains
	return &this
}

// NewCatalogItems1WithDefaults instantiates a new CatalogItems1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogItems1WithDefaults() *CatalogItems1 {
	this := CatalogItems1{}
	var cache bool
	this.Cache = &cache
	var cacheOnly bool
	this.CacheOnly = &cacheOnly
	var retrieveAllTrains bool
	this.RetrieveAllTrains = &retrieveAllTrains
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *CatalogItems1) GetCache() bool {
	if o == nil || IsNil(o.Cache) {
		var ret bool
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItems1) GetCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *CatalogItems1) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given bool and assigns it to the Cache field.
func (o *CatalogItems1) SetCache(v bool) {
	o.Cache = &v
}

// GetCacheOnly returns the CacheOnly field value if set, zero value otherwise.
func (o *CatalogItems1) GetCacheOnly() bool {
	if o == nil || IsNil(o.CacheOnly) {
		var ret bool
		return ret
	}
	return *o.CacheOnly
}

// GetCacheOnlyOk returns a tuple with the CacheOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItems1) GetCacheOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheOnly) {
		return nil, false
	}
	return o.CacheOnly, true
}

// HasCacheOnly returns a boolean if a field has been set.
func (o *CatalogItems1) HasCacheOnly() bool {
	if o != nil && !IsNil(o.CacheOnly) {
		return true
	}

	return false
}

// SetCacheOnly gets a reference to the given bool and assigns it to the CacheOnly field.
func (o *CatalogItems1) SetCacheOnly(v bool) {
	o.CacheOnly = &v
}

// GetRetrieveAllTrains returns the RetrieveAllTrains field value if set, zero value otherwise.
func (o *CatalogItems1) GetRetrieveAllTrains() bool {
	if o == nil || IsNil(o.RetrieveAllTrains) {
		var ret bool
		return ret
	}
	return *o.RetrieveAllTrains
}

// GetRetrieveAllTrainsOk returns a tuple with the RetrieveAllTrains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItems1) GetRetrieveAllTrainsOk() (*bool, bool) {
	if o == nil || IsNil(o.RetrieveAllTrains) {
		return nil, false
	}
	return o.RetrieveAllTrains, true
}

// HasRetrieveAllTrains returns a boolean if a field has been set.
func (o *CatalogItems1) HasRetrieveAllTrains() bool {
	if o != nil && !IsNil(o.RetrieveAllTrains) {
		return true
	}

	return false
}

// SetRetrieveAllTrains gets a reference to the given bool and assigns it to the RetrieveAllTrains field.
func (o *CatalogItems1) SetRetrieveAllTrains(v bool) {
	o.RetrieveAllTrains = &v
}

// GetTrains returns the Trains field value if set, zero value otherwise.
func (o *CatalogItems1) GetTrains() []string {
	if o == nil || IsNil(o.Trains) {
		var ret []string
		return ret
	}
	return o.Trains
}

// GetTrainsOk returns a tuple with the Trains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogItems1) GetTrainsOk() ([]string, bool) {
	if o == nil || IsNil(o.Trains) {
		return nil, false
	}
	return o.Trains, true
}

// HasTrains returns a boolean if a field has been set.
func (o *CatalogItems1) HasTrains() bool {
	if o != nil && !IsNil(o.Trains) {
		return true
	}

	return false
}

// SetTrains gets a reference to the given []string and assigns it to the Trains field.
func (o *CatalogItems1) SetTrains(v []string) {
	o.Trains = v
}

func (o CatalogItems1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogItems1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.CacheOnly) {
		toSerialize["cache_only"] = o.CacheOnly
	}
	if !IsNil(o.RetrieveAllTrains) {
		toSerialize["retrieve_all_trains"] = o.RetrieveAllTrains
	}
	if !IsNil(o.Trains) {
		toSerialize["trains"] = o.Trains
	}
	return toSerialize, nil
}

type NullableCatalogItems1 struct {
	value *CatalogItems1
	isSet bool
}

func (v NullableCatalogItems1) Get() *CatalogItems1 {
	return v.value
}

func (v *NullableCatalogItems1) Set(val *CatalogItems1) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogItems1) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogItems1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogItems1(val *CatalogItems1) *NullableCatalogItems1 {
	return &NullableCatalogItems1{value: val, isSet: true}
}

func (v NullableCatalogItems1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogItems1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
