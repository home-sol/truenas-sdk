/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FtpUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FtpUpdate0{}

// FtpUpdate0 struct for FtpUpdate0
type FtpUpdate0 struct {
	Port *int32 `json:"port,omitempty"`
	// `clients` is an integer value which sets the maximum number of simultaneous clients allowed. It defaults to 32.
	Clients *int32 `json:"clients,omitempty"`
	// `ipconnections` is an integer value which shows the maximum number of connections per IP address. It defaults to 0 which equals to unlimited.
	Ipconnections *int32 `json:"ipconnections,omitempty"`
	Loginattempt  *int32 `json:"loginattempt,omitempty"`
	// `timeout` is the maximum number of seconds that proftpd will allow clients to stay connected without receiving any data on either the control or data connection.
	Timeout *int32 `json:"timeout,omitempty"`
	// `timeout_notransfer` is the maximum number of seconds a client is allowed to spend connected, after authentication, without issuing a command which results in creating an active or passive data connection (i.e. sending/receiving a file, or receiving a directory listing).
	TimeoutNotransfer *int32 `json:"timeout_notransfer,omitempty"`
	// `rootlogin` is a boolean value which when configured to true enables login as root. This is generally discouraged because of the security risks.
	Rootlogin *bool `json:"rootlogin,omitempty"`
	// `onlyanonymous` allows anonymous FTP logins with access to the directory specified by `anonpath`.
	Onlyanonymous *bool `json:"onlyanonymous,omitempty"`
	// `onlyanonymous` allows anonymous FTP logins with access to the directory specified by `anonpath`.
	Anonpath  NullableString `json:"anonpath,omitempty"`
	Onlylocal *bool          `json:"onlylocal,omitempty"`
	// `banner` is a message displayed to local login users after they successfully authenticate. It is not displayed to anonymous login users.
	Banner *string `json:"banner,omitempty"`
	// `filemask` sets the default permissions for newly created files which by default are 077.
	Filemask *string `json:"filemask,omitempty"`
	// `dirmask` sets the default permissions for newly created directories which by default are 077.
	Dirmask *string `json:"dirmask,omitempty"`
	// `fxp` if set to true indicates that File eXchange Protocol is enabled. Generally it is discouraged as it makes the server vulnerable to FTP bounce attacks.
	Fxp *bool `json:"fxp,omitempty"`
	// `resume` if set allows FTP clients to resume interrupted transfers.
	Resume *bool `json:"resume,omitempty"`
	// `defaultroot` when set ensures that for local users, home directory access is only granted if the user is a member of group wheel.
	Defaultroot *bool `json:"defaultroot,omitempty"`
	// `ident` is a boolean value which when set to true indicates that IDENT authentication is required. If identd is not running on the client, this can result in timeouts.
	Ident      *bool `json:"ident,omitempty"`
	Reversedns *bool `json:"reversedns,omitempty"`
	// `masqaddress` is the public IP address or hostname which is set if FTP clients cannot connect through a NAT device.
	Masqaddress     *string `json:"masqaddress,omitempty"`
	Passiveportsmin *int32  `json:"passiveportsmin,omitempty"`
	Passiveportsmax *int32  `json:"passiveportsmax,omitempty"`
	// `localuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for local user. Default of zero indicates unlimited upload bandwidth ( from the FTP server configuration ).
	Localuserbw *int32 `json:"localuserbw,omitempty"`
	// `localuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for local user. Default of zero indicates unlimited download bandwidth ( from the FTP server configuration ).
	Localuserdlbw *int32 `json:"localuserdlbw,omitempty"`
	// `anonuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for anonymous user. Default of zero indicates unlimited upload bandwidth ( from the FTP server configuration ).
	Anonuserbw *int32 `json:"anonuserbw,omitempty"`
	// `anonuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for anonymous user. Default of zero indicates unlimited download bandwidth ( from the FTP server configuration ).
	Anonuserdlbw *int32 `json:"anonuserdlbw,omitempty"`
	// `tls` is a boolean value which when set indicates that encrypted connections are enabled. This requires a certificate to be configured first with the certificate service and the id of certificate is passed on in
	Tls *bool `json:"tls,omitempty"`
	// `tls_policy` defines whether the control channel, data channel, both channels, or neither channel of an FTP session must occur over SSL/TLS.
	TlsPolicy                       *string `json:"tls_policy,omitempty"`
	TlsOptAllowClientRenegotiations *bool   `json:"tls_opt_allow_client_renegotiations,omitempty"`
	TlsOptAllowDotLogin             *bool   `json:"tls_opt_allow_dot_login,omitempty"`
	TlsOptAllowPerUser              *bool   `json:"tls_opt_allow_per_user,omitempty"`
	TlsOptCommonNameRequired        *bool   `json:"tls_opt_common_name_required,omitempty"`
	// `tls_opt_enable_diags` is a boolean value when set, logs verbosely. This is helpful when troubleshooting a connection.
	TlsOptEnableDiags            *bool `json:"tls_opt_enable_diags,omitempty"`
	TlsOptExportCertData         *bool `json:"tls_opt_export_cert_data,omitempty"`
	TlsOptNoCertRequest          *bool `json:"tls_opt_no_cert_request,omitempty"`
	TlsOptNoEmptyFragments       *bool `json:"tls_opt_no_empty_fragments,omitempty"`
	TlsOptNoSessionReuseRequired *bool `json:"tls_opt_no_session_reuse_required,omitempty"`
	TlsOptStdenvvars             *bool `json:"tls_opt_stdenvvars,omitempty"`
	TlsOptDnsNameRequired        *bool `json:"tls_opt_dns_name_required,omitempty"`
	TlsOptIpAddressRequired      *bool `json:"tls_opt_ip_address_required,omitempty"`
	// `ssltls_certificate`.
	SsltlsCertificate NullableInt32 `json:"ssltls_certificate,omitempty"`
	Options           *string       `json:"options,omitempty"`
}

// NewFtpUpdate0 instantiates a new FtpUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFtpUpdate0() *FtpUpdate0 {
	this := FtpUpdate0{}
	return &this
}

// NewFtpUpdate0WithDefaults instantiates a new FtpUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFtpUpdate0WithDefaults() *FtpUpdate0 {
	this := FtpUpdate0{}
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *FtpUpdate0) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *FtpUpdate0) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *FtpUpdate0) SetPort(v int32) {
	o.Port = &v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *FtpUpdate0) GetClients() int32 {
	if o == nil || IsNil(o.Clients) {
		var ret int32
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetClientsOk() (*int32, bool) {
	if o == nil || IsNil(o.Clients) {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *FtpUpdate0) HasClients() bool {
	if o != nil && !IsNil(o.Clients) {
		return true
	}

	return false
}

// SetClients gets a reference to the given int32 and assigns it to the Clients field.
func (o *FtpUpdate0) SetClients(v int32) {
	o.Clients = &v
}

// GetIpconnections returns the Ipconnections field value if set, zero value otherwise.
func (o *FtpUpdate0) GetIpconnections() int32 {
	if o == nil || IsNil(o.Ipconnections) {
		var ret int32
		return ret
	}
	return *o.Ipconnections
}

// GetIpconnectionsOk returns a tuple with the Ipconnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetIpconnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Ipconnections) {
		return nil, false
	}
	return o.Ipconnections, true
}

// HasIpconnections returns a boolean if a field has been set.
func (o *FtpUpdate0) HasIpconnections() bool {
	if o != nil && !IsNil(o.Ipconnections) {
		return true
	}

	return false
}

// SetIpconnections gets a reference to the given int32 and assigns it to the Ipconnections field.
func (o *FtpUpdate0) SetIpconnections(v int32) {
	o.Ipconnections = &v
}

// GetLoginattempt returns the Loginattempt field value if set, zero value otherwise.
func (o *FtpUpdate0) GetLoginattempt() int32 {
	if o == nil || IsNil(o.Loginattempt) {
		var ret int32
		return ret
	}
	return *o.Loginattempt
}

// GetLoginattemptOk returns a tuple with the Loginattempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetLoginattemptOk() (*int32, bool) {
	if o == nil || IsNil(o.Loginattempt) {
		return nil, false
	}
	return o.Loginattempt, true
}

// HasLoginattempt returns a boolean if a field has been set.
func (o *FtpUpdate0) HasLoginattempt() bool {
	if o != nil && !IsNil(o.Loginattempt) {
		return true
	}

	return false
}

// SetLoginattempt gets a reference to the given int32 and assigns it to the Loginattempt field.
func (o *FtpUpdate0) SetLoginattempt(v int32) {
	o.Loginattempt = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *FtpUpdate0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetTimeoutNotransfer returns the TimeoutNotransfer field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTimeoutNotransfer() int32 {
	if o == nil || IsNil(o.TimeoutNotransfer) {
		var ret int32
		return ret
	}
	return *o.TimeoutNotransfer
}

// GetTimeoutNotransferOk returns a tuple with the TimeoutNotransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTimeoutNotransferOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutNotransfer) {
		return nil, false
	}
	return o.TimeoutNotransfer, true
}

// HasTimeoutNotransfer returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTimeoutNotransfer() bool {
	if o != nil && !IsNil(o.TimeoutNotransfer) {
		return true
	}

	return false
}

// SetTimeoutNotransfer gets a reference to the given int32 and assigns it to the TimeoutNotransfer field.
func (o *FtpUpdate0) SetTimeoutNotransfer(v int32) {
	o.TimeoutNotransfer = &v
}

// GetRootlogin returns the Rootlogin field value if set, zero value otherwise.
func (o *FtpUpdate0) GetRootlogin() bool {
	if o == nil || IsNil(o.Rootlogin) {
		var ret bool
		return ret
	}
	return *o.Rootlogin
}

// GetRootloginOk returns a tuple with the Rootlogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetRootloginOk() (*bool, bool) {
	if o == nil || IsNil(o.Rootlogin) {
		return nil, false
	}
	return o.Rootlogin, true
}

// HasRootlogin returns a boolean if a field has been set.
func (o *FtpUpdate0) HasRootlogin() bool {
	if o != nil && !IsNil(o.Rootlogin) {
		return true
	}

	return false
}

// SetRootlogin gets a reference to the given bool and assigns it to the Rootlogin field.
func (o *FtpUpdate0) SetRootlogin(v bool) {
	o.Rootlogin = &v
}

// GetOnlyanonymous returns the Onlyanonymous field value if set, zero value otherwise.
func (o *FtpUpdate0) GetOnlyanonymous() bool {
	if o == nil || IsNil(o.Onlyanonymous) {
		var ret bool
		return ret
	}
	return *o.Onlyanonymous
}

// GetOnlyanonymousOk returns a tuple with the Onlyanonymous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetOnlyanonymousOk() (*bool, bool) {
	if o == nil || IsNil(o.Onlyanonymous) {
		return nil, false
	}
	return o.Onlyanonymous, true
}

// HasOnlyanonymous returns a boolean if a field has been set.
func (o *FtpUpdate0) HasOnlyanonymous() bool {
	if o != nil && !IsNil(o.Onlyanonymous) {
		return true
	}

	return false
}

// SetOnlyanonymous gets a reference to the given bool and assigns it to the Onlyanonymous field.
func (o *FtpUpdate0) SetOnlyanonymous(v bool) {
	o.Onlyanonymous = &v
}

// GetAnonpath returns the Anonpath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FtpUpdate0) GetAnonpath() string {
	if o == nil || IsNil(o.Anonpath.Get()) {
		var ret string
		return ret
	}
	return *o.Anonpath.Get()
}

// GetAnonpathOk returns a tuple with the Anonpath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FtpUpdate0) GetAnonpathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Anonpath.Get(), o.Anonpath.IsSet()
}

// HasAnonpath returns a boolean if a field has been set.
func (o *FtpUpdate0) HasAnonpath() bool {
	if o != nil && o.Anonpath.IsSet() {
		return true
	}

	return false
}

// SetAnonpath gets a reference to the given NullableString and assigns it to the Anonpath field.
func (o *FtpUpdate0) SetAnonpath(v string) {
	o.Anonpath.Set(&v)
}

// SetAnonpathNil sets the value for Anonpath to be an explicit nil
func (o *FtpUpdate0) SetAnonpathNil() {
	o.Anonpath.Set(nil)
}

// UnsetAnonpath ensures that no value is present for Anonpath, not even an explicit nil
func (o *FtpUpdate0) UnsetAnonpath() {
	o.Anonpath.Unset()
}

// GetOnlylocal returns the Onlylocal field value if set, zero value otherwise.
func (o *FtpUpdate0) GetOnlylocal() bool {
	if o == nil || IsNil(o.Onlylocal) {
		var ret bool
		return ret
	}
	return *o.Onlylocal
}

// GetOnlylocalOk returns a tuple with the Onlylocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetOnlylocalOk() (*bool, bool) {
	if o == nil || IsNil(o.Onlylocal) {
		return nil, false
	}
	return o.Onlylocal, true
}

// HasOnlylocal returns a boolean if a field has been set.
func (o *FtpUpdate0) HasOnlylocal() bool {
	if o != nil && !IsNil(o.Onlylocal) {
		return true
	}

	return false
}

// SetOnlylocal gets a reference to the given bool and assigns it to the Onlylocal field.
func (o *FtpUpdate0) SetOnlylocal(v bool) {
	o.Onlylocal = &v
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *FtpUpdate0) GetBanner() string {
	if o == nil || IsNil(o.Banner) {
		var ret string
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetBannerOk() (*string, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *FtpUpdate0) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given string and assigns it to the Banner field.
func (o *FtpUpdate0) SetBanner(v string) {
	o.Banner = &v
}

// GetFilemask returns the Filemask field value if set, zero value otherwise.
func (o *FtpUpdate0) GetFilemask() string {
	if o == nil || IsNil(o.Filemask) {
		var ret string
		return ret
	}
	return *o.Filemask
}

// GetFilemaskOk returns a tuple with the Filemask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetFilemaskOk() (*string, bool) {
	if o == nil || IsNil(o.Filemask) {
		return nil, false
	}
	return o.Filemask, true
}

// HasFilemask returns a boolean if a field has been set.
func (o *FtpUpdate0) HasFilemask() bool {
	if o != nil && !IsNil(o.Filemask) {
		return true
	}

	return false
}

// SetFilemask gets a reference to the given string and assigns it to the Filemask field.
func (o *FtpUpdate0) SetFilemask(v string) {
	o.Filemask = &v
}

// GetDirmask returns the Dirmask field value if set, zero value otherwise.
func (o *FtpUpdate0) GetDirmask() string {
	if o == nil || IsNil(o.Dirmask) {
		var ret string
		return ret
	}
	return *o.Dirmask
}

// GetDirmaskOk returns a tuple with the Dirmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetDirmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Dirmask) {
		return nil, false
	}
	return o.Dirmask, true
}

// HasDirmask returns a boolean if a field has been set.
func (o *FtpUpdate0) HasDirmask() bool {
	if o != nil && !IsNil(o.Dirmask) {
		return true
	}

	return false
}

// SetDirmask gets a reference to the given string and assigns it to the Dirmask field.
func (o *FtpUpdate0) SetDirmask(v string) {
	o.Dirmask = &v
}

// GetFxp returns the Fxp field value if set, zero value otherwise.
func (o *FtpUpdate0) GetFxp() bool {
	if o == nil || IsNil(o.Fxp) {
		var ret bool
		return ret
	}
	return *o.Fxp
}

// GetFxpOk returns a tuple with the Fxp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetFxpOk() (*bool, bool) {
	if o == nil || IsNil(o.Fxp) {
		return nil, false
	}
	return o.Fxp, true
}

// HasFxp returns a boolean if a field has been set.
func (o *FtpUpdate0) HasFxp() bool {
	if o != nil && !IsNil(o.Fxp) {
		return true
	}

	return false
}

// SetFxp gets a reference to the given bool and assigns it to the Fxp field.
func (o *FtpUpdate0) SetFxp(v bool) {
	o.Fxp = &v
}

// GetResume returns the Resume field value if set, zero value otherwise.
func (o *FtpUpdate0) GetResume() bool {
	if o == nil || IsNil(o.Resume) {
		var ret bool
		return ret
	}
	return *o.Resume
}

// GetResumeOk returns a tuple with the Resume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.Resume) {
		return nil, false
	}
	return o.Resume, true
}

// HasResume returns a boolean if a field has been set.
func (o *FtpUpdate0) HasResume() bool {
	if o != nil && !IsNil(o.Resume) {
		return true
	}

	return false
}

// SetResume gets a reference to the given bool and assigns it to the Resume field.
func (o *FtpUpdate0) SetResume(v bool) {
	o.Resume = &v
}

// GetDefaultroot returns the Defaultroot field value if set, zero value otherwise.
func (o *FtpUpdate0) GetDefaultroot() bool {
	if o == nil || IsNil(o.Defaultroot) {
		var ret bool
		return ret
	}
	return *o.Defaultroot
}

// GetDefaultrootOk returns a tuple with the Defaultroot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetDefaultrootOk() (*bool, bool) {
	if o == nil || IsNil(o.Defaultroot) {
		return nil, false
	}
	return o.Defaultroot, true
}

// HasDefaultroot returns a boolean if a field has been set.
func (o *FtpUpdate0) HasDefaultroot() bool {
	if o != nil && !IsNil(o.Defaultroot) {
		return true
	}

	return false
}

// SetDefaultroot gets a reference to the given bool and assigns it to the Defaultroot field.
func (o *FtpUpdate0) SetDefaultroot(v bool) {
	o.Defaultroot = &v
}

// GetIdent returns the Ident field value if set, zero value otherwise.
func (o *FtpUpdate0) GetIdent() bool {
	if o == nil || IsNil(o.Ident) {
		var ret bool
		return ret
	}
	return *o.Ident
}

// GetIdentOk returns a tuple with the Ident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetIdentOk() (*bool, bool) {
	if o == nil || IsNil(o.Ident) {
		return nil, false
	}
	return o.Ident, true
}

// HasIdent returns a boolean if a field has been set.
func (o *FtpUpdate0) HasIdent() bool {
	if o != nil && !IsNil(o.Ident) {
		return true
	}

	return false
}

// SetIdent gets a reference to the given bool and assigns it to the Ident field.
func (o *FtpUpdate0) SetIdent(v bool) {
	o.Ident = &v
}

// GetReversedns returns the Reversedns field value if set, zero value otherwise.
func (o *FtpUpdate0) GetReversedns() bool {
	if o == nil || IsNil(o.Reversedns) {
		var ret bool
		return ret
	}
	return *o.Reversedns
}

// GetReversednsOk returns a tuple with the Reversedns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetReversednsOk() (*bool, bool) {
	if o == nil || IsNil(o.Reversedns) {
		return nil, false
	}
	return o.Reversedns, true
}

// HasReversedns returns a boolean if a field has been set.
func (o *FtpUpdate0) HasReversedns() bool {
	if o != nil && !IsNil(o.Reversedns) {
		return true
	}

	return false
}

// SetReversedns gets a reference to the given bool and assigns it to the Reversedns field.
func (o *FtpUpdate0) SetReversedns(v bool) {
	o.Reversedns = &v
}

// GetMasqaddress returns the Masqaddress field value if set, zero value otherwise.
func (o *FtpUpdate0) GetMasqaddress() string {
	if o == nil || IsNil(o.Masqaddress) {
		var ret string
		return ret
	}
	return *o.Masqaddress
}

// GetMasqaddressOk returns a tuple with the Masqaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetMasqaddressOk() (*string, bool) {
	if o == nil || IsNil(o.Masqaddress) {
		return nil, false
	}
	return o.Masqaddress, true
}

// HasMasqaddress returns a boolean if a field has been set.
func (o *FtpUpdate0) HasMasqaddress() bool {
	if o != nil && !IsNil(o.Masqaddress) {
		return true
	}

	return false
}

// SetMasqaddress gets a reference to the given string and assigns it to the Masqaddress field.
func (o *FtpUpdate0) SetMasqaddress(v string) {
	o.Masqaddress = &v
}

// GetPassiveportsmin returns the Passiveportsmin field value if set, zero value otherwise.
func (o *FtpUpdate0) GetPassiveportsmin() int32 {
	if o == nil || IsNil(o.Passiveportsmin) {
		var ret int32
		return ret
	}
	return *o.Passiveportsmin
}

// GetPassiveportsminOk returns a tuple with the Passiveportsmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetPassiveportsminOk() (*int32, bool) {
	if o == nil || IsNil(o.Passiveportsmin) {
		return nil, false
	}
	return o.Passiveportsmin, true
}

// HasPassiveportsmin returns a boolean if a field has been set.
func (o *FtpUpdate0) HasPassiveportsmin() bool {
	if o != nil && !IsNil(o.Passiveportsmin) {
		return true
	}

	return false
}

// SetPassiveportsmin gets a reference to the given int32 and assigns it to the Passiveportsmin field.
func (o *FtpUpdate0) SetPassiveportsmin(v int32) {
	o.Passiveportsmin = &v
}

// GetPassiveportsmax returns the Passiveportsmax field value if set, zero value otherwise.
func (o *FtpUpdate0) GetPassiveportsmax() int32 {
	if o == nil || IsNil(o.Passiveportsmax) {
		var ret int32
		return ret
	}
	return *o.Passiveportsmax
}

// GetPassiveportsmaxOk returns a tuple with the Passiveportsmax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetPassiveportsmaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Passiveportsmax) {
		return nil, false
	}
	return o.Passiveportsmax, true
}

// HasPassiveportsmax returns a boolean if a field has been set.
func (o *FtpUpdate0) HasPassiveportsmax() bool {
	if o != nil && !IsNil(o.Passiveportsmax) {
		return true
	}

	return false
}

// SetPassiveportsmax gets a reference to the given int32 and assigns it to the Passiveportsmax field.
func (o *FtpUpdate0) SetPassiveportsmax(v int32) {
	o.Passiveportsmax = &v
}

// GetLocaluserbw returns the Localuserbw field value if set, zero value otherwise.
func (o *FtpUpdate0) GetLocaluserbw() int32 {
	if o == nil || IsNil(o.Localuserbw) {
		var ret int32
		return ret
	}
	return *o.Localuserbw
}

// GetLocaluserbwOk returns a tuple with the Localuserbw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetLocaluserbwOk() (*int32, bool) {
	if o == nil || IsNil(o.Localuserbw) {
		return nil, false
	}
	return o.Localuserbw, true
}

// HasLocaluserbw returns a boolean if a field has been set.
func (o *FtpUpdate0) HasLocaluserbw() bool {
	if o != nil && !IsNil(o.Localuserbw) {
		return true
	}

	return false
}

// SetLocaluserbw gets a reference to the given int32 and assigns it to the Localuserbw field.
func (o *FtpUpdate0) SetLocaluserbw(v int32) {
	o.Localuserbw = &v
}

// GetLocaluserdlbw returns the Localuserdlbw field value if set, zero value otherwise.
func (o *FtpUpdate0) GetLocaluserdlbw() int32 {
	if o == nil || IsNil(o.Localuserdlbw) {
		var ret int32
		return ret
	}
	return *o.Localuserdlbw
}

// GetLocaluserdlbwOk returns a tuple with the Localuserdlbw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetLocaluserdlbwOk() (*int32, bool) {
	if o == nil || IsNil(o.Localuserdlbw) {
		return nil, false
	}
	return o.Localuserdlbw, true
}

// HasLocaluserdlbw returns a boolean if a field has been set.
func (o *FtpUpdate0) HasLocaluserdlbw() bool {
	if o != nil && !IsNil(o.Localuserdlbw) {
		return true
	}

	return false
}

// SetLocaluserdlbw gets a reference to the given int32 and assigns it to the Localuserdlbw field.
func (o *FtpUpdate0) SetLocaluserdlbw(v int32) {
	o.Localuserdlbw = &v
}

// GetAnonuserbw returns the Anonuserbw field value if set, zero value otherwise.
func (o *FtpUpdate0) GetAnonuserbw() int32 {
	if o == nil || IsNil(o.Anonuserbw) {
		var ret int32
		return ret
	}
	return *o.Anonuserbw
}

// GetAnonuserbwOk returns a tuple with the Anonuserbw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetAnonuserbwOk() (*int32, bool) {
	if o == nil || IsNil(o.Anonuserbw) {
		return nil, false
	}
	return o.Anonuserbw, true
}

// HasAnonuserbw returns a boolean if a field has been set.
func (o *FtpUpdate0) HasAnonuserbw() bool {
	if o != nil && !IsNil(o.Anonuserbw) {
		return true
	}

	return false
}

// SetAnonuserbw gets a reference to the given int32 and assigns it to the Anonuserbw field.
func (o *FtpUpdate0) SetAnonuserbw(v int32) {
	o.Anonuserbw = &v
}

// GetAnonuserdlbw returns the Anonuserdlbw field value if set, zero value otherwise.
func (o *FtpUpdate0) GetAnonuserdlbw() int32 {
	if o == nil || IsNil(o.Anonuserdlbw) {
		var ret int32
		return ret
	}
	return *o.Anonuserdlbw
}

// GetAnonuserdlbwOk returns a tuple with the Anonuserdlbw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetAnonuserdlbwOk() (*int32, bool) {
	if o == nil || IsNil(o.Anonuserdlbw) {
		return nil, false
	}
	return o.Anonuserdlbw, true
}

// HasAnonuserdlbw returns a boolean if a field has been set.
func (o *FtpUpdate0) HasAnonuserdlbw() bool {
	if o != nil && !IsNil(o.Anonuserdlbw) {
		return true
	}

	return false
}

// SetAnonuserdlbw gets a reference to the given int32 and assigns it to the Anonuserdlbw field.
func (o *FtpUpdate0) SetAnonuserdlbw(v int32) {
	o.Anonuserdlbw = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTls() bool {
	if o == nil || IsNil(o.Tls) {
		var ret bool
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOk() (*bool, bool) {
	if o == nil || IsNil(o.Tls) {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTls() bool {
	if o != nil && !IsNil(o.Tls) {
		return true
	}

	return false
}

// SetTls gets a reference to the given bool and assigns it to the Tls field.
func (o *FtpUpdate0) SetTls(v bool) {
	o.Tls = &v
}

// GetTlsPolicy returns the TlsPolicy field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsPolicy() string {
	if o == nil || IsNil(o.TlsPolicy) {
		var ret string
		return ret
	}
	return *o.TlsPolicy
}

// GetTlsPolicyOk returns a tuple with the TlsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.TlsPolicy) {
		return nil, false
	}
	return o.TlsPolicy, true
}

// HasTlsPolicy returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsPolicy() bool {
	if o != nil && !IsNil(o.TlsPolicy) {
		return true
	}

	return false
}

// SetTlsPolicy gets a reference to the given string and assigns it to the TlsPolicy field.
func (o *FtpUpdate0) SetTlsPolicy(v string) {
	o.TlsPolicy = &v
}

// GetTlsOptAllowClientRenegotiations returns the TlsOptAllowClientRenegotiations field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptAllowClientRenegotiations() bool {
	if o == nil || IsNil(o.TlsOptAllowClientRenegotiations) {
		var ret bool
		return ret
	}
	return *o.TlsOptAllowClientRenegotiations
}

// GetTlsOptAllowClientRenegotiationsOk returns a tuple with the TlsOptAllowClientRenegotiations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptAllowClientRenegotiationsOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptAllowClientRenegotiations) {
		return nil, false
	}
	return o.TlsOptAllowClientRenegotiations, true
}

// HasTlsOptAllowClientRenegotiations returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptAllowClientRenegotiations() bool {
	if o != nil && !IsNil(o.TlsOptAllowClientRenegotiations) {
		return true
	}

	return false
}

// SetTlsOptAllowClientRenegotiations gets a reference to the given bool and assigns it to the TlsOptAllowClientRenegotiations field.
func (o *FtpUpdate0) SetTlsOptAllowClientRenegotiations(v bool) {
	o.TlsOptAllowClientRenegotiations = &v
}

// GetTlsOptAllowDotLogin returns the TlsOptAllowDotLogin field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptAllowDotLogin() bool {
	if o == nil || IsNil(o.TlsOptAllowDotLogin) {
		var ret bool
		return ret
	}
	return *o.TlsOptAllowDotLogin
}

// GetTlsOptAllowDotLoginOk returns a tuple with the TlsOptAllowDotLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptAllowDotLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptAllowDotLogin) {
		return nil, false
	}
	return o.TlsOptAllowDotLogin, true
}

// HasTlsOptAllowDotLogin returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptAllowDotLogin() bool {
	if o != nil && !IsNil(o.TlsOptAllowDotLogin) {
		return true
	}

	return false
}

// SetTlsOptAllowDotLogin gets a reference to the given bool and assigns it to the TlsOptAllowDotLogin field.
func (o *FtpUpdate0) SetTlsOptAllowDotLogin(v bool) {
	o.TlsOptAllowDotLogin = &v
}

// GetTlsOptAllowPerUser returns the TlsOptAllowPerUser field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptAllowPerUser() bool {
	if o == nil || IsNil(o.TlsOptAllowPerUser) {
		var ret bool
		return ret
	}
	return *o.TlsOptAllowPerUser
}

// GetTlsOptAllowPerUserOk returns a tuple with the TlsOptAllowPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptAllowPerUserOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptAllowPerUser) {
		return nil, false
	}
	return o.TlsOptAllowPerUser, true
}

// HasTlsOptAllowPerUser returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptAllowPerUser() bool {
	if o != nil && !IsNil(o.TlsOptAllowPerUser) {
		return true
	}

	return false
}

// SetTlsOptAllowPerUser gets a reference to the given bool and assigns it to the TlsOptAllowPerUser field.
func (o *FtpUpdate0) SetTlsOptAllowPerUser(v bool) {
	o.TlsOptAllowPerUser = &v
}

// GetTlsOptCommonNameRequired returns the TlsOptCommonNameRequired field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptCommonNameRequired() bool {
	if o == nil || IsNil(o.TlsOptCommonNameRequired) {
		var ret bool
		return ret
	}
	return *o.TlsOptCommonNameRequired
}

// GetTlsOptCommonNameRequiredOk returns a tuple with the TlsOptCommonNameRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptCommonNameRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptCommonNameRequired) {
		return nil, false
	}
	return o.TlsOptCommonNameRequired, true
}

// HasTlsOptCommonNameRequired returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptCommonNameRequired() bool {
	if o != nil && !IsNil(o.TlsOptCommonNameRequired) {
		return true
	}

	return false
}

// SetTlsOptCommonNameRequired gets a reference to the given bool and assigns it to the TlsOptCommonNameRequired field.
func (o *FtpUpdate0) SetTlsOptCommonNameRequired(v bool) {
	o.TlsOptCommonNameRequired = &v
}

// GetTlsOptEnableDiags returns the TlsOptEnableDiags field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptEnableDiags() bool {
	if o == nil || IsNil(o.TlsOptEnableDiags) {
		var ret bool
		return ret
	}
	return *o.TlsOptEnableDiags
}

// GetTlsOptEnableDiagsOk returns a tuple with the TlsOptEnableDiags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptEnableDiagsOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptEnableDiags) {
		return nil, false
	}
	return o.TlsOptEnableDiags, true
}

// HasTlsOptEnableDiags returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptEnableDiags() bool {
	if o != nil && !IsNil(o.TlsOptEnableDiags) {
		return true
	}

	return false
}

// SetTlsOptEnableDiags gets a reference to the given bool and assigns it to the TlsOptEnableDiags field.
func (o *FtpUpdate0) SetTlsOptEnableDiags(v bool) {
	o.TlsOptEnableDiags = &v
}

// GetTlsOptExportCertData returns the TlsOptExportCertData field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptExportCertData() bool {
	if o == nil || IsNil(o.TlsOptExportCertData) {
		var ret bool
		return ret
	}
	return *o.TlsOptExportCertData
}

// GetTlsOptExportCertDataOk returns a tuple with the TlsOptExportCertData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptExportCertDataOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptExportCertData) {
		return nil, false
	}
	return o.TlsOptExportCertData, true
}

// HasTlsOptExportCertData returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptExportCertData() bool {
	if o != nil && !IsNil(o.TlsOptExportCertData) {
		return true
	}

	return false
}

// SetTlsOptExportCertData gets a reference to the given bool and assigns it to the TlsOptExportCertData field.
func (o *FtpUpdate0) SetTlsOptExportCertData(v bool) {
	o.TlsOptExportCertData = &v
}

// GetTlsOptNoCertRequest returns the TlsOptNoCertRequest field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptNoCertRequest() bool {
	if o == nil || IsNil(o.TlsOptNoCertRequest) {
		var ret bool
		return ret
	}
	return *o.TlsOptNoCertRequest
}

// GetTlsOptNoCertRequestOk returns a tuple with the TlsOptNoCertRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptNoCertRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptNoCertRequest) {
		return nil, false
	}
	return o.TlsOptNoCertRequest, true
}

// HasTlsOptNoCertRequest returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptNoCertRequest() bool {
	if o != nil && !IsNil(o.TlsOptNoCertRequest) {
		return true
	}

	return false
}

// SetTlsOptNoCertRequest gets a reference to the given bool and assigns it to the TlsOptNoCertRequest field.
func (o *FtpUpdate0) SetTlsOptNoCertRequest(v bool) {
	o.TlsOptNoCertRequest = &v
}

// GetTlsOptNoEmptyFragments returns the TlsOptNoEmptyFragments field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptNoEmptyFragments() bool {
	if o == nil || IsNil(o.TlsOptNoEmptyFragments) {
		var ret bool
		return ret
	}
	return *o.TlsOptNoEmptyFragments
}

// GetTlsOptNoEmptyFragmentsOk returns a tuple with the TlsOptNoEmptyFragments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptNoEmptyFragmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptNoEmptyFragments) {
		return nil, false
	}
	return o.TlsOptNoEmptyFragments, true
}

// HasTlsOptNoEmptyFragments returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptNoEmptyFragments() bool {
	if o != nil && !IsNil(o.TlsOptNoEmptyFragments) {
		return true
	}

	return false
}

// SetTlsOptNoEmptyFragments gets a reference to the given bool and assigns it to the TlsOptNoEmptyFragments field.
func (o *FtpUpdate0) SetTlsOptNoEmptyFragments(v bool) {
	o.TlsOptNoEmptyFragments = &v
}

// GetTlsOptNoSessionReuseRequired returns the TlsOptNoSessionReuseRequired field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptNoSessionReuseRequired() bool {
	if o == nil || IsNil(o.TlsOptNoSessionReuseRequired) {
		var ret bool
		return ret
	}
	return *o.TlsOptNoSessionReuseRequired
}

// GetTlsOptNoSessionReuseRequiredOk returns a tuple with the TlsOptNoSessionReuseRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptNoSessionReuseRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptNoSessionReuseRequired) {
		return nil, false
	}
	return o.TlsOptNoSessionReuseRequired, true
}

// HasTlsOptNoSessionReuseRequired returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptNoSessionReuseRequired() bool {
	if o != nil && !IsNil(o.TlsOptNoSessionReuseRequired) {
		return true
	}

	return false
}

// SetTlsOptNoSessionReuseRequired gets a reference to the given bool and assigns it to the TlsOptNoSessionReuseRequired field.
func (o *FtpUpdate0) SetTlsOptNoSessionReuseRequired(v bool) {
	o.TlsOptNoSessionReuseRequired = &v
}

// GetTlsOptStdenvvars returns the TlsOptStdenvvars field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptStdenvvars() bool {
	if o == nil || IsNil(o.TlsOptStdenvvars) {
		var ret bool
		return ret
	}
	return *o.TlsOptStdenvvars
}

// GetTlsOptStdenvvarsOk returns a tuple with the TlsOptStdenvvars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptStdenvvarsOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptStdenvvars) {
		return nil, false
	}
	return o.TlsOptStdenvvars, true
}

// HasTlsOptStdenvvars returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptStdenvvars() bool {
	if o != nil && !IsNil(o.TlsOptStdenvvars) {
		return true
	}

	return false
}

// SetTlsOptStdenvvars gets a reference to the given bool and assigns it to the TlsOptStdenvvars field.
func (o *FtpUpdate0) SetTlsOptStdenvvars(v bool) {
	o.TlsOptStdenvvars = &v
}

// GetTlsOptDnsNameRequired returns the TlsOptDnsNameRequired field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptDnsNameRequired() bool {
	if o == nil || IsNil(o.TlsOptDnsNameRequired) {
		var ret bool
		return ret
	}
	return *o.TlsOptDnsNameRequired
}

// GetTlsOptDnsNameRequiredOk returns a tuple with the TlsOptDnsNameRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptDnsNameRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptDnsNameRequired) {
		return nil, false
	}
	return o.TlsOptDnsNameRequired, true
}

// HasTlsOptDnsNameRequired returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptDnsNameRequired() bool {
	if o != nil && !IsNil(o.TlsOptDnsNameRequired) {
		return true
	}

	return false
}

// SetTlsOptDnsNameRequired gets a reference to the given bool and assigns it to the TlsOptDnsNameRequired field.
func (o *FtpUpdate0) SetTlsOptDnsNameRequired(v bool) {
	o.TlsOptDnsNameRequired = &v
}

// GetTlsOptIpAddressRequired returns the TlsOptIpAddressRequired field value if set, zero value otherwise.
func (o *FtpUpdate0) GetTlsOptIpAddressRequired() bool {
	if o == nil || IsNil(o.TlsOptIpAddressRequired) {
		var ret bool
		return ret
	}
	return *o.TlsOptIpAddressRequired
}

// GetTlsOptIpAddressRequiredOk returns a tuple with the TlsOptIpAddressRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetTlsOptIpAddressRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsOptIpAddressRequired) {
		return nil, false
	}
	return o.TlsOptIpAddressRequired, true
}

// HasTlsOptIpAddressRequired returns a boolean if a field has been set.
func (o *FtpUpdate0) HasTlsOptIpAddressRequired() bool {
	if o != nil && !IsNil(o.TlsOptIpAddressRequired) {
		return true
	}

	return false
}

// SetTlsOptIpAddressRequired gets a reference to the given bool and assigns it to the TlsOptIpAddressRequired field.
func (o *FtpUpdate0) SetTlsOptIpAddressRequired(v bool) {
	o.TlsOptIpAddressRequired = &v
}

// GetSsltlsCertificate returns the SsltlsCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FtpUpdate0) GetSsltlsCertificate() int32 {
	if o == nil || IsNil(o.SsltlsCertificate.Get()) {
		var ret int32
		return ret
	}
	return *o.SsltlsCertificate.Get()
}

// GetSsltlsCertificateOk returns a tuple with the SsltlsCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FtpUpdate0) GetSsltlsCertificateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SsltlsCertificate.Get(), o.SsltlsCertificate.IsSet()
}

// HasSsltlsCertificate returns a boolean if a field has been set.
func (o *FtpUpdate0) HasSsltlsCertificate() bool {
	if o != nil && o.SsltlsCertificate.IsSet() {
		return true
	}

	return false
}

// SetSsltlsCertificate gets a reference to the given NullableInt32 and assigns it to the SsltlsCertificate field.
func (o *FtpUpdate0) SetSsltlsCertificate(v int32) {
	o.SsltlsCertificate.Set(&v)
}

// SetSsltlsCertificateNil sets the value for SsltlsCertificate to be an explicit nil
func (o *FtpUpdate0) SetSsltlsCertificateNil() {
	o.SsltlsCertificate.Set(nil)
}

// UnsetSsltlsCertificate ensures that no value is present for SsltlsCertificate, not even an explicit nil
func (o *FtpUpdate0) UnsetSsltlsCertificate() {
	o.SsltlsCertificate.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FtpUpdate0) GetOptions() string {
	if o == nil || IsNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FtpUpdate0) GetOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FtpUpdate0) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *FtpUpdate0) SetOptions(v string) {
	o.Options = &v
}

func (o FtpUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FtpUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Clients) {
		toSerialize["clients"] = o.Clients
	}
	if !IsNil(o.Ipconnections) {
		toSerialize["ipconnections"] = o.Ipconnections
	}
	if !IsNil(o.Loginattempt) {
		toSerialize["loginattempt"] = o.Loginattempt
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.TimeoutNotransfer) {
		toSerialize["timeout_notransfer"] = o.TimeoutNotransfer
	}
	if !IsNil(o.Rootlogin) {
		toSerialize["rootlogin"] = o.Rootlogin
	}
	if !IsNil(o.Onlyanonymous) {
		toSerialize["onlyanonymous"] = o.Onlyanonymous
	}
	if o.Anonpath.IsSet() {
		toSerialize["anonpath"] = o.Anonpath.Get()
	}
	if !IsNil(o.Onlylocal) {
		toSerialize["onlylocal"] = o.Onlylocal
	}
	if !IsNil(o.Banner) {
		toSerialize["banner"] = o.Banner
	}
	if !IsNil(o.Filemask) {
		toSerialize["filemask"] = o.Filemask
	}
	if !IsNil(o.Dirmask) {
		toSerialize["dirmask"] = o.Dirmask
	}
	if !IsNil(o.Fxp) {
		toSerialize["fxp"] = o.Fxp
	}
	if !IsNil(o.Resume) {
		toSerialize["resume"] = o.Resume
	}
	if !IsNil(o.Defaultroot) {
		toSerialize["defaultroot"] = o.Defaultroot
	}
	if !IsNil(o.Ident) {
		toSerialize["ident"] = o.Ident
	}
	if !IsNil(o.Reversedns) {
		toSerialize["reversedns"] = o.Reversedns
	}
	if !IsNil(o.Masqaddress) {
		toSerialize["masqaddress"] = o.Masqaddress
	}
	if !IsNil(o.Passiveportsmin) {
		toSerialize["passiveportsmin"] = o.Passiveportsmin
	}
	if !IsNil(o.Passiveportsmax) {
		toSerialize["passiveportsmax"] = o.Passiveportsmax
	}
	if !IsNil(o.Localuserbw) {
		toSerialize["localuserbw"] = o.Localuserbw
	}
	if !IsNil(o.Localuserdlbw) {
		toSerialize["localuserdlbw"] = o.Localuserdlbw
	}
	if !IsNil(o.Anonuserbw) {
		toSerialize["anonuserbw"] = o.Anonuserbw
	}
	if !IsNil(o.Anonuserdlbw) {
		toSerialize["anonuserdlbw"] = o.Anonuserdlbw
	}
	if !IsNil(o.Tls) {
		toSerialize["tls"] = o.Tls
	}
	if !IsNil(o.TlsPolicy) {
		toSerialize["tls_policy"] = o.TlsPolicy
	}
	if !IsNil(o.TlsOptAllowClientRenegotiations) {
		toSerialize["tls_opt_allow_client_renegotiations"] = o.TlsOptAllowClientRenegotiations
	}
	if !IsNil(o.TlsOptAllowDotLogin) {
		toSerialize["tls_opt_allow_dot_login"] = o.TlsOptAllowDotLogin
	}
	if !IsNil(o.TlsOptAllowPerUser) {
		toSerialize["tls_opt_allow_per_user"] = o.TlsOptAllowPerUser
	}
	if !IsNil(o.TlsOptCommonNameRequired) {
		toSerialize["tls_opt_common_name_required"] = o.TlsOptCommonNameRequired
	}
	if !IsNil(o.TlsOptEnableDiags) {
		toSerialize["tls_opt_enable_diags"] = o.TlsOptEnableDiags
	}
	if !IsNil(o.TlsOptExportCertData) {
		toSerialize["tls_opt_export_cert_data"] = o.TlsOptExportCertData
	}
	if !IsNil(o.TlsOptNoCertRequest) {
		toSerialize["tls_opt_no_cert_request"] = o.TlsOptNoCertRequest
	}
	if !IsNil(o.TlsOptNoEmptyFragments) {
		toSerialize["tls_opt_no_empty_fragments"] = o.TlsOptNoEmptyFragments
	}
	if !IsNil(o.TlsOptNoSessionReuseRequired) {
		toSerialize["tls_opt_no_session_reuse_required"] = o.TlsOptNoSessionReuseRequired
	}
	if !IsNil(o.TlsOptStdenvvars) {
		toSerialize["tls_opt_stdenvvars"] = o.TlsOptStdenvvars
	}
	if !IsNil(o.TlsOptDnsNameRequired) {
		toSerialize["tls_opt_dns_name_required"] = o.TlsOptDnsNameRequired
	}
	if !IsNil(o.TlsOptIpAddressRequired) {
		toSerialize["tls_opt_ip_address_required"] = o.TlsOptIpAddressRequired
	}
	if o.SsltlsCertificate.IsSet() {
		toSerialize["ssltls_certificate"] = o.SsltlsCertificate.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableFtpUpdate0 struct {
	value *FtpUpdate0
	isSet bool
}

func (v NullableFtpUpdate0) Get() *FtpUpdate0 {
	return v.value
}

func (v *NullableFtpUpdate0) Set(val *FtpUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableFtpUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableFtpUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFtpUpdate0(val *FtpUpdate0) *NullableFtpUpdate0 {
	return &NullableFtpUpdate0{value: val, isSet: true}
}

func (v NullableFtpUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFtpUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
