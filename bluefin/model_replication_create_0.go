/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ReplicationCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationCreate0{}

// ReplicationCreate0 struct for ReplicationCreate0
type ReplicationCreate0 struct {
	// * `name` specifies a name for replication task
	Name *string `json:"name,omitempty"`
	// * `direction` specifies whether task will `PUSH` or `PULL` snapshots
	Direction *string `json:"direction,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	Transport *string `json:"transport,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	SshCredentials NullableInt32 `json:"ssh_credentials,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	NetcatActiveSide              NullableString `json:"netcat_active_side,omitempty"`
	NetcatActiveSideListenAddress NullableString `json:"netcat_active_side_listen_address,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	NetcatActiveSidePortMin NullableInt32 `json:"netcat_active_side_port_min,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	NetcatActiveSidePortMax         NullableInt32  `json:"netcat_active_side_port_max,omitempty"`
	NetcatPassiveSideConnectAddress NullableString `json:"netcat_passive_side_connect_address,omitempty"`
	// * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost   `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be   passwordless) to run `zfs` command on the remote machine.
	Sudo *bool `json:"sudo,omitempty"`
	// * `source_datasets` is a non-empty list of datasets to replicate snapshots from
	SourceDatasets []string `json:"source_datasets,omitempty"`
	// * `target_dataset` is a dataset to put snapshots into. It must exist on target side
	TargetDataset *string `json:"target_dataset,omitempty"`
	// * `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task
	Recursive *bool `json:"recursive,omitempty"`
	// * `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task
	Exclude []string `json:"exclude,omitempty"`
	// * `properties` control whether we should send dataset properties along with snapshots
	Properties            *bool                  `json:"properties,omitempty"`
	PropertiesExclude     []string               `json:"properties_exclude,omitempty"`
	PropertiesOverride    map[string]interface{} `json:"properties_override,omitempty"`
	Replicate             *bool                  `json:"replicate,omitempty"`
	Encryption            *bool                  `json:"encryption,omitempty"`
	EncryptionKey         NullableString         `json:"encryption_key,omitempty"`
	EncryptionKeyFormat   NullableString         `json:"encryption_key_format,omitempty"`
	EncryptionKeyLocation NullableString         `json:"encryption_key_location,omitempty"`
	// * `periodic_snapshot_tasks` is a list of periodic snapshot task IDs that are sources of snapshots for this   replication task. Only push replication tasks can be bound to periodic snapshot tasks.
	PeriodicSnapshotTasks []int32 `json:"periodic_snapshot_tasks,omitempty"`
	// * `naming_schema` is a list of naming schemas for pull replication
	NamingSchema []string `json:"naming_schema,omitempty"`
	// * `also_include_naming_schema` is a list of naming schemas for push replication
	AlsoIncludeNamingSchema []string `json:"also_include_naming_schema,omitempty"`
	// * `name_regex` will replicate all snapshots which names match specified regular expression
	NameRegex NullableString `json:"name_regex,omitempty"`
	// * `auto` allows replication to run automatically on schedule or after bound periodic snapshot task * `schedule` is a schedule to run replication task. Only `auto` replication tasks without bound periodic   snapshot tasks can have a schedule
	Auto             *bool             `json:"auto,omitempty"`
	Schedule         *Schedule4        `json:"schedule,omitempty"`
	RestrictSchedule *RestrictSchedule `json:"restrict_schedule,omitempty"`
	// * Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or   `restrict_schedule`
	OnlyMatchingSchedule *bool `json:"only_matching_schedule,omitempty"`
	// * `allow_from_scratch` will destroy all snapshots on target side and replicate everything from scratch if none   of the snapshots on target side matches source snapshots
	AllowFromScratch *bool `json:"allow_from_scratch,omitempty"`
	// * `readonly` controls destination datasets readonly property:   * `SET` will set all destination datasets to readonly=on after finishing the replication   * `REQUIRE` will require all existing destination datasets to have readonly=on property   * `IGNORE` will avoid this kind of behavior
	Readonly *string `json:"readonly,omitempty"`
	// * `hold_pending_snapshots` will prevent source snapshots from being deleted by retention of replication fails   for some reason
	HoldPendingSnapshots *bool `json:"hold_pending_snapshots,omitempty"`
	// * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
	RetentionPolicy *string `json:"retention_policy,omitempty"`
	// * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
	LifetimeValue NullableInt32 `json:"lifetime_value,omitempty"`
	// * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
	LifetimeUnit NullableString `json:"lifetime_unit,omitempty"`
	Lifetimes    []Lifetime     `json:"lifetimes,omitempty"`
	// * `compression` compresses SSH stream. Available only for SSH transport
	Compression NullableString `json:"compression,omitempty"`
	// * `speed_limit` limits speed of SSH stream. Available only for SSH transport
	SpeedLimit NullableInt32 `json:"speed_limit,omitempty"`
	// * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
	LargeBlock *bool `json:"large_block,omitempty"`
	// * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
	Embed *bool `json:"embed,omitempty"`
	// * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
	Compressed *bool `json:"compressed,omitempty"`
	// * `retries` specifies number of retries before considering replication failed
	Retries      *int32         `json:"retries,omitempty"`
	LoggingLevel NullableString `json:"logging_level,omitempty"`
	Enabled      *bool          `json:"enabled,omitempty"`
}

// NewReplicationCreate0 instantiates a new ReplicationCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationCreate0() *ReplicationCreate0 {
	this := ReplicationCreate0{}
	var sudo bool
	this.Sudo = &sudo
	var properties bool
	this.Properties = &properties
	var replicate bool
	this.Replicate = &replicate
	var encryption bool
	this.Encryption = &encryption
	var onlyMatchingSchedule bool
	this.OnlyMatchingSchedule = &onlyMatchingSchedule
	var allowFromScratch bool
	this.AllowFromScratch = &allowFromScratch
	var readonly string
	this.Readonly = &readonly
	var holdPendingSnapshots bool
	this.HoldPendingSnapshots = &holdPendingSnapshots
	var largeBlock bool
	this.LargeBlock = &largeBlock
	var embed bool
	this.Embed = &embed
	var compressed bool
	this.Compressed = &compressed
	var retries int32
	this.Retries = &retries
	var enabled bool
	this.Enabled = &enabled
	return &this
}

// NewReplicationCreate0WithDefaults instantiates a new ReplicationCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationCreate0WithDefaults() *ReplicationCreate0 {
	this := ReplicationCreate0{}
	var sudo bool
	this.Sudo = &sudo
	var properties bool
	this.Properties = &properties
	var replicate bool
	this.Replicate = &replicate
	var encryption bool
	this.Encryption = &encryption
	var onlyMatchingSchedule bool
	this.OnlyMatchingSchedule = &onlyMatchingSchedule
	var allowFromScratch bool
	this.AllowFromScratch = &allowFromScratch
	var readonly string
	this.Readonly = &readonly
	var holdPendingSnapshots bool
	this.HoldPendingSnapshots = &holdPendingSnapshots
	var largeBlock bool
	this.LargeBlock = &largeBlock
	var embed bool
	this.Embed = &embed
	var compressed bool
	this.Compressed = &compressed
	var retries int32
	this.Retries = &retries
	var enabled bool
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReplicationCreate0) SetName(v string) {
	o.Name = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *ReplicationCreate0) SetDirection(v string) {
	o.Direction = &v
}

// GetTransport returns the Transport field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetTransport() string {
	if o == nil || IsNil(o.Transport) {
		var ret string
		return ret
	}
	return *o.Transport
}

// GetTransportOk returns a tuple with the Transport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetTransportOk() (*string, bool) {
	if o == nil || IsNil(o.Transport) {
		return nil, false
	}
	return o.Transport, true
}

// HasTransport returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasTransport() bool {
	if o != nil && !IsNil(o.Transport) {
		return true
	}

	return false
}

// SetTransport gets a reference to the given string and assigns it to the Transport field.
func (o *ReplicationCreate0) SetTransport(v string) {
	o.Transport = &v
}

// GetSshCredentials returns the SshCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetSshCredentials() int32 {
	if o == nil || IsNil(o.SshCredentials.Get()) {
		var ret int32
		return ret
	}
	return *o.SshCredentials.Get()
}

// GetSshCredentialsOk returns a tuple with the SshCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetSshCredentialsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshCredentials.Get(), o.SshCredentials.IsSet()
}

// HasSshCredentials returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasSshCredentials() bool {
	if o != nil && o.SshCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshCredentials gets a reference to the given NullableInt32 and assigns it to the SshCredentials field.
func (o *ReplicationCreate0) SetSshCredentials(v int32) {
	o.SshCredentials.Set(&v)
}

// SetSshCredentialsNil sets the value for SshCredentials to be an explicit nil
func (o *ReplicationCreate0) SetSshCredentialsNil() {
	o.SshCredentials.Set(nil)
}

// UnsetSshCredentials ensures that no value is present for SshCredentials, not even an explicit nil
func (o *ReplicationCreate0) UnsetSshCredentials() {
	o.SshCredentials.Unset()
}

// GetNetcatActiveSide returns the NetcatActiveSide field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNetcatActiveSide() string {
	if o == nil || IsNil(o.NetcatActiveSide.Get()) {
		var ret string
		return ret
	}
	return *o.NetcatActiveSide.Get()
}

// GetNetcatActiveSideOk returns a tuple with the NetcatActiveSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNetcatActiveSideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetcatActiveSide.Get(), o.NetcatActiveSide.IsSet()
}

// HasNetcatActiveSide returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNetcatActiveSide() bool {
	if o != nil && o.NetcatActiveSide.IsSet() {
		return true
	}

	return false
}

// SetNetcatActiveSide gets a reference to the given NullableString and assigns it to the NetcatActiveSide field.
func (o *ReplicationCreate0) SetNetcatActiveSide(v string) {
	o.NetcatActiveSide.Set(&v)
}

// SetNetcatActiveSideNil sets the value for NetcatActiveSide to be an explicit nil
func (o *ReplicationCreate0) SetNetcatActiveSideNil() {
	o.NetcatActiveSide.Set(nil)
}

// UnsetNetcatActiveSide ensures that no value is present for NetcatActiveSide, not even an explicit nil
func (o *ReplicationCreate0) UnsetNetcatActiveSide() {
	o.NetcatActiveSide.Unset()
}

// GetNetcatActiveSideListenAddress returns the NetcatActiveSideListenAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNetcatActiveSideListenAddress() string {
	if o == nil || IsNil(o.NetcatActiveSideListenAddress.Get()) {
		var ret string
		return ret
	}
	return *o.NetcatActiveSideListenAddress.Get()
}

// GetNetcatActiveSideListenAddressOk returns a tuple with the NetcatActiveSideListenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNetcatActiveSideListenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetcatActiveSideListenAddress.Get(), o.NetcatActiveSideListenAddress.IsSet()
}

// HasNetcatActiveSideListenAddress returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNetcatActiveSideListenAddress() bool {
	if o != nil && o.NetcatActiveSideListenAddress.IsSet() {
		return true
	}

	return false
}

// SetNetcatActiveSideListenAddress gets a reference to the given NullableString and assigns it to the NetcatActiveSideListenAddress field.
func (o *ReplicationCreate0) SetNetcatActiveSideListenAddress(v string) {
	o.NetcatActiveSideListenAddress.Set(&v)
}

// SetNetcatActiveSideListenAddressNil sets the value for NetcatActiveSideListenAddress to be an explicit nil
func (o *ReplicationCreate0) SetNetcatActiveSideListenAddressNil() {
	o.NetcatActiveSideListenAddress.Set(nil)
}

// UnsetNetcatActiveSideListenAddress ensures that no value is present for NetcatActiveSideListenAddress, not even an explicit nil
func (o *ReplicationCreate0) UnsetNetcatActiveSideListenAddress() {
	o.NetcatActiveSideListenAddress.Unset()
}

// GetNetcatActiveSidePortMin returns the NetcatActiveSidePortMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNetcatActiveSidePortMin() int32 {
	if o == nil || IsNil(o.NetcatActiveSidePortMin.Get()) {
		var ret int32
		return ret
	}
	return *o.NetcatActiveSidePortMin.Get()
}

// GetNetcatActiveSidePortMinOk returns a tuple with the NetcatActiveSidePortMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNetcatActiveSidePortMinOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetcatActiveSidePortMin.Get(), o.NetcatActiveSidePortMin.IsSet()
}

// HasNetcatActiveSidePortMin returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNetcatActiveSidePortMin() bool {
	if o != nil && o.NetcatActiveSidePortMin.IsSet() {
		return true
	}

	return false
}

// SetNetcatActiveSidePortMin gets a reference to the given NullableInt32 and assigns it to the NetcatActiveSidePortMin field.
func (o *ReplicationCreate0) SetNetcatActiveSidePortMin(v int32) {
	o.NetcatActiveSidePortMin.Set(&v)
}

// SetNetcatActiveSidePortMinNil sets the value for NetcatActiveSidePortMin to be an explicit nil
func (o *ReplicationCreate0) SetNetcatActiveSidePortMinNil() {
	o.NetcatActiveSidePortMin.Set(nil)
}

// UnsetNetcatActiveSidePortMin ensures that no value is present for NetcatActiveSidePortMin, not even an explicit nil
func (o *ReplicationCreate0) UnsetNetcatActiveSidePortMin() {
	o.NetcatActiveSidePortMin.Unset()
}

// GetNetcatActiveSidePortMax returns the NetcatActiveSidePortMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNetcatActiveSidePortMax() int32 {
	if o == nil || IsNil(o.NetcatActiveSidePortMax.Get()) {
		var ret int32
		return ret
	}
	return *o.NetcatActiveSidePortMax.Get()
}

// GetNetcatActiveSidePortMaxOk returns a tuple with the NetcatActiveSidePortMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNetcatActiveSidePortMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetcatActiveSidePortMax.Get(), o.NetcatActiveSidePortMax.IsSet()
}

// HasNetcatActiveSidePortMax returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNetcatActiveSidePortMax() bool {
	if o != nil && o.NetcatActiveSidePortMax.IsSet() {
		return true
	}

	return false
}

// SetNetcatActiveSidePortMax gets a reference to the given NullableInt32 and assigns it to the NetcatActiveSidePortMax field.
func (o *ReplicationCreate0) SetNetcatActiveSidePortMax(v int32) {
	o.NetcatActiveSidePortMax.Set(&v)
}

// SetNetcatActiveSidePortMaxNil sets the value for NetcatActiveSidePortMax to be an explicit nil
func (o *ReplicationCreate0) SetNetcatActiveSidePortMaxNil() {
	o.NetcatActiveSidePortMax.Set(nil)
}

// UnsetNetcatActiveSidePortMax ensures that no value is present for NetcatActiveSidePortMax, not even an explicit nil
func (o *ReplicationCreate0) UnsetNetcatActiveSidePortMax() {
	o.NetcatActiveSidePortMax.Unset()
}

// GetNetcatPassiveSideConnectAddress returns the NetcatPassiveSideConnectAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNetcatPassiveSideConnectAddress() string {
	if o == nil || IsNil(o.NetcatPassiveSideConnectAddress.Get()) {
		var ret string
		return ret
	}
	return *o.NetcatPassiveSideConnectAddress.Get()
}

// GetNetcatPassiveSideConnectAddressOk returns a tuple with the NetcatPassiveSideConnectAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNetcatPassiveSideConnectAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetcatPassiveSideConnectAddress.Get(), o.NetcatPassiveSideConnectAddress.IsSet()
}

// HasNetcatPassiveSideConnectAddress returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNetcatPassiveSideConnectAddress() bool {
	if o != nil && o.NetcatPassiveSideConnectAddress.IsSet() {
		return true
	}

	return false
}

// SetNetcatPassiveSideConnectAddress gets a reference to the given NullableString and assigns it to the NetcatPassiveSideConnectAddress field.
func (o *ReplicationCreate0) SetNetcatPassiveSideConnectAddress(v string) {
	o.NetcatPassiveSideConnectAddress.Set(&v)
}

// SetNetcatPassiveSideConnectAddressNil sets the value for NetcatPassiveSideConnectAddress to be an explicit nil
func (o *ReplicationCreate0) SetNetcatPassiveSideConnectAddressNil() {
	o.NetcatPassiveSideConnectAddress.Set(nil)
}

// UnsetNetcatPassiveSideConnectAddress ensures that no value is present for NetcatPassiveSideConnectAddress, not even an explicit nil
func (o *ReplicationCreate0) UnsetNetcatPassiveSideConnectAddress() {
	o.NetcatPassiveSideConnectAddress.Unset()
}

// GetSudo returns the Sudo field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetSudo() bool {
	if o == nil || IsNil(o.Sudo) {
		var ret bool
		return ret
	}
	return *o.Sudo
}

// GetSudoOk returns a tuple with the Sudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetSudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Sudo) {
		return nil, false
	}
	return o.Sudo, true
}

// HasSudo returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasSudo() bool {
	if o != nil && !IsNil(o.Sudo) {
		return true
	}

	return false
}

// SetSudo gets a reference to the given bool and assigns it to the Sudo field.
func (o *ReplicationCreate0) SetSudo(v bool) {
	o.Sudo = &v
}

// GetSourceDatasets returns the SourceDatasets field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetSourceDatasets() []string {
	if o == nil || IsNil(o.SourceDatasets) {
		var ret []string
		return ret
	}
	return o.SourceDatasets
}

// GetSourceDatasetsOk returns a tuple with the SourceDatasets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetSourceDatasetsOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceDatasets) {
		return nil, false
	}
	return o.SourceDatasets, true
}

// HasSourceDatasets returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasSourceDatasets() bool {
	if o != nil && !IsNil(o.SourceDatasets) {
		return true
	}

	return false
}

// SetSourceDatasets gets a reference to the given []string and assigns it to the SourceDatasets field.
func (o *ReplicationCreate0) SetSourceDatasets(v []string) {
	o.SourceDatasets = v
}

// GetTargetDataset returns the TargetDataset field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetTargetDataset() string {
	if o == nil || IsNil(o.TargetDataset) {
		var ret string
		return ret
	}
	return *o.TargetDataset
}

// GetTargetDatasetOk returns a tuple with the TargetDataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetTargetDatasetOk() (*string, bool) {
	if o == nil || IsNil(o.TargetDataset) {
		return nil, false
	}
	return o.TargetDataset, true
}

// HasTargetDataset returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasTargetDataset() bool {
	if o != nil && !IsNil(o.TargetDataset) {
		return true
	}

	return false
}

// SetTargetDataset gets a reference to the given string and assigns it to the TargetDataset field.
func (o *ReplicationCreate0) SetTargetDataset(v string) {
	o.TargetDataset = &v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *ReplicationCreate0) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetExclude() []string {
	if o == nil || IsNil(o.Exclude) {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *ReplicationCreate0) SetExclude(v []string) {
	o.Exclude = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetProperties() bool {
	if o == nil || IsNil(o.Properties) {
		var ret bool
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetPropertiesOk() (*bool, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given bool and assigns it to the Properties field.
func (o *ReplicationCreate0) SetProperties(v bool) {
	o.Properties = &v
}

// GetPropertiesExclude returns the PropertiesExclude field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetPropertiesExclude() []string {
	if o == nil || IsNil(o.PropertiesExclude) {
		var ret []string
		return ret
	}
	return o.PropertiesExclude
}

// GetPropertiesExcludeOk returns a tuple with the PropertiesExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetPropertiesExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.PropertiesExclude) {
		return nil, false
	}
	return o.PropertiesExclude, true
}

// HasPropertiesExclude returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasPropertiesExclude() bool {
	if o != nil && !IsNil(o.PropertiesExclude) {
		return true
	}

	return false
}

// SetPropertiesExclude gets a reference to the given []string and assigns it to the PropertiesExclude field.
func (o *ReplicationCreate0) SetPropertiesExclude(v []string) {
	o.PropertiesExclude = v
}

// GetPropertiesOverride returns the PropertiesOverride field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetPropertiesOverride() map[string]interface{} {
	if o == nil || IsNil(o.PropertiesOverride) {
		var ret map[string]interface{}
		return ret
	}
	return o.PropertiesOverride
}

// GetPropertiesOverrideOk returns a tuple with the PropertiesOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetPropertiesOverrideOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PropertiesOverride) {
		return map[string]interface{}{}, false
	}
	return o.PropertiesOverride, true
}

// HasPropertiesOverride returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasPropertiesOverride() bool {
	if o != nil && !IsNil(o.PropertiesOverride) {
		return true
	}

	return false
}

// SetPropertiesOverride gets a reference to the given map[string]interface{} and assigns it to the PropertiesOverride field.
func (o *ReplicationCreate0) SetPropertiesOverride(v map[string]interface{}) {
	o.PropertiesOverride = v
}

// GetReplicate returns the Replicate field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetReplicate() bool {
	if o == nil || IsNil(o.Replicate) {
		var ret bool
		return ret
	}
	return *o.Replicate
}

// GetReplicateOk returns a tuple with the Replicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetReplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.Replicate) {
		return nil, false
	}
	return o.Replicate, true
}

// HasReplicate returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasReplicate() bool {
	if o != nil && !IsNil(o.Replicate) {
		return true
	}

	return false
}

// SetReplicate gets a reference to the given bool and assigns it to the Replicate field.
func (o *ReplicationCreate0) SetReplicate(v bool) {
	o.Replicate = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetEncryption() bool {
	if o == nil || IsNil(o.Encryption) {
		var ret bool
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given bool and assigns it to the Encryption field.
func (o *ReplicationCreate0) SetEncryption(v bool) {
	o.Encryption = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *ReplicationCreate0) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}

// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *ReplicationCreate0) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *ReplicationCreate0) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

// GetEncryptionKeyFormat returns the EncryptionKeyFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetEncryptionKeyFormat() string {
	if o == nil || IsNil(o.EncryptionKeyFormat.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKeyFormat.Get()
}

// GetEncryptionKeyFormatOk returns a tuple with the EncryptionKeyFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetEncryptionKeyFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKeyFormat.Get(), o.EncryptionKeyFormat.IsSet()
}

// HasEncryptionKeyFormat returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEncryptionKeyFormat() bool {
	if o != nil && o.EncryptionKeyFormat.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyFormat gets a reference to the given NullableString and assigns it to the EncryptionKeyFormat field.
func (o *ReplicationCreate0) SetEncryptionKeyFormat(v string) {
	o.EncryptionKeyFormat.Set(&v)
}

// SetEncryptionKeyFormatNil sets the value for EncryptionKeyFormat to be an explicit nil
func (o *ReplicationCreate0) SetEncryptionKeyFormatNil() {
	o.EncryptionKeyFormat.Set(nil)
}

// UnsetEncryptionKeyFormat ensures that no value is present for EncryptionKeyFormat, not even an explicit nil
func (o *ReplicationCreate0) UnsetEncryptionKeyFormat() {
	o.EncryptionKeyFormat.Unset()
}

// GetEncryptionKeyLocation returns the EncryptionKeyLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetEncryptionKeyLocation() string {
	if o == nil || IsNil(o.EncryptionKeyLocation.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKeyLocation.Get()
}

// GetEncryptionKeyLocationOk returns a tuple with the EncryptionKeyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetEncryptionKeyLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKeyLocation.Get(), o.EncryptionKeyLocation.IsSet()
}

// HasEncryptionKeyLocation returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEncryptionKeyLocation() bool {
	if o != nil && o.EncryptionKeyLocation.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyLocation gets a reference to the given NullableString and assigns it to the EncryptionKeyLocation field.
func (o *ReplicationCreate0) SetEncryptionKeyLocation(v string) {
	o.EncryptionKeyLocation.Set(&v)
}

// SetEncryptionKeyLocationNil sets the value for EncryptionKeyLocation to be an explicit nil
func (o *ReplicationCreate0) SetEncryptionKeyLocationNil() {
	o.EncryptionKeyLocation.Set(nil)
}

// UnsetEncryptionKeyLocation ensures that no value is present for EncryptionKeyLocation, not even an explicit nil
func (o *ReplicationCreate0) UnsetEncryptionKeyLocation() {
	o.EncryptionKeyLocation.Unset()
}

// GetPeriodicSnapshotTasks returns the PeriodicSnapshotTasks field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetPeriodicSnapshotTasks() []int32 {
	if o == nil || IsNil(o.PeriodicSnapshotTasks) {
		var ret []int32
		return ret
	}
	return o.PeriodicSnapshotTasks
}

// GetPeriodicSnapshotTasksOk returns a tuple with the PeriodicSnapshotTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetPeriodicSnapshotTasksOk() ([]int32, bool) {
	if o == nil || IsNil(o.PeriodicSnapshotTasks) {
		return nil, false
	}
	return o.PeriodicSnapshotTasks, true
}

// HasPeriodicSnapshotTasks returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasPeriodicSnapshotTasks() bool {
	if o != nil && !IsNil(o.PeriodicSnapshotTasks) {
		return true
	}

	return false
}

// SetPeriodicSnapshotTasks gets a reference to the given []int32 and assigns it to the PeriodicSnapshotTasks field.
func (o *ReplicationCreate0) SetPeriodicSnapshotTasks(v []int32) {
	o.PeriodicSnapshotTasks = v
}

// GetNamingSchema returns the NamingSchema field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetNamingSchema() []string {
	if o == nil || IsNil(o.NamingSchema) {
		var ret []string
		return ret
	}
	return o.NamingSchema
}

// GetNamingSchemaOk returns a tuple with the NamingSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetNamingSchemaOk() ([]string, bool) {
	if o == nil || IsNil(o.NamingSchema) {
		return nil, false
	}
	return o.NamingSchema, true
}

// HasNamingSchema returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNamingSchema() bool {
	if o != nil && !IsNil(o.NamingSchema) {
		return true
	}

	return false
}

// SetNamingSchema gets a reference to the given []string and assigns it to the NamingSchema field.
func (o *ReplicationCreate0) SetNamingSchema(v []string) {
	o.NamingSchema = v
}

// GetAlsoIncludeNamingSchema returns the AlsoIncludeNamingSchema field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetAlsoIncludeNamingSchema() []string {
	if o == nil || IsNil(o.AlsoIncludeNamingSchema) {
		var ret []string
		return ret
	}
	return o.AlsoIncludeNamingSchema
}

// GetAlsoIncludeNamingSchemaOk returns a tuple with the AlsoIncludeNamingSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetAlsoIncludeNamingSchemaOk() ([]string, bool) {
	if o == nil || IsNil(o.AlsoIncludeNamingSchema) {
		return nil, false
	}
	return o.AlsoIncludeNamingSchema, true
}

// HasAlsoIncludeNamingSchema returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasAlsoIncludeNamingSchema() bool {
	if o != nil && !IsNil(o.AlsoIncludeNamingSchema) {
		return true
	}

	return false
}

// SetAlsoIncludeNamingSchema gets a reference to the given []string and assigns it to the AlsoIncludeNamingSchema field.
func (o *ReplicationCreate0) SetAlsoIncludeNamingSchema(v []string) {
	o.AlsoIncludeNamingSchema = v
}

// GetNameRegex returns the NameRegex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetNameRegex() string {
	if o == nil || IsNil(o.NameRegex.Get()) {
		var ret string
		return ret
	}
	return *o.NameRegex.Get()
}

// GetNameRegexOk returns a tuple with the NameRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetNameRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameRegex.Get(), o.NameRegex.IsSet()
}

// HasNameRegex returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasNameRegex() bool {
	if o != nil && o.NameRegex.IsSet() {
		return true
	}

	return false
}

// SetNameRegex gets a reference to the given NullableString and assigns it to the NameRegex field.
func (o *ReplicationCreate0) SetNameRegex(v string) {
	o.NameRegex.Set(&v)
}

// SetNameRegexNil sets the value for NameRegex to be an explicit nil
func (o *ReplicationCreate0) SetNameRegexNil() {
	o.NameRegex.Set(nil)
}

// UnsetNameRegex ensures that no value is present for NameRegex, not even an explicit nil
func (o *ReplicationCreate0) UnsetNameRegex() {
	o.NameRegex.Unset()
}

// GetAuto returns the Auto field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetAuto() bool {
	if o == nil || IsNil(o.Auto) {
		var ret bool
		return ret
	}
	return *o.Auto
}

// GetAutoOk returns a tuple with the Auto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetAutoOk() (*bool, bool) {
	if o == nil || IsNil(o.Auto) {
		return nil, false
	}
	return o.Auto, true
}

// HasAuto returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasAuto() bool {
	if o != nil && !IsNil(o.Auto) {
		return true
	}

	return false
}

// SetAuto gets a reference to the given bool and assigns it to the Auto field.
func (o *ReplicationCreate0) SetAuto(v bool) {
	o.Auto = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetSchedule() Schedule4 {
	if o == nil || IsNil(o.Schedule) {
		var ret Schedule4
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetScheduleOk() (*Schedule4, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule4 and assigns it to the Schedule field.
func (o *ReplicationCreate0) SetSchedule(v Schedule4) {
	o.Schedule = &v
}

// GetRestrictSchedule returns the RestrictSchedule field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetRestrictSchedule() RestrictSchedule {
	if o == nil || IsNil(o.RestrictSchedule) {
		var ret RestrictSchedule
		return ret
	}
	return *o.RestrictSchedule
}

// GetRestrictScheduleOk returns a tuple with the RestrictSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetRestrictScheduleOk() (*RestrictSchedule, bool) {
	if o == nil || IsNil(o.RestrictSchedule) {
		return nil, false
	}
	return o.RestrictSchedule, true
}

// HasRestrictSchedule returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasRestrictSchedule() bool {
	if o != nil && !IsNil(o.RestrictSchedule) {
		return true
	}

	return false
}

// SetRestrictSchedule gets a reference to the given RestrictSchedule and assigns it to the RestrictSchedule field.
func (o *ReplicationCreate0) SetRestrictSchedule(v RestrictSchedule) {
	o.RestrictSchedule = &v
}

// GetOnlyMatchingSchedule returns the OnlyMatchingSchedule field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetOnlyMatchingSchedule() bool {
	if o == nil || IsNil(o.OnlyMatchingSchedule) {
		var ret bool
		return ret
	}
	return *o.OnlyMatchingSchedule
}

// GetOnlyMatchingScheduleOk returns a tuple with the OnlyMatchingSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetOnlyMatchingScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyMatchingSchedule) {
		return nil, false
	}
	return o.OnlyMatchingSchedule, true
}

// HasOnlyMatchingSchedule returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasOnlyMatchingSchedule() bool {
	if o != nil && !IsNil(o.OnlyMatchingSchedule) {
		return true
	}

	return false
}

// SetOnlyMatchingSchedule gets a reference to the given bool and assigns it to the OnlyMatchingSchedule field.
func (o *ReplicationCreate0) SetOnlyMatchingSchedule(v bool) {
	o.OnlyMatchingSchedule = &v
}

// GetAllowFromScratch returns the AllowFromScratch field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetAllowFromScratch() bool {
	if o == nil || IsNil(o.AllowFromScratch) {
		var ret bool
		return ret
	}
	return *o.AllowFromScratch
}

// GetAllowFromScratchOk returns a tuple with the AllowFromScratch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetAllowFromScratchOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowFromScratch) {
		return nil, false
	}
	return o.AllowFromScratch, true
}

// HasAllowFromScratch returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasAllowFromScratch() bool {
	if o != nil && !IsNil(o.AllowFromScratch) {
		return true
	}

	return false
}

// SetAllowFromScratch gets a reference to the given bool and assigns it to the AllowFromScratch field.
func (o *ReplicationCreate0) SetAllowFromScratch(v bool) {
	o.AllowFromScratch = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetReadonly() string {
	if o == nil || IsNil(o.Readonly) {
		var ret string
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetReadonlyOk() (*string, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given string and assigns it to the Readonly field.
func (o *ReplicationCreate0) SetReadonly(v string) {
	o.Readonly = &v
}

// GetHoldPendingSnapshots returns the HoldPendingSnapshots field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetHoldPendingSnapshots() bool {
	if o == nil || IsNil(o.HoldPendingSnapshots) {
		var ret bool
		return ret
	}
	return *o.HoldPendingSnapshots
}

// GetHoldPendingSnapshotsOk returns a tuple with the HoldPendingSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetHoldPendingSnapshotsOk() (*bool, bool) {
	if o == nil || IsNil(o.HoldPendingSnapshots) {
		return nil, false
	}
	return o.HoldPendingSnapshots, true
}

// HasHoldPendingSnapshots returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasHoldPendingSnapshots() bool {
	if o != nil && !IsNil(o.HoldPendingSnapshots) {
		return true
	}

	return false
}

// SetHoldPendingSnapshots gets a reference to the given bool and assigns it to the HoldPendingSnapshots field.
func (o *ReplicationCreate0) SetHoldPendingSnapshots(v bool) {
	o.HoldPendingSnapshots = &v
}

// GetRetentionPolicy returns the RetentionPolicy field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetRetentionPolicy() string {
	if o == nil || IsNil(o.RetentionPolicy) {
		var ret string
		return ret
	}
	return *o.RetentionPolicy
}

// GetRetentionPolicyOk returns a tuple with the RetentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetRetentionPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionPolicy) {
		return nil, false
	}
	return o.RetentionPolicy, true
}

// HasRetentionPolicy returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasRetentionPolicy() bool {
	if o != nil && !IsNil(o.RetentionPolicy) {
		return true
	}

	return false
}

// SetRetentionPolicy gets a reference to the given string and assigns it to the RetentionPolicy field.
func (o *ReplicationCreate0) SetRetentionPolicy(v string) {
	o.RetentionPolicy = &v
}

// GetLifetimeValue returns the LifetimeValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetLifetimeValue() int32 {
	if o == nil || IsNil(o.LifetimeValue.Get()) {
		var ret int32
		return ret
	}
	return *o.LifetimeValue.Get()
}

// GetLifetimeValueOk returns a tuple with the LifetimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetLifetimeValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifetimeValue.Get(), o.LifetimeValue.IsSet()
}

// HasLifetimeValue returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasLifetimeValue() bool {
	if o != nil && o.LifetimeValue.IsSet() {
		return true
	}

	return false
}

// SetLifetimeValue gets a reference to the given NullableInt32 and assigns it to the LifetimeValue field.
func (o *ReplicationCreate0) SetLifetimeValue(v int32) {
	o.LifetimeValue.Set(&v)
}

// SetLifetimeValueNil sets the value for LifetimeValue to be an explicit nil
func (o *ReplicationCreate0) SetLifetimeValueNil() {
	o.LifetimeValue.Set(nil)
}

// UnsetLifetimeValue ensures that no value is present for LifetimeValue, not even an explicit nil
func (o *ReplicationCreate0) UnsetLifetimeValue() {
	o.LifetimeValue.Unset()
}

// GetLifetimeUnit returns the LifetimeUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetLifetimeUnit() string {
	if o == nil || IsNil(o.LifetimeUnit.Get()) {
		var ret string
		return ret
	}
	return *o.LifetimeUnit.Get()
}

// GetLifetimeUnitOk returns a tuple with the LifetimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetLifetimeUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LifetimeUnit.Get(), o.LifetimeUnit.IsSet()
}

// HasLifetimeUnit returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasLifetimeUnit() bool {
	if o != nil && o.LifetimeUnit.IsSet() {
		return true
	}

	return false
}

// SetLifetimeUnit gets a reference to the given NullableString and assigns it to the LifetimeUnit field.
func (o *ReplicationCreate0) SetLifetimeUnit(v string) {
	o.LifetimeUnit.Set(&v)
}

// SetLifetimeUnitNil sets the value for LifetimeUnit to be an explicit nil
func (o *ReplicationCreate0) SetLifetimeUnitNil() {
	o.LifetimeUnit.Set(nil)
}

// UnsetLifetimeUnit ensures that no value is present for LifetimeUnit, not even an explicit nil
func (o *ReplicationCreate0) UnsetLifetimeUnit() {
	o.LifetimeUnit.Unset()
}

// GetLifetimes returns the Lifetimes field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetLifetimes() []Lifetime {
	if o == nil || IsNil(o.Lifetimes) {
		var ret []Lifetime
		return ret
	}
	return o.Lifetimes
}

// GetLifetimesOk returns a tuple with the Lifetimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetLifetimesOk() ([]Lifetime, bool) {
	if o == nil || IsNil(o.Lifetimes) {
		return nil, false
	}
	return o.Lifetimes, true
}

// HasLifetimes returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasLifetimes() bool {
	if o != nil && !IsNil(o.Lifetimes) {
		return true
	}

	return false
}

// SetLifetimes gets a reference to the given []Lifetime and assigns it to the Lifetimes field.
func (o *ReplicationCreate0) SetLifetimes(v []Lifetime) {
	o.Lifetimes = v
}

// GetCompression returns the Compression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetCompression() string {
	if o == nil || IsNil(o.Compression.Get()) {
		var ret string
		return ret
	}
	return *o.Compression.Get()
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetCompressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Compression.Get(), o.Compression.IsSet()
}

// HasCompression returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasCompression() bool {
	if o != nil && o.Compression.IsSet() {
		return true
	}

	return false
}

// SetCompression gets a reference to the given NullableString and assigns it to the Compression field.
func (o *ReplicationCreate0) SetCompression(v string) {
	o.Compression.Set(&v)
}

// SetCompressionNil sets the value for Compression to be an explicit nil
func (o *ReplicationCreate0) SetCompressionNil() {
	o.Compression.Set(nil)
}

// UnsetCompression ensures that no value is present for Compression, not even an explicit nil
func (o *ReplicationCreate0) UnsetCompression() {
	o.Compression.Unset()
}

// GetSpeedLimit returns the SpeedLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetSpeedLimit() int32 {
	if o == nil || IsNil(o.SpeedLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.SpeedLimit.Get()
}

// GetSpeedLimitOk returns a tuple with the SpeedLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetSpeedLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpeedLimit.Get(), o.SpeedLimit.IsSet()
}

// HasSpeedLimit returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasSpeedLimit() bool {
	if o != nil && o.SpeedLimit.IsSet() {
		return true
	}

	return false
}

// SetSpeedLimit gets a reference to the given NullableInt32 and assigns it to the SpeedLimit field.
func (o *ReplicationCreate0) SetSpeedLimit(v int32) {
	o.SpeedLimit.Set(&v)
}

// SetSpeedLimitNil sets the value for SpeedLimit to be an explicit nil
func (o *ReplicationCreate0) SetSpeedLimitNil() {
	o.SpeedLimit.Set(nil)
}

// UnsetSpeedLimit ensures that no value is present for SpeedLimit, not even an explicit nil
func (o *ReplicationCreate0) UnsetSpeedLimit() {
	o.SpeedLimit.Unset()
}

// GetLargeBlock returns the LargeBlock field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetLargeBlock() bool {
	if o == nil || IsNil(o.LargeBlock) {
		var ret bool
		return ret
	}
	return *o.LargeBlock
}

// GetLargeBlockOk returns a tuple with the LargeBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetLargeBlockOk() (*bool, bool) {
	if o == nil || IsNil(o.LargeBlock) {
		return nil, false
	}
	return o.LargeBlock, true
}

// HasLargeBlock returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasLargeBlock() bool {
	if o != nil && !IsNil(o.LargeBlock) {
		return true
	}

	return false
}

// SetLargeBlock gets a reference to the given bool and assigns it to the LargeBlock field.
func (o *ReplicationCreate0) SetLargeBlock(v bool) {
	o.LargeBlock = &v
}

// GetEmbed returns the Embed field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetEmbed() bool {
	if o == nil || IsNil(o.Embed) {
		var ret bool
		return ret
	}
	return *o.Embed
}

// GetEmbedOk returns a tuple with the Embed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetEmbedOk() (*bool, bool) {
	if o == nil || IsNil(o.Embed) {
		return nil, false
	}
	return o.Embed, true
}

// HasEmbed returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEmbed() bool {
	if o != nil && !IsNil(o.Embed) {
		return true
	}

	return false
}

// SetEmbed gets a reference to the given bool and assigns it to the Embed field.
func (o *ReplicationCreate0) SetEmbed(v bool) {
	o.Embed = &v
}

// GetCompressed returns the Compressed field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetCompressed() bool {
	if o == nil || IsNil(o.Compressed) {
		var ret bool
		return ret
	}
	return *o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetCompressedOk() (*bool, bool) {
	if o == nil || IsNil(o.Compressed) {
		return nil, false
	}
	return o.Compressed, true
}

// HasCompressed returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasCompressed() bool {
	if o != nil && !IsNil(o.Compressed) {
		return true
	}

	return false
}

// SetCompressed gets a reference to the given bool and assigns it to the Compressed field.
func (o *ReplicationCreate0) SetCompressed(v bool) {
	o.Compressed = &v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetRetries() int32 {
	if o == nil || IsNil(o.Retries) {
		var ret int32
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.Retries) {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasRetries() bool {
	if o != nil && !IsNil(o.Retries) {
		return true
	}

	return false
}

// SetRetries gets a reference to the given int32 and assigns it to the Retries field.
func (o *ReplicationCreate0) SetRetries(v int32) {
	o.Retries = &v
}

// GetLoggingLevel returns the LoggingLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreate0) GetLoggingLevel() string {
	if o == nil || IsNil(o.LoggingLevel.Get()) {
		var ret string
		return ret
	}
	return *o.LoggingLevel.Get()
}

// GetLoggingLevelOk returns a tuple with the LoggingLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreate0) GetLoggingLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoggingLevel.Get(), o.LoggingLevel.IsSet()
}

// HasLoggingLevel returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasLoggingLevel() bool {
	if o != nil && o.LoggingLevel.IsSet() {
		return true
	}

	return false
}

// SetLoggingLevel gets a reference to the given NullableString and assigns it to the LoggingLevel field.
func (o *ReplicationCreate0) SetLoggingLevel(v string) {
	o.LoggingLevel.Set(&v)
}

// SetLoggingLevelNil sets the value for LoggingLevel to be an explicit nil
func (o *ReplicationCreate0) SetLoggingLevelNil() {
	o.LoggingLevel.Set(nil)
}

// UnsetLoggingLevel ensures that no value is present for LoggingLevel, not even an explicit nil
func (o *ReplicationCreate0) UnsetLoggingLevel() {
	o.LoggingLevel.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ReplicationCreate0) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationCreate0) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ReplicationCreate0) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ReplicationCreate0) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ReplicationCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Transport) {
		toSerialize["transport"] = o.Transport
	}
	if o.SshCredentials.IsSet() {
		toSerialize["ssh_credentials"] = o.SshCredentials.Get()
	}
	if o.NetcatActiveSide.IsSet() {
		toSerialize["netcat_active_side"] = o.NetcatActiveSide.Get()
	}
	if o.NetcatActiveSideListenAddress.IsSet() {
		toSerialize["netcat_active_side_listen_address"] = o.NetcatActiveSideListenAddress.Get()
	}
	if o.NetcatActiveSidePortMin.IsSet() {
		toSerialize["netcat_active_side_port_min"] = o.NetcatActiveSidePortMin.Get()
	}
	if o.NetcatActiveSidePortMax.IsSet() {
		toSerialize["netcat_active_side_port_max"] = o.NetcatActiveSidePortMax.Get()
	}
	if o.NetcatPassiveSideConnectAddress.IsSet() {
		toSerialize["netcat_passive_side_connect_address"] = o.NetcatPassiveSideConnectAddress.Get()
	}
	if !IsNil(o.Sudo) {
		toSerialize["sudo"] = o.Sudo
	}
	if !IsNil(o.SourceDatasets) {
		toSerialize["source_datasets"] = o.SourceDatasets
	}
	if !IsNil(o.TargetDataset) {
		toSerialize["target_dataset"] = o.TargetDataset
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.PropertiesExclude) {
		toSerialize["properties_exclude"] = o.PropertiesExclude
	}
	if !IsNil(o.PropertiesOverride) {
		toSerialize["properties_override"] = o.PropertiesOverride
	}
	if !IsNil(o.Replicate) {
		toSerialize["replicate"] = o.Replicate
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryption_key"] = o.EncryptionKey.Get()
	}
	if o.EncryptionKeyFormat.IsSet() {
		toSerialize["encryption_key_format"] = o.EncryptionKeyFormat.Get()
	}
	if o.EncryptionKeyLocation.IsSet() {
		toSerialize["encryption_key_location"] = o.EncryptionKeyLocation.Get()
	}
	if !IsNil(o.PeriodicSnapshotTasks) {
		toSerialize["periodic_snapshot_tasks"] = o.PeriodicSnapshotTasks
	}
	if !IsNil(o.NamingSchema) {
		toSerialize["naming_schema"] = o.NamingSchema
	}
	if !IsNil(o.AlsoIncludeNamingSchema) {
		toSerialize["also_include_naming_schema"] = o.AlsoIncludeNamingSchema
	}
	if o.NameRegex.IsSet() {
		toSerialize["name_regex"] = o.NameRegex.Get()
	}
	if !IsNil(o.Auto) {
		toSerialize["auto"] = o.Auto
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.RestrictSchedule) {
		toSerialize["restrict_schedule"] = o.RestrictSchedule
	}
	if !IsNil(o.OnlyMatchingSchedule) {
		toSerialize["only_matching_schedule"] = o.OnlyMatchingSchedule
	}
	if !IsNil(o.AllowFromScratch) {
		toSerialize["allow_from_scratch"] = o.AllowFromScratch
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.HoldPendingSnapshots) {
		toSerialize["hold_pending_snapshots"] = o.HoldPendingSnapshots
	}
	if !IsNil(o.RetentionPolicy) {
		toSerialize["retention_policy"] = o.RetentionPolicy
	}
	if o.LifetimeValue.IsSet() {
		toSerialize["lifetime_value"] = o.LifetimeValue.Get()
	}
	if o.LifetimeUnit.IsSet() {
		toSerialize["lifetime_unit"] = o.LifetimeUnit.Get()
	}
	if !IsNil(o.Lifetimes) {
		toSerialize["lifetimes"] = o.Lifetimes
	}
	if o.Compression.IsSet() {
		toSerialize["compression"] = o.Compression.Get()
	}
	if o.SpeedLimit.IsSet() {
		toSerialize["speed_limit"] = o.SpeedLimit.Get()
	}
	if !IsNil(o.LargeBlock) {
		toSerialize["large_block"] = o.LargeBlock
	}
	if !IsNil(o.Embed) {
		toSerialize["embed"] = o.Embed
	}
	if !IsNil(o.Compressed) {
		toSerialize["compressed"] = o.Compressed
	}
	if !IsNil(o.Retries) {
		toSerialize["retries"] = o.Retries
	}
	if o.LoggingLevel.IsSet() {
		toSerialize["logging_level"] = o.LoggingLevel.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableReplicationCreate0 struct {
	value *ReplicationCreate0
	isSet bool
}

func (v NullableReplicationCreate0) Get() *ReplicationCreate0 {
	return v.value
}

func (v *NullableReplicationCreate0) Set(val *ReplicationCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationCreate0(val *ReplicationCreate0) *NullableReplicationCreate0 {
	return &NullableReplicationCreate0{value: val, isSet: true}
}

func (v NullableReplicationCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
