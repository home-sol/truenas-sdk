/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FailoverCallRemote2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverCallRemote2{}

// FailoverCallRemote2 struct for FailoverCallRemote2
type FailoverCallRemote2 struct {
	Timeout        *int32       `json:"timeout,omitempty"`
	Job            *bool        `json:"job,omitempty"`
	JobReturn      NullableBool `json:"job_return,omitempty"`
	Callback       interface{}  `json:"callback,omitempty"`
	ConnectTimeout *float32     `json:"connect_timeout,omitempty"`
}

// NewFailoverCallRemote2 instantiates a new FailoverCallRemote2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverCallRemote2() *FailoverCallRemote2 {
	this := FailoverCallRemote2{}
	var timeout int32
	this.Timeout = &timeout
	var job bool
	this.Job = &job
	return &this
}

// NewFailoverCallRemote2WithDefaults instantiates a new FailoverCallRemote2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverCallRemote2WithDefaults() *FailoverCallRemote2 {
	this := FailoverCallRemote2{}
	var timeout int32
	this.Timeout = &timeout
	var job bool
	this.Job = &job
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *FailoverCallRemote2) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverCallRemote2) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *FailoverCallRemote2) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *FailoverCallRemote2) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetJob returns the Job field value if set, zero value otherwise.
func (o *FailoverCallRemote2) GetJob() bool {
	if o == nil || IsNil(o.Job) {
		var ret bool
		return ret
	}
	return *o.Job
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverCallRemote2) GetJobOk() (*bool, bool) {
	if o == nil || IsNil(o.Job) {
		return nil, false
	}
	return o.Job, true
}

// HasJob returns a boolean if a field has been set.
func (o *FailoverCallRemote2) HasJob() bool {
	if o != nil && !IsNil(o.Job) {
		return true
	}

	return false
}

// SetJob gets a reference to the given bool and assigns it to the Job field.
func (o *FailoverCallRemote2) SetJob(v bool) {
	o.Job = &v
}

// GetJobReturn returns the JobReturn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverCallRemote2) GetJobReturn() bool {
	if o == nil || IsNil(o.JobReturn.Get()) {
		var ret bool
		return ret
	}
	return *o.JobReturn.Get()
}

// GetJobReturnOk returns a tuple with the JobReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverCallRemote2) GetJobReturnOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobReturn.Get(), o.JobReturn.IsSet()
}

// HasJobReturn returns a boolean if a field has been set.
func (o *FailoverCallRemote2) HasJobReturn() bool {
	if o != nil && o.JobReturn.IsSet() {
		return true
	}

	return false
}

// SetJobReturn gets a reference to the given NullableBool and assigns it to the JobReturn field.
func (o *FailoverCallRemote2) SetJobReturn(v bool) {
	o.JobReturn.Set(&v)
}

// SetJobReturnNil sets the value for JobReturn to be an explicit nil
func (o *FailoverCallRemote2) SetJobReturnNil() {
	o.JobReturn.Set(nil)
}

// UnsetJobReturn ensures that no value is present for JobReturn, not even an explicit nil
func (o *FailoverCallRemote2) UnsetJobReturn() {
	o.JobReturn.Unset()
}

// GetCallback returns the Callback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverCallRemote2) GetCallback() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Callback
}

// GetCallbackOk returns a tuple with the Callback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverCallRemote2) GetCallbackOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Callback) {
		return nil, false
	}
	return &o.Callback, true
}

// HasCallback returns a boolean if a field has been set.
func (o *FailoverCallRemote2) HasCallback() bool {
	if o != nil && IsNil(o.Callback) {
		return true
	}

	return false
}

// SetCallback gets a reference to the given interface{} and assigns it to the Callback field.
func (o *FailoverCallRemote2) SetCallback(v interface{}) {
	o.Callback = v
}

// GetConnectTimeout returns the ConnectTimeout field value if set, zero value otherwise.
func (o *FailoverCallRemote2) GetConnectTimeout() float32 {
	if o == nil || IsNil(o.ConnectTimeout) {
		var ret float32
		return ret
	}
	return *o.ConnectTimeout
}

// GetConnectTimeoutOk returns a tuple with the ConnectTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverCallRemote2) GetConnectTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.ConnectTimeout) {
		return nil, false
	}
	return o.ConnectTimeout, true
}

// HasConnectTimeout returns a boolean if a field has been set.
func (o *FailoverCallRemote2) HasConnectTimeout() bool {
	if o != nil && !IsNil(o.ConnectTimeout) {
		return true
	}

	return false
}

// SetConnectTimeout gets a reference to the given float32 and assigns it to the ConnectTimeout field.
func (o *FailoverCallRemote2) SetConnectTimeout(v float32) {
	o.ConnectTimeout = &v
}

func (o FailoverCallRemote2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverCallRemote2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Job) {
		toSerialize["job"] = o.Job
	}
	if o.JobReturn.IsSet() {
		toSerialize["job_return"] = o.JobReturn.Get()
	}
	if o.Callback != nil {
		toSerialize["callback"] = o.Callback
	}
	if !IsNil(o.ConnectTimeout) {
		toSerialize["connect_timeout"] = o.ConnectTimeout
	}
	return toSerialize, nil
}

type NullableFailoverCallRemote2 struct {
	value *FailoverCallRemote2
	isSet bool
}

func (v NullableFailoverCallRemote2) Get() *FailoverCallRemote2 {
	return v.value
}

func (v *NullableFailoverCallRemote2) Set(val *FailoverCallRemote2) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverCallRemote2) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverCallRemote2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverCallRemote2(val *FailoverCallRemote2) *NullableFailoverCallRemote2 {
	return &NullableFailoverCallRemote2{value: val, isSet: true}
}

func (v NullableFailoverCallRemote2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverCallRemote2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
