/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemCanAccessAsUser2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemCanAccessAsUser2{}

// FilesystemCanAccessAsUser2 struct for FilesystemCanAccessAsUser2
type FilesystemCanAccessAsUser2 struct {
	Read    NullableBool `json:"read,omitempty"`
	Write   NullableBool `json:"write,omitempty"`
	Execute NullableBool `json:"execute,omitempty"`
}

// NewFilesystemCanAccessAsUser2 instantiates a new FilesystemCanAccessAsUser2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemCanAccessAsUser2() *FilesystemCanAccessAsUser2 {
	this := FilesystemCanAccessAsUser2{}
	return &this
}

// NewFilesystemCanAccessAsUser2WithDefaults instantiates a new FilesystemCanAccessAsUser2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemCanAccessAsUser2WithDefaults() *FilesystemCanAccessAsUser2 {
	this := FilesystemCanAccessAsUser2{}
	return &this
}

// GetRead returns the Read field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemCanAccessAsUser2) GetRead() bool {
	if o == nil || IsNil(o.Read.Get()) {
		var ret bool
		return ret
	}
	return *o.Read.Get()
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemCanAccessAsUser2) GetReadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Read.Get(), o.Read.IsSet()
}

// HasRead returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser2) HasRead() bool {
	if o != nil && o.Read.IsSet() {
		return true
	}

	return false
}

// SetRead gets a reference to the given NullableBool and assigns it to the Read field.
func (o *FilesystemCanAccessAsUser2) SetRead(v bool) {
	o.Read.Set(&v)
}

// SetReadNil sets the value for Read to be an explicit nil
func (o *FilesystemCanAccessAsUser2) SetReadNil() {
	o.Read.Set(nil)
}

// UnsetRead ensures that no value is present for Read, not even an explicit nil
func (o *FilesystemCanAccessAsUser2) UnsetRead() {
	o.Read.Unset()
}

// GetWrite returns the Write field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemCanAccessAsUser2) GetWrite() bool {
	if o == nil || IsNil(o.Write.Get()) {
		var ret bool
		return ret
	}
	return *o.Write.Get()
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemCanAccessAsUser2) GetWriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Write.Get(), o.Write.IsSet()
}

// HasWrite returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser2) HasWrite() bool {
	if o != nil && o.Write.IsSet() {
		return true
	}

	return false
}

// SetWrite gets a reference to the given NullableBool and assigns it to the Write field.
func (o *FilesystemCanAccessAsUser2) SetWrite(v bool) {
	o.Write.Set(&v)
}

// SetWriteNil sets the value for Write to be an explicit nil
func (o *FilesystemCanAccessAsUser2) SetWriteNil() {
	o.Write.Set(nil)
}

// UnsetWrite ensures that no value is present for Write, not even an explicit nil
func (o *FilesystemCanAccessAsUser2) UnsetWrite() {
	o.Write.Unset()
}

// GetExecute returns the Execute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemCanAccessAsUser2) GetExecute() bool {
	if o == nil || IsNil(o.Execute.Get()) {
		var ret bool
		return ret
	}
	return *o.Execute.Get()
}

// GetExecuteOk returns a tuple with the Execute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemCanAccessAsUser2) GetExecuteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Execute.Get(), o.Execute.IsSet()
}

// HasExecute returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser2) HasExecute() bool {
	if o != nil && o.Execute.IsSet() {
		return true
	}

	return false
}

// SetExecute gets a reference to the given NullableBool and assigns it to the Execute field.
func (o *FilesystemCanAccessAsUser2) SetExecute(v bool) {
	o.Execute.Set(&v)
}

// SetExecuteNil sets the value for Execute to be an explicit nil
func (o *FilesystemCanAccessAsUser2) SetExecuteNil() {
	o.Execute.Set(nil)
}

// UnsetExecute ensures that no value is present for Execute, not even an explicit nil
func (o *FilesystemCanAccessAsUser2) UnsetExecute() {
	o.Execute.Unset()
}

func (o FilesystemCanAccessAsUser2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemCanAccessAsUser2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Read.IsSet() {
		toSerialize["read"] = o.Read.Get()
	}
	if o.Write.IsSet() {
		toSerialize["write"] = o.Write.Get()
	}
	if o.Execute.IsSet() {
		toSerialize["execute"] = o.Execute.Get()
	}
	return toSerialize, nil
}

type NullableFilesystemCanAccessAsUser2 struct {
	value *FilesystemCanAccessAsUser2
	isSet bool
}

func (v NullableFilesystemCanAccessAsUser2) Get() *FilesystemCanAccessAsUser2 {
	return v.value
}

func (v *NullableFilesystemCanAccessAsUser2) Set(val *FilesystemCanAccessAsUser2) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemCanAccessAsUser2) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemCanAccessAsUser2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemCanAccessAsUser2(val *FilesystemCanAccessAsUser2) *NullableFilesystemCanAccessAsUser2 {
	return &NullableFilesystemCanAccessAsUser2{value: val, isSet: true}
}

func (v NullableFilesystemCanAccessAsUser2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemCanAccessAsUser2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
