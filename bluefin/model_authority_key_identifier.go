/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the AuthorityKeyIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorityKeyIdentifier{}

// AuthorityKeyIdentifier struct for AuthorityKeyIdentifier
type AuthorityKeyIdentifier struct {
	AuthorityCertIssuer *bool `json:"authority_cert_issuer,omitempty"`
	Enabled             *bool `json:"enabled,omitempty"`
	ExtensionCritical   *bool `json:"extension_critical,omitempty"`
}

// NewAuthorityKeyIdentifier instantiates a new AuthorityKeyIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorityKeyIdentifier() *AuthorityKeyIdentifier {
	this := AuthorityKeyIdentifier{}
	var authorityCertIssuer bool
	this.AuthorityCertIssuer = &authorityCertIssuer
	var enabled bool
	this.Enabled = &enabled
	var extensionCritical bool
	this.ExtensionCritical = &extensionCritical
	return &this
}

// NewAuthorityKeyIdentifierWithDefaults instantiates a new AuthorityKeyIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorityKeyIdentifierWithDefaults() *AuthorityKeyIdentifier {
	this := AuthorityKeyIdentifier{}
	var authorityCertIssuer bool
	this.AuthorityCertIssuer = &authorityCertIssuer
	var enabled bool
	this.Enabled = &enabled
	var extensionCritical bool
	this.ExtensionCritical = &extensionCritical
	return &this
}

// GetAuthorityCertIssuer returns the AuthorityCertIssuer field value if set, zero value otherwise.
func (o *AuthorityKeyIdentifier) GetAuthorityCertIssuer() bool {
	if o == nil || IsNil(o.AuthorityCertIssuer) {
		var ret bool
		return ret
	}
	return *o.AuthorityCertIssuer
}

// GetAuthorityCertIssuerOk returns a tuple with the AuthorityCertIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorityKeyIdentifier) GetAuthorityCertIssuerOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthorityCertIssuer) {
		return nil, false
	}
	return o.AuthorityCertIssuer, true
}

// HasAuthorityCertIssuer returns a boolean if a field has been set.
func (o *AuthorityKeyIdentifier) HasAuthorityCertIssuer() bool {
	if o != nil && !IsNil(o.AuthorityCertIssuer) {
		return true
	}

	return false
}

// SetAuthorityCertIssuer gets a reference to the given bool and assigns it to the AuthorityCertIssuer field.
func (o *AuthorityKeyIdentifier) SetAuthorityCertIssuer(v bool) {
	o.AuthorityCertIssuer = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AuthorityKeyIdentifier) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorityKeyIdentifier) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuthorityKeyIdentifier) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AuthorityKeyIdentifier) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExtensionCritical returns the ExtensionCritical field value if set, zero value otherwise.
func (o *AuthorityKeyIdentifier) GetExtensionCritical() bool {
	if o == nil || IsNil(o.ExtensionCritical) {
		var ret bool
		return ret
	}
	return *o.ExtensionCritical
}

// GetExtensionCriticalOk returns a tuple with the ExtensionCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorityKeyIdentifier) GetExtensionCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtensionCritical) {
		return nil, false
	}
	return o.ExtensionCritical, true
}

// HasExtensionCritical returns a boolean if a field has been set.
func (o *AuthorityKeyIdentifier) HasExtensionCritical() bool {
	if o != nil && !IsNil(o.ExtensionCritical) {
		return true
	}

	return false
}

// SetExtensionCritical gets a reference to the given bool and assigns it to the ExtensionCritical field.
func (o *AuthorityKeyIdentifier) SetExtensionCritical(v bool) {
	o.ExtensionCritical = &v
}

func (o AuthorityKeyIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorityKeyIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorityCertIssuer) {
		toSerialize["authority_cert_issuer"] = o.AuthorityCertIssuer
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExtensionCritical) {
		toSerialize["extension_critical"] = o.ExtensionCritical
	}
	return toSerialize, nil
}

type NullableAuthorityKeyIdentifier struct {
	value *AuthorityKeyIdentifier
	isSet bool
}

func (v NullableAuthorityKeyIdentifier) Get() *AuthorityKeyIdentifier {
	return v.value
}

func (v *NullableAuthorityKeyIdentifier) Set(val *AuthorityKeyIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorityKeyIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorityKeyIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorityKeyIdentifier(val *AuthorityKeyIdentifier) *NullableAuthorityKeyIdentifier {
	return &NullableAuthorityKeyIdentifier{value: val, isSet: true}
}

func (v NullableAuthorityKeyIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorityKeyIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
