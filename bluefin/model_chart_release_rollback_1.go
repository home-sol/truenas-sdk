/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ChartReleaseRollback1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartReleaseRollback1{}

// ChartReleaseRollback1 struct for ChartReleaseRollback1
type ChartReleaseRollback1 struct {
	// `force_rollback` is a boolean which when set will force rollback operation to move forward even if no snapshots are found. This is only useful when `rollback_snapshot` is set.
	ForceRollback *bool `json:"force_rollback,omitempty"`
	// `recreate_resources` is a boolean which will delete and then create the kubernetes resources on rollback of chart release. This should be used with caution as if chart release is consuming immutable objects like a PVC, the rollback operation can't be performed and will fail as helm tries to do a 3 way patch for rollback.
	RecreateResources *bool `json:"recreate_resources,omitempty"`
	// `rollback_snapshot` is a boolean value which when set will rollback snapshots of any PVC's or ix volumes being consumed by the chart release. `force_rollback` is a boolean which when set will force rollback operation to move forward even if no snapshots are found. This is only useful when `rollback_snapshot` is set.
	RollbackSnapshot *bool `json:"rollback_snapshot,omitempty"`
	// `item_version` is version which we want to rollback a chart release to.
	ItemVersion *string `json:"item_version,omitempty"`
}

// NewChartReleaseRollback1 instantiates a new ChartReleaseRollback1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartReleaseRollback1() *ChartReleaseRollback1 {
	this := ChartReleaseRollback1{}
	var forceRollback bool
	this.ForceRollback = &forceRollback
	var recreateResources bool
	this.RecreateResources = &recreateResources
	var rollbackSnapshot bool
	this.RollbackSnapshot = &rollbackSnapshot
	return &this
}

// NewChartReleaseRollback1WithDefaults instantiates a new ChartReleaseRollback1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartReleaseRollback1WithDefaults() *ChartReleaseRollback1 {
	this := ChartReleaseRollback1{}
	var forceRollback bool
	this.ForceRollback = &forceRollback
	var recreateResources bool
	this.RecreateResources = &recreateResources
	var rollbackSnapshot bool
	this.RollbackSnapshot = &rollbackSnapshot
	return &this
}

// GetForceRollback returns the ForceRollback field value if set, zero value otherwise.
func (o *ChartReleaseRollback1) GetForceRollback() bool {
	if o == nil || IsNil(o.ForceRollback) {
		var ret bool
		return ret
	}
	return *o.ForceRollback
}

// GetForceRollbackOk returns a tuple with the ForceRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseRollback1) GetForceRollbackOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceRollback) {
		return nil, false
	}
	return o.ForceRollback, true
}

// HasForceRollback returns a boolean if a field has been set.
func (o *ChartReleaseRollback1) HasForceRollback() bool {
	if o != nil && !IsNil(o.ForceRollback) {
		return true
	}

	return false
}

// SetForceRollback gets a reference to the given bool and assigns it to the ForceRollback field.
func (o *ChartReleaseRollback1) SetForceRollback(v bool) {
	o.ForceRollback = &v
}

// GetRecreateResources returns the RecreateResources field value if set, zero value otherwise.
func (o *ChartReleaseRollback1) GetRecreateResources() bool {
	if o == nil || IsNil(o.RecreateResources) {
		var ret bool
		return ret
	}
	return *o.RecreateResources
}

// GetRecreateResourcesOk returns a tuple with the RecreateResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseRollback1) GetRecreateResourcesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecreateResources) {
		return nil, false
	}
	return o.RecreateResources, true
}

// HasRecreateResources returns a boolean if a field has been set.
func (o *ChartReleaseRollback1) HasRecreateResources() bool {
	if o != nil && !IsNil(o.RecreateResources) {
		return true
	}

	return false
}

// SetRecreateResources gets a reference to the given bool and assigns it to the RecreateResources field.
func (o *ChartReleaseRollback1) SetRecreateResources(v bool) {
	o.RecreateResources = &v
}

// GetRollbackSnapshot returns the RollbackSnapshot field value if set, zero value otherwise.
func (o *ChartReleaseRollback1) GetRollbackSnapshot() bool {
	if o == nil || IsNil(o.RollbackSnapshot) {
		var ret bool
		return ret
	}
	return *o.RollbackSnapshot
}

// GetRollbackSnapshotOk returns a tuple with the RollbackSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseRollback1) GetRollbackSnapshotOk() (*bool, bool) {
	if o == nil || IsNil(o.RollbackSnapshot) {
		return nil, false
	}
	return o.RollbackSnapshot, true
}

// HasRollbackSnapshot returns a boolean if a field has been set.
func (o *ChartReleaseRollback1) HasRollbackSnapshot() bool {
	if o != nil && !IsNil(o.RollbackSnapshot) {
		return true
	}

	return false
}

// SetRollbackSnapshot gets a reference to the given bool and assigns it to the RollbackSnapshot field.
func (o *ChartReleaseRollback1) SetRollbackSnapshot(v bool) {
	o.RollbackSnapshot = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *ChartReleaseRollback1) GetItemVersion() string {
	if o == nil || IsNil(o.ItemVersion) {
		var ret string
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseRollback1) GetItemVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemVersion) {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *ChartReleaseRollback1) HasItemVersion() bool {
	if o != nil && !IsNil(o.ItemVersion) {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given string and assigns it to the ItemVersion field.
func (o *ChartReleaseRollback1) SetItemVersion(v string) {
	o.ItemVersion = &v
}

func (o ChartReleaseRollback1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartReleaseRollback1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceRollback) {
		toSerialize["force_rollback"] = o.ForceRollback
	}
	if !IsNil(o.RecreateResources) {
		toSerialize["recreate_resources"] = o.RecreateResources
	}
	if !IsNil(o.RollbackSnapshot) {
		toSerialize["rollback_snapshot"] = o.RollbackSnapshot
	}
	if !IsNil(o.ItemVersion) {
		toSerialize["item_version"] = o.ItemVersion
	}
	return toSerialize, nil
}

type NullableChartReleaseRollback1 struct {
	value *ChartReleaseRollback1
	isSet bool
}

func (v NullableChartReleaseRollback1) Get() *ChartReleaseRollback1 {
	return v.value
}

func (v *NullableChartReleaseRollback1) Set(val *ChartReleaseRollback1) {
	v.value = val
	v.isSet = true
}

func (v NullableChartReleaseRollback1) IsSet() bool {
	return v.isSet
}

func (v *NullableChartReleaseRollback1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartReleaseRollback1(val *ChartReleaseRollback1) *NullableChartReleaseRollback1 {
	return &NullableChartReleaseRollback1{value: val, isSet: true}
}

func (v NullableChartReleaseRollback1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartReleaseRollback1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
