/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolDatasetCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolDatasetCreate0{}

// PoolDatasetCreate0 struct for PoolDatasetCreate0
type PoolDatasetCreate0 struct {
	// `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool. There are 2 cases where ZFS encryption is not allowed for a dataset: 1) Pool in question is GELI encrypted. 2) If the parent dataset is encrypted with a passphrase and `name` is being created    with a key for encrypting the dataset. `encryption_options` specifies configuration for encryption of dataset for `name` pool. `encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase as a key. Otherwise a hex encoded key can be specified by providing `encryption_options.key`. `encryption_options.generate_key` when enabled automatically generates the key to be used for dataset encryption.
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	// `volsize` is required for type=VOLUME and is supposed to be a multiple of the block size.
	Volsize *int32 `json:"volsize,omitempty"`
	// `sparse` and `volblocksize` are only used for type=VOLUME.
	Volblocksize *string `json:"volblocksize,omitempty"`
	// `sparse` and `volblocksize` are only used for type=VOLUME.
	Sparse                *bool                  `json:"sparse,omitempty"`
	ForceSize             *bool                  `json:"force_size,omitempty"`
	Comments              *Comments              `json:"comments,omitempty"`
	Sync                  *string                `json:"sync,omitempty"`
	Snapdev               *string                `json:"snapdev,omitempty"`
	Compression           *string                `json:"compression,omitempty"`
	Atime                 *string                `json:"atime,omitempty"`
	Exec                  *string                `json:"exec,omitempty"`
	Managedby             *Managedby             `json:"managedby,omitempty"`
	Quota                 NullableInt32          `json:"quota,omitempty"`
	QuotaWarning          *QuotaWarning          `json:"quota_warning,omitempty"`
	QuotaCritical         *QuotaCritical         `json:"quota_critical,omitempty"`
	Refquota              NullableInt32          `json:"refquota,omitempty"`
	RefquotaWarning       *RefquotaWarning       `json:"refquota_warning,omitempty"`
	RefquotaCritical      *RefquotaCritical      `json:"refquota_critical,omitempty"`
	Reservation           *int32                 `json:"reservation,omitempty"`
	Refreservation        *int32                 `json:"refreservation,omitempty"`
	SpecialSmallBlockSize *SpecialSmallBlockSize `json:"special_small_block_size,omitempty"`
	Copies                *Copies                `json:"copies,omitempty"`
	Snapdir               *string                `json:"snapdir,omitempty"`
	Deduplication         *string                `json:"deduplication,omitempty"`
	Checksum              *string                `json:"checksum,omitempty"`
	Readonly              *string                `json:"readonly,omitempty"`
	Recordsize            *Recordsize            `json:"recordsize,omitempty"`
	Casesensitivity       *string                `json:"casesensitivity,omitempty"`
	Aclmode               *string                `json:"aclmode,omitempty"`
	Acltype               *string                `json:"acltype,omitempty"`
	ShareType             *string                `json:"share_type,omitempty"`
	Xattr                 *string                `json:"xattr,omitempty"`
	EncryptionOptions     *EncryptionOptions1    `json:"encryption_options,omitempty"`
	// `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool. There are 2 cases where ZFS encryption is not allowed for a dataset: 1) Pool in question is GELI encrypted. 2) If the parent dataset is encrypted with a passphrase and `name` is being created    with a key for encrypting the dataset.
	Encryption        *bool          `json:"encryption,omitempty"`
	InheritEncryption *bool          `json:"inherit_encryption,omitempty"`
	UserProperties    []UserProperty `json:"user_properties,omitempty"`
	CreateAncestors   *bool          `json:"create_ancestors,omitempty"`
}

// NewPoolDatasetCreate0 instantiates a new PoolDatasetCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDatasetCreate0() *PoolDatasetCreate0 {
	this := PoolDatasetCreate0{}
	var type_ string
	this.Type = &type_
	var shareType string
	this.ShareType = &shareType
	var xattr string
	this.Xattr = &xattr
	var encryptionOptions EncryptionOptions1
	this.EncryptionOptions = &encryptionOptions
	var encryption bool
	this.Encryption = &encryption
	var inheritEncryption bool
	this.InheritEncryption = &inheritEncryption
	var createAncestors bool
	this.CreateAncestors = &createAncestors
	return &this
}

// NewPoolDatasetCreate0WithDefaults instantiates a new PoolDatasetCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDatasetCreate0WithDefaults() *PoolDatasetCreate0 {
	this := PoolDatasetCreate0{}
	var type_ string
	this.Type = &type_
	var shareType string
	this.ShareType = &shareType
	var xattr string
	this.Xattr = &xattr
	var encryptionOptions EncryptionOptions1
	this.EncryptionOptions = &encryptionOptions
	var encryption bool
	this.Encryption = &encryption
	var inheritEncryption bool
	this.InheritEncryption = &inheritEncryption
	var createAncestors bool
	this.CreateAncestors = &createAncestors
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PoolDatasetCreate0) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PoolDatasetCreate0) SetType(v string) {
	o.Type = &v
}

// GetVolsize returns the Volsize field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetVolsize() int32 {
	if o == nil || IsNil(o.Volsize) {
		var ret int32
		return ret
	}
	return *o.Volsize
}

// GetVolsizeOk returns a tuple with the Volsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetVolsizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Volsize) {
		return nil, false
	}
	return o.Volsize, true
}

// HasVolsize returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasVolsize() bool {
	if o != nil && !IsNil(o.Volsize) {
		return true
	}

	return false
}

// SetVolsize gets a reference to the given int32 and assigns it to the Volsize field.
func (o *PoolDatasetCreate0) SetVolsize(v int32) {
	o.Volsize = &v
}

// GetVolblocksize returns the Volblocksize field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetVolblocksize() string {
	if o == nil || IsNil(o.Volblocksize) {
		var ret string
		return ret
	}
	return *o.Volblocksize
}

// GetVolblocksizeOk returns a tuple with the Volblocksize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetVolblocksizeOk() (*string, bool) {
	if o == nil || IsNil(o.Volblocksize) {
		return nil, false
	}
	return o.Volblocksize, true
}

// HasVolblocksize returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasVolblocksize() bool {
	if o != nil && !IsNil(o.Volblocksize) {
		return true
	}

	return false
}

// SetVolblocksize gets a reference to the given string and assigns it to the Volblocksize field.
func (o *PoolDatasetCreate0) SetVolblocksize(v string) {
	o.Volblocksize = &v
}

// GetSparse returns the Sparse field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetSparse() bool {
	if o == nil || IsNil(o.Sparse) {
		var ret bool
		return ret
	}
	return *o.Sparse
}

// GetSparseOk returns a tuple with the Sparse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetSparseOk() (*bool, bool) {
	if o == nil || IsNil(o.Sparse) {
		return nil, false
	}
	return o.Sparse, true
}

// HasSparse returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasSparse() bool {
	if o != nil && !IsNil(o.Sparse) {
		return true
	}

	return false
}

// SetSparse gets a reference to the given bool and assigns it to the Sparse field.
func (o *PoolDatasetCreate0) SetSparse(v bool) {
	o.Sparse = &v
}

// GetForceSize returns the ForceSize field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetForceSize() bool {
	if o == nil || IsNil(o.ForceSize) {
		var ret bool
		return ret
	}
	return *o.ForceSize
}

// GetForceSizeOk returns a tuple with the ForceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetForceSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceSize) {
		return nil, false
	}
	return o.ForceSize, true
}

// HasForceSize returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasForceSize() bool {
	if o != nil && !IsNil(o.ForceSize) {
		return true
	}

	return false
}

// SetForceSize gets a reference to the given bool and assigns it to the ForceSize field.
func (o *PoolDatasetCreate0) SetForceSize(v bool) {
	o.ForceSize = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetComments() Comments {
	if o == nil || IsNil(o.Comments) {
		var ret Comments
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetCommentsOk() (*Comments, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given Comments and assigns it to the Comments field.
func (o *PoolDatasetCreate0) SetComments(v Comments) {
	o.Comments = &v
}

// GetSync returns the Sync field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetSync() string {
	if o == nil || IsNil(o.Sync) {
		var ret string
		return ret
	}
	return *o.Sync
}

// GetSyncOk returns a tuple with the Sync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetSyncOk() (*string, bool) {
	if o == nil || IsNil(o.Sync) {
		return nil, false
	}
	return o.Sync, true
}

// HasSync returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasSync() bool {
	if o != nil && !IsNil(o.Sync) {
		return true
	}

	return false
}

// SetSync gets a reference to the given string and assigns it to the Sync field.
func (o *PoolDatasetCreate0) SetSync(v string) {
	o.Sync = &v
}

// GetSnapdev returns the Snapdev field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetSnapdev() string {
	if o == nil || IsNil(o.Snapdev) {
		var ret string
		return ret
	}
	return *o.Snapdev
}

// GetSnapdevOk returns a tuple with the Snapdev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetSnapdevOk() (*string, bool) {
	if o == nil || IsNil(o.Snapdev) {
		return nil, false
	}
	return o.Snapdev, true
}

// HasSnapdev returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasSnapdev() bool {
	if o != nil && !IsNil(o.Snapdev) {
		return true
	}

	return false
}

// SetSnapdev gets a reference to the given string and assigns it to the Snapdev field.
func (o *PoolDatasetCreate0) SetSnapdev(v string) {
	o.Snapdev = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *PoolDatasetCreate0) SetCompression(v string) {
	o.Compression = &v
}

// GetAtime returns the Atime field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetAtime() string {
	if o == nil || IsNil(o.Atime) {
		var ret string
		return ret
	}
	return *o.Atime
}

// GetAtimeOk returns a tuple with the Atime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetAtimeOk() (*string, bool) {
	if o == nil || IsNil(o.Atime) {
		return nil, false
	}
	return o.Atime, true
}

// HasAtime returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasAtime() bool {
	if o != nil && !IsNil(o.Atime) {
		return true
	}

	return false
}

// SetAtime gets a reference to the given string and assigns it to the Atime field.
func (o *PoolDatasetCreate0) SetAtime(v string) {
	o.Atime = &v
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetExec() string {
	if o == nil || IsNil(o.Exec) {
		var ret string
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetExecOk() (*string, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given string and assigns it to the Exec field.
func (o *PoolDatasetCreate0) SetExec(v string) {
	o.Exec = &v
}

// GetManagedby returns the Managedby field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetManagedby() Managedby {
	if o == nil || IsNil(o.Managedby) {
		var ret Managedby
		return ret
	}
	return *o.Managedby
}

// GetManagedbyOk returns a tuple with the Managedby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetManagedbyOk() (*Managedby, bool) {
	if o == nil || IsNil(o.Managedby) {
		return nil, false
	}
	return o.Managedby, true
}

// HasManagedby returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasManagedby() bool {
	if o != nil && !IsNil(o.Managedby) {
		return true
	}

	return false
}

// SetManagedby gets a reference to the given Managedby and assigns it to the Managedby field.
func (o *PoolDatasetCreate0) SetManagedby(v Managedby) {
	o.Managedby = &v
}

// GetQuota returns the Quota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PoolDatasetCreate0) GetQuota() int32 {
	if o == nil || IsNil(o.Quota.Get()) {
		var ret int32
		return ret
	}
	return *o.Quota.Get()
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PoolDatasetCreate0) GetQuotaOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quota.Get(), o.Quota.IsSet()
}

// HasQuota returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasQuota() bool {
	if o != nil && o.Quota.IsSet() {
		return true
	}

	return false
}

// SetQuota gets a reference to the given NullableInt32 and assigns it to the Quota field.
func (o *PoolDatasetCreate0) SetQuota(v int32) {
	o.Quota.Set(&v)
}

// SetQuotaNil sets the value for Quota to be an explicit nil
func (o *PoolDatasetCreate0) SetQuotaNil() {
	o.Quota.Set(nil)
}

// UnsetQuota ensures that no value is present for Quota, not even an explicit nil
func (o *PoolDatasetCreate0) UnsetQuota() {
	o.Quota.Unset()
}

// GetQuotaWarning returns the QuotaWarning field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetQuotaWarning() QuotaWarning {
	if o == nil || IsNil(o.QuotaWarning) {
		var ret QuotaWarning
		return ret
	}
	return *o.QuotaWarning
}

// GetQuotaWarningOk returns a tuple with the QuotaWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetQuotaWarningOk() (*QuotaWarning, bool) {
	if o == nil || IsNil(o.QuotaWarning) {
		return nil, false
	}
	return o.QuotaWarning, true
}

// HasQuotaWarning returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasQuotaWarning() bool {
	if o != nil && !IsNil(o.QuotaWarning) {
		return true
	}

	return false
}

// SetQuotaWarning gets a reference to the given QuotaWarning and assigns it to the QuotaWarning field.
func (o *PoolDatasetCreate0) SetQuotaWarning(v QuotaWarning) {
	o.QuotaWarning = &v
}

// GetQuotaCritical returns the QuotaCritical field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetQuotaCritical() QuotaCritical {
	if o == nil || IsNil(o.QuotaCritical) {
		var ret QuotaCritical
		return ret
	}
	return *o.QuotaCritical
}

// GetQuotaCriticalOk returns a tuple with the QuotaCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetQuotaCriticalOk() (*QuotaCritical, bool) {
	if o == nil || IsNil(o.QuotaCritical) {
		return nil, false
	}
	return o.QuotaCritical, true
}

// HasQuotaCritical returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasQuotaCritical() bool {
	if o != nil && !IsNil(o.QuotaCritical) {
		return true
	}

	return false
}

// SetQuotaCritical gets a reference to the given QuotaCritical and assigns it to the QuotaCritical field.
func (o *PoolDatasetCreate0) SetQuotaCritical(v QuotaCritical) {
	o.QuotaCritical = &v
}

// GetRefquota returns the Refquota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PoolDatasetCreate0) GetRefquota() int32 {
	if o == nil || IsNil(o.Refquota.Get()) {
		var ret int32
		return ret
	}
	return *o.Refquota.Get()
}

// GetRefquotaOk returns a tuple with the Refquota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PoolDatasetCreate0) GetRefquotaOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Refquota.Get(), o.Refquota.IsSet()
}

// HasRefquota returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasRefquota() bool {
	if o != nil && o.Refquota.IsSet() {
		return true
	}

	return false
}

// SetRefquota gets a reference to the given NullableInt32 and assigns it to the Refquota field.
func (o *PoolDatasetCreate0) SetRefquota(v int32) {
	o.Refquota.Set(&v)
}

// SetRefquotaNil sets the value for Refquota to be an explicit nil
func (o *PoolDatasetCreate0) SetRefquotaNil() {
	o.Refquota.Set(nil)
}

// UnsetRefquota ensures that no value is present for Refquota, not even an explicit nil
func (o *PoolDatasetCreate0) UnsetRefquota() {
	o.Refquota.Unset()
}

// GetRefquotaWarning returns the RefquotaWarning field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetRefquotaWarning() RefquotaWarning {
	if o == nil || IsNil(o.RefquotaWarning) {
		var ret RefquotaWarning
		return ret
	}
	return *o.RefquotaWarning
}

// GetRefquotaWarningOk returns a tuple with the RefquotaWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetRefquotaWarningOk() (*RefquotaWarning, bool) {
	if o == nil || IsNil(o.RefquotaWarning) {
		return nil, false
	}
	return o.RefquotaWarning, true
}

// HasRefquotaWarning returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasRefquotaWarning() bool {
	if o != nil && !IsNil(o.RefquotaWarning) {
		return true
	}

	return false
}

// SetRefquotaWarning gets a reference to the given RefquotaWarning and assigns it to the RefquotaWarning field.
func (o *PoolDatasetCreate0) SetRefquotaWarning(v RefquotaWarning) {
	o.RefquotaWarning = &v
}

// GetRefquotaCritical returns the RefquotaCritical field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetRefquotaCritical() RefquotaCritical {
	if o == nil || IsNil(o.RefquotaCritical) {
		var ret RefquotaCritical
		return ret
	}
	return *o.RefquotaCritical
}

// GetRefquotaCriticalOk returns a tuple with the RefquotaCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetRefquotaCriticalOk() (*RefquotaCritical, bool) {
	if o == nil || IsNil(o.RefquotaCritical) {
		return nil, false
	}
	return o.RefquotaCritical, true
}

// HasRefquotaCritical returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasRefquotaCritical() bool {
	if o != nil && !IsNil(o.RefquotaCritical) {
		return true
	}

	return false
}

// SetRefquotaCritical gets a reference to the given RefquotaCritical and assigns it to the RefquotaCritical field.
func (o *PoolDatasetCreate0) SetRefquotaCritical(v RefquotaCritical) {
	o.RefquotaCritical = &v
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetReservation() int32 {
	if o == nil || IsNil(o.Reservation) {
		var ret int32
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetReservationOk() (*int32, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given int32 and assigns it to the Reservation field.
func (o *PoolDatasetCreate0) SetReservation(v int32) {
	o.Reservation = &v
}

// GetRefreservation returns the Refreservation field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetRefreservation() int32 {
	if o == nil || IsNil(o.Refreservation) {
		var ret int32
		return ret
	}
	return *o.Refreservation
}

// GetRefreservationOk returns a tuple with the Refreservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetRefreservationOk() (*int32, bool) {
	if o == nil || IsNil(o.Refreservation) {
		return nil, false
	}
	return o.Refreservation, true
}

// HasRefreservation returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasRefreservation() bool {
	if o != nil && !IsNil(o.Refreservation) {
		return true
	}

	return false
}

// SetRefreservation gets a reference to the given int32 and assigns it to the Refreservation field.
func (o *PoolDatasetCreate0) SetRefreservation(v int32) {
	o.Refreservation = &v
}

// GetSpecialSmallBlockSize returns the SpecialSmallBlockSize field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetSpecialSmallBlockSize() SpecialSmallBlockSize {
	if o == nil || IsNil(o.SpecialSmallBlockSize) {
		var ret SpecialSmallBlockSize
		return ret
	}
	return *o.SpecialSmallBlockSize
}

// GetSpecialSmallBlockSizeOk returns a tuple with the SpecialSmallBlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetSpecialSmallBlockSizeOk() (*SpecialSmallBlockSize, bool) {
	if o == nil || IsNil(o.SpecialSmallBlockSize) {
		return nil, false
	}
	return o.SpecialSmallBlockSize, true
}

// HasSpecialSmallBlockSize returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasSpecialSmallBlockSize() bool {
	if o != nil && !IsNil(o.SpecialSmallBlockSize) {
		return true
	}

	return false
}

// SetSpecialSmallBlockSize gets a reference to the given SpecialSmallBlockSize and assigns it to the SpecialSmallBlockSize field.
func (o *PoolDatasetCreate0) SetSpecialSmallBlockSize(v SpecialSmallBlockSize) {
	o.SpecialSmallBlockSize = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetCopies() Copies {
	if o == nil || IsNil(o.Copies) {
		var ret Copies
		return ret
	}
	return *o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetCopiesOk() (*Copies, bool) {
	if o == nil || IsNil(o.Copies) {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasCopies() bool {
	if o != nil && !IsNil(o.Copies) {
		return true
	}

	return false
}

// SetCopies gets a reference to the given Copies and assigns it to the Copies field.
func (o *PoolDatasetCreate0) SetCopies(v Copies) {
	o.Copies = &v
}

// GetSnapdir returns the Snapdir field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetSnapdir() string {
	if o == nil || IsNil(o.Snapdir) {
		var ret string
		return ret
	}
	return *o.Snapdir
}

// GetSnapdirOk returns a tuple with the Snapdir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetSnapdirOk() (*string, bool) {
	if o == nil || IsNil(o.Snapdir) {
		return nil, false
	}
	return o.Snapdir, true
}

// HasSnapdir returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasSnapdir() bool {
	if o != nil && !IsNil(o.Snapdir) {
		return true
	}

	return false
}

// SetSnapdir gets a reference to the given string and assigns it to the Snapdir field.
func (o *PoolDatasetCreate0) SetSnapdir(v string) {
	o.Snapdir = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetDeduplication() string {
	if o == nil || IsNil(o.Deduplication) {
		var ret string
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetDeduplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given string and assigns it to the Deduplication field.
func (o *PoolDatasetCreate0) SetDeduplication(v string) {
	o.Deduplication = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetChecksum() string {
	if o == nil || IsNil(o.Checksum) {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Checksum) {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *PoolDatasetCreate0) SetChecksum(v string) {
	o.Checksum = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetReadonly() string {
	if o == nil || IsNil(o.Readonly) {
		var ret string
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetReadonlyOk() (*string, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given string and assigns it to the Readonly field.
func (o *PoolDatasetCreate0) SetReadonly(v string) {
	o.Readonly = &v
}

// GetRecordsize returns the Recordsize field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetRecordsize() Recordsize {
	if o == nil || IsNil(o.Recordsize) {
		var ret Recordsize
		return ret
	}
	return *o.Recordsize
}

// GetRecordsizeOk returns a tuple with the Recordsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetRecordsizeOk() (*Recordsize, bool) {
	if o == nil || IsNil(o.Recordsize) {
		return nil, false
	}
	return o.Recordsize, true
}

// HasRecordsize returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasRecordsize() bool {
	if o != nil && !IsNil(o.Recordsize) {
		return true
	}

	return false
}

// SetRecordsize gets a reference to the given Recordsize and assigns it to the Recordsize field.
func (o *PoolDatasetCreate0) SetRecordsize(v Recordsize) {
	o.Recordsize = &v
}

// GetCasesensitivity returns the Casesensitivity field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetCasesensitivity() string {
	if o == nil || IsNil(o.Casesensitivity) {
		var ret string
		return ret
	}
	return *o.Casesensitivity
}

// GetCasesensitivityOk returns a tuple with the Casesensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetCasesensitivityOk() (*string, bool) {
	if o == nil || IsNil(o.Casesensitivity) {
		return nil, false
	}
	return o.Casesensitivity, true
}

// HasCasesensitivity returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasCasesensitivity() bool {
	if o != nil && !IsNil(o.Casesensitivity) {
		return true
	}

	return false
}

// SetCasesensitivity gets a reference to the given string and assigns it to the Casesensitivity field.
func (o *PoolDatasetCreate0) SetCasesensitivity(v string) {
	o.Casesensitivity = &v
}

// GetAclmode returns the Aclmode field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetAclmode() string {
	if o == nil || IsNil(o.Aclmode) {
		var ret string
		return ret
	}
	return *o.Aclmode
}

// GetAclmodeOk returns a tuple with the Aclmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetAclmodeOk() (*string, bool) {
	if o == nil || IsNil(o.Aclmode) {
		return nil, false
	}
	return o.Aclmode, true
}

// HasAclmode returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasAclmode() bool {
	if o != nil && !IsNil(o.Aclmode) {
		return true
	}

	return false
}

// SetAclmode gets a reference to the given string and assigns it to the Aclmode field.
func (o *PoolDatasetCreate0) SetAclmode(v string) {
	o.Aclmode = &v
}

// GetAcltype returns the Acltype field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetAcltype() string {
	if o == nil || IsNil(o.Acltype) {
		var ret string
		return ret
	}
	return *o.Acltype
}

// GetAcltypeOk returns a tuple with the Acltype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetAcltypeOk() (*string, bool) {
	if o == nil || IsNil(o.Acltype) {
		return nil, false
	}
	return o.Acltype, true
}

// HasAcltype returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasAcltype() bool {
	if o != nil && !IsNil(o.Acltype) {
		return true
	}

	return false
}

// SetAcltype gets a reference to the given string and assigns it to the Acltype field.
func (o *PoolDatasetCreate0) SetAcltype(v string) {
	o.Acltype = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetShareType() string {
	if o == nil || IsNil(o.ShareType) {
		var ret string
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetShareTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ShareType) {
		return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasShareType() bool {
	if o != nil && !IsNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given string and assigns it to the ShareType field.
func (o *PoolDatasetCreate0) SetShareType(v string) {
	o.ShareType = &v
}

// GetXattr returns the Xattr field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetXattr() string {
	if o == nil || IsNil(o.Xattr) {
		var ret string
		return ret
	}
	return *o.Xattr
}

// GetXattrOk returns a tuple with the Xattr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetXattrOk() (*string, bool) {
	if o == nil || IsNil(o.Xattr) {
		return nil, false
	}
	return o.Xattr, true
}

// HasXattr returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasXattr() bool {
	if o != nil && !IsNil(o.Xattr) {
		return true
	}

	return false
}

// SetXattr gets a reference to the given string and assigns it to the Xattr field.
func (o *PoolDatasetCreate0) SetXattr(v string) {
	o.Xattr = &v
}

// GetEncryptionOptions returns the EncryptionOptions field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetEncryptionOptions() EncryptionOptions1 {
	if o == nil || IsNil(o.EncryptionOptions) {
		var ret EncryptionOptions1
		return ret
	}
	return *o.EncryptionOptions
}

// GetEncryptionOptionsOk returns a tuple with the EncryptionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetEncryptionOptionsOk() (*EncryptionOptions1, bool) {
	if o == nil || IsNil(o.EncryptionOptions) {
		return nil, false
	}
	return o.EncryptionOptions, true
}

// HasEncryptionOptions returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasEncryptionOptions() bool {
	if o != nil && !IsNil(o.EncryptionOptions) {
		return true
	}

	return false
}

// SetEncryptionOptions gets a reference to the given EncryptionOptions1 and assigns it to the EncryptionOptions field.
func (o *PoolDatasetCreate0) SetEncryptionOptions(v EncryptionOptions1) {
	o.EncryptionOptions = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetEncryption() bool {
	if o == nil || IsNil(o.Encryption) {
		var ret bool
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given bool and assigns it to the Encryption field.
func (o *PoolDatasetCreate0) SetEncryption(v bool) {
	o.Encryption = &v
}

// GetInheritEncryption returns the InheritEncryption field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetInheritEncryption() bool {
	if o == nil || IsNil(o.InheritEncryption) {
		var ret bool
		return ret
	}
	return *o.InheritEncryption
}

// GetInheritEncryptionOk returns a tuple with the InheritEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetInheritEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.InheritEncryption) {
		return nil, false
	}
	return o.InheritEncryption, true
}

// HasInheritEncryption returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasInheritEncryption() bool {
	if o != nil && !IsNil(o.InheritEncryption) {
		return true
	}

	return false
}

// SetInheritEncryption gets a reference to the given bool and assigns it to the InheritEncryption field.
func (o *PoolDatasetCreate0) SetInheritEncryption(v bool) {
	o.InheritEncryption = &v
}

// GetUserProperties returns the UserProperties field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetUserProperties() []UserProperty {
	if o == nil || IsNil(o.UserProperties) {
		var ret []UserProperty
		return ret
	}
	return o.UserProperties
}

// GetUserPropertiesOk returns a tuple with the UserProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetUserPropertiesOk() ([]UserProperty, bool) {
	if o == nil || IsNil(o.UserProperties) {
		return nil, false
	}
	return o.UserProperties, true
}

// HasUserProperties returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasUserProperties() bool {
	if o != nil && !IsNil(o.UserProperties) {
		return true
	}

	return false
}

// SetUserProperties gets a reference to the given []UserProperty and assigns it to the UserProperties field.
func (o *PoolDatasetCreate0) SetUserProperties(v []UserProperty) {
	o.UserProperties = v
}

// GetCreateAncestors returns the CreateAncestors field value if set, zero value otherwise.
func (o *PoolDatasetCreate0) GetCreateAncestors() bool {
	if o == nil || IsNil(o.CreateAncestors) {
		var ret bool
		return ret
	}
	return *o.CreateAncestors
}

// GetCreateAncestorsOk returns a tuple with the CreateAncestors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetCreate0) GetCreateAncestorsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateAncestors) {
		return nil, false
	}
	return o.CreateAncestors, true
}

// HasCreateAncestors returns a boolean if a field has been set.
func (o *PoolDatasetCreate0) HasCreateAncestors() bool {
	if o != nil && !IsNil(o.CreateAncestors) {
		return true
	}

	return false
}

// SetCreateAncestors gets a reference to the given bool and assigns it to the CreateAncestors field.
func (o *PoolDatasetCreate0) SetCreateAncestors(v bool) {
	o.CreateAncestors = &v
}

func (o PoolDatasetCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolDatasetCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Volsize) {
		toSerialize["volsize"] = o.Volsize
	}
	if !IsNil(o.Volblocksize) {
		toSerialize["volblocksize"] = o.Volblocksize
	}
	if !IsNil(o.Sparse) {
		toSerialize["sparse"] = o.Sparse
	}
	if !IsNil(o.ForceSize) {
		toSerialize["force_size"] = o.ForceSize
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Sync) {
		toSerialize["sync"] = o.Sync
	}
	if !IsNil(o.Snapdev) {
		toSerialize["snapdev"] = o.Snapdev
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Atime) {
		toSerialize["atime"] = o.Atime
	}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.Managedby) {
		toSerialize["managedby"] = o.Managedby
	}
	if o.Quota.IsSet() {
		toSerialize["quota"] = o.Quota.Get()
	}
	if !IsNil(o.QuotaWarning) {
		toSerialize["quota_warning"] = o.QuotaWarning
	}
	if !IsNil(o.QuotaCritical) {
		toSerialize["quota_critical"] = o.QuotaCritical
	}
	if o.Refquota.IsSet() {
		toSerialize["refquota"] = o.Refquota.Get()
	}
	if !IsNil(o.RefquotaWarning) {
		toSerialize["refquota_warning"] = o.RefquotaWarning
	}
	if !IsNil(o.RefquotaCritical) {
		toSerialize["refquota_critical"] = o.RefquotaCritical
	}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	if !IsNil(o.Refreservation) {
		toSerialize["refreservation"] = o.Refreservation
	}
	if !IsNil(o.SpecialSmallBlockSize) {
		toSerialize["special_small_block_size"] = o.SpecialSmallBlockSize
	}
	if !IsNil(o.Copies) {
		toSerialize["copies"] = o.Copies
	}
	if !IsNil(o.Snapdir) {
		toSerialize["snapdir"] = o.Snapdir
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Recordsize) {
		toSerialize["recordsize"] = o.Recordsize
	}
	if !IsNil(o.Casesensitivity) {
		toSerialize["casesensitivity"] = o.Casesensitivity
	}
	if !IsNil(o.Aclmode) {
		toSerialize["aclmode"] = o.Aclmode
	}
	if !IsNil(o.Acltype) {
		toSerialize["acltype"] = o.Acltype
	}
	if !IsNil(o.ShareType) {
		toSerialize["share_type"] = o.ShareType
	}
	if !IsNil(o.Xattr) {
		toSerialize["xattr"] = o.Xattr
	}
	if !IsNil(o.EncryptionOptions) {
		toSerialize["encryption_options"] = o.EncryptionOptions
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !IsNil(o.InheritEncryption) {
		toSerialize["inherit_encryption"] = o.InheritEncryption
	}
	if !IsNil(o.UserProperties) {
		toSerialize["user_properties"] = o.UserProperties
	}
	if !IsNil(o.CreateAncestors) {
		toSerialize["create_ancestors"] = o.CreateAncestors
	}
	return toSerialize, nil
}

type NullablePoolDatasetCreate0 struct {
	value *PoolDatasetCreate0
	isSet bool
}

func (v NullablePoolDatasetCreate0) Get() *PoolDatasetCreate0 {
	return v.value
}

func (v *NullablePoolDatasetCreate0) Set(val *PoolDatasetCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDatasetCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDatasetCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDatasetCreate0(val *PoolDatasetCreate0) *NullablePoolDatasetCreate0 {
	return &NullablePoolDatasetCreate0{value: val, isSet: true}
}

func (v NullablePoolDatasetCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDatasetCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
