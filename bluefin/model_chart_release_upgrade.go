/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ChartReleaseUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartReleaseUpgrade{}

// ChartReleaseUpgrade struct for ChartReleaseUpgrade
type ChartReleaseUpgrade struct {
	// Upgrade `release_name` chart release. System will update container images being used by `release_name` chart release as a chart release upgrade is not considered complete until the images in use have also been updated to latest versions.
	ReleaseName          *string               `json:"release_name,omitempty"`
	UpgradeOptions       *ChartReleaseUpgrade1 `json:"upgrade_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChartReleaseUpgrade ChartReleaseUpgrade

// NewChartReleaseUpgrade instantiates a new ChartReleaseUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartReleaseUpgrade() *ChartReleaseUpgrade {
	this := ChartReleaseUpgrade{}
	var upgradeOptions ChartReleaseUpgrade1
	this.UpgradeOptions = &upgradeOptions
	return &this
}

// NewChartReleaseUpgradeWithDefaults instantiates a new ChartReleaseUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartReleaseUpgradeWithDefaults() *ChartReleaseUpgrade {
	this := ChartReleaseUpgrade{}
	var upgradeOptions ChartReleaseUpgrade1
	this.UpgradeOptions = &upgradeOptions
	return &this
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *ChartReleaseUpgrade) GetReleaseName() string {
	if o == nil || IsNil(o.ReleaseName) {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseUpgrade) GetReleaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseName) {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *ChartReleaseUpgrade) HasReleaseName() bool {
	if o != nil && !IsNil(o.ReleaseName) {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *ChartReleaseUpgrade) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetUpgradeOptions returns the UpgradeOptions field value if set, zero value otherwise.
func (o *ChartReleaseUpgrade) GetUpgradeOptions() ChartReleaseUpgrade1 {
	if o == nil || IsNil(o.UpgradeOptions) {
		var ret ChartReleaseUpgrade1
		return ret
	}
	return *o.UpgradeOptions
}

// GetUpgradeOptionsOk returns a tuple with the UpgradeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseUpgrade) GetUpgradeOptionsOk() (*ChartReleaseUpgrade1, bool) {
	if o == nil || IsNil(o.UpgradeOptions) {
		return nil, false
	}
	return o.UpgradeOptions, true
}

// HasUpgradeOptions returns a boolean if a field has been set.
func (o *ChartReleaseUpgrade) HasUpgradeOptions() bool {
	if o != nil && !IsNil(o.UpgradeOptions) {
		return true
	}

	return false
}

// SetUpgradeOptions gets a reference to the given ChartReleaseUpgrade1 and assigns it to the UpgradeOptions field.
func (o *ChartReleaseUpgrade) SetUpgradeOptions(v ChartReleaseUpgrade1) {
	o.UpgradeOptions = &v
}

func (o ChartReleaseUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartReleaseUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReleaseName) {
		toSerialize["release_name"] = o.ReleaseName
	}
	if !IsNil(o.UpgradeOptions) {
		toSerialize["upgrade_options"] = o.UpgradeOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChartReleaseUpgrade) UnmarshalJSON(bytes []byte) (err error) {
	varChartReleaseUpgrade := _ChartReleaseUpgrade{}

	if err = json.Unmarshal(bytes, &varChartReleaseUpgrade); err == nil {
		*o = ChartReleaseUpgrade(varChartReleaseUpgrade)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "release_name")
		delete(additionalProperties, "upgrade_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChartReleaseUpgrade struct {
	value *ChartReleaseUpgrade
	isSet bool
}

func (v NullableChartReleaseUpgrade) Get() *ChartReleaseUpgrade {
	return v.value
}

func (v *NullableChartReleaseUpgrade) Set(val *ChartReleaseUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableChartReleaseUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableChartReleaseUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartReleaseUpgrade(val *ChartReleaseUpgrade) *NullableChartReleaseUpgrade {
	return &NullableChartReleaseUpgrade{value: val, isSet: true}
}

func (v NullableChartReleaseUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartReleaseUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
