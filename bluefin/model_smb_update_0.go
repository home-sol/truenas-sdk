/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SmbUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbUpdate0{}

// SmbUpdate0 struct for SmbUpdate0
type SmbUpdate0 struct {
	// `netbiosname` defaults to the original hostname of the system. `workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be automatically set to the correct value during the process of joining an AD domain. NOTE: `workgroup` and `netbiosname` should have different values.
	Netbiosname  *string `json:"netbiosname,omitempty"`
	NetbiosnameB *string `json:"netbiosname_b,omitempty"`
	// `netbiosalias` a list of netbios aliases. If Server is joined to an AD domain, additional Kerberos Service Principal Names will be generated for these aliases.
	Netbiosalias []string `json:"netbiosalias,omitempty"`
	// `workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be automatically set to the correct value during the process of joining an AD domain. NOTE: `workgroup` and `netbiosname` should have different values.
	Workgroup   *string `json:"workgroup,omitempty"`
	Description *string `json:"description,omitempty"`
	// `enable_smb1` allows legacy SMB clients to connect to the server when enabled.
	EnableSmb1  *bool   `json:"enable_smb1,omitempty"`
	Unixcharset *string `json:"unixcharset,omitempty"`
	Loglevel    *string `json:"loglevel,omitempty"`
	Syslog      *bool   `json:"syslog,omitempty"`
	// `aapl_extensions` enables support for SMB2 protocol extensions for MacOS clients. This is not a requirement for MacOS support, but is currently a requirement for time machine support.
	AaplExtensions *bool `json:"aapl_extensions,omitempty"`
	// `localmaster` when set, determines if the system participates in a browser election.
	Localmaster *bool `json:"localmaster,omitempty"`
	// `guest` attribute is specified to select the account to be used for guest access. It defaults to \"nobody\".
	Guest *string `json:"guest,omitempty"`
	// The group specified as the SMB `admin_group` will be automatically added as a foreign group member of S-1-5-32-544 (builtindmins). This will afford the group all privileges granted to a local admin. Any SMB group may be selected (including AD groups).
	AdminGroup NullableString `json:"admin_group,omitempty"`
	Filemask   *string        `json:"filemask,omitempty"`
	Dirmask    *string        `json:"dirmask,omitempty"`
	// `ntlmv1_auth` enables a legacy and insecure authentication method, which may be required for legacy or poorly-implemented SMB clients.
	Ntlmv1Auth   *bool    `json:"ntlmv1_auth,omitempty"`
	Multichannel *bool    `json:"multichannel,omitempty"`
	Bindip       []string `json:"bindip,omitempty"`
	SmbOptions   *string  `json:"smb_options,omitempty"`
}

// NewSmbUpdate0 instantiates a new SmbUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbUpdate0() *SmbUpdate0 {
	this := SmbUpdate0{}
	var multichannel bool
	this.Multichannel = &multichannel
	return &this
}

// NewSmbUpdate0WithDefaults instantiates a new SmbUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbUpdate0WithDefaults() *SmbUpdate0 {
	this := SmbUpdate0{}
	var multichannel bool
	this.Multichannel = &multichannel
	return &this
}

// GetNetbiosname returns the Netbiosname field value if set, zero value otherwise.
func (o *SmbUpdate0) GetNetbiosname() string {
	if o == nil || IsNil(o.Netbiosname) {
		var ret string
		return ret
	}
	return *o.Netbiosname
}

// GetNetbiosnameOk returns a tuple with the Netbiosname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetNetbiosnameOk() (*string, bool) {
	if o == nil || IsNil(o.Netbiosname) {
		return nil, false
	}
	return o.Netbiosname, true
}

// HasNetbiosname returns a boolean if a field has been set.
func (o *SmbUpdate0) HasNetbiosname() bool {
	if o != nil && !IsNil(o.Netbiosname) {
		return true
	}

	return false
}

// SetNetbiosname gets a reference to the given string and assigns it to the Netbiosname field.
func (o *SmbUpdate0) SetNetbiosname(v string) {
	o.Netbiosname = &v
}

// GetNetbiosnameB returns the NetbiosnameB field value if set, zero value otherwise.
func (o *SmbUpdate0) GetNetbiosnameB() string {
	if o == nil || IsNil(o.NetbiosnameB) {
		var ret string
		return ret
	}
	return *o.NetbiosnameB
}

// GetNetbiosnameBOk returns a tuple with the NetbiosnameB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetNetbiosnameBOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosnameB) {
		return nil, false
	}
	return o.NetbiosnameB, true
}

// HasNetbiosnameB returns a boolean if a field has been set.
func (o *SmbUpdate0) HasNetbiosnameB() bool {
	if o != nil && !IsNil(o.NetbiosnameB) {
		return true
	}

	return false
}

// SetNetbiosnameB gets a reference to the given string and assigns it to the NetbiosnameB field.
func (o *SmbUpdate0) SetNetbiosnameB(v string) {
	o.NetbiosnameB = &v
}

// GetNetbiosalias returns the Netbiosalias field value if set, zero value otherwise.
func (o *SmbUpdate0) GetNetbiosalias() []string {
	if o == nil || IsNil(o.Netbiosalias) {
		var ret []string
		return ret
	}
	return o.Netbiosalias
}

// GetNetbiosaliasOk returns a tuple with the Netbiosalias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetNetbiosaliasOk() ([]string, bool) {
	if o == nil || IsNil(o.Netbiosalias) {
		return nil, false
	}
	return o.Netbiosalias, true
}

// HasNetbiosalias returns a boolean if a field has been set.
func (o *SmbUpdate0) HasNetbiosalias() bool {
	if o != nil && !IsNil(o.Netbiosalias) {
		return true
	}

	return false
}

// SetNetbiosalias gets a reference to the given []string and assigns it to the Netbiosalias field.
func (o *SmbUpdate0) SetNetbiosalias(v []string) {
	o.Netbiosalias = v
}

// GetWorkgroup returns the Workgroup field value if set, zero value otherwise.
func (o *SmbUpdate0) GetWorkgroup() string {
	if o == nil || IsNil(o.Workgroup) {
		var ret string
		return ret
	}
	return *o.Workgroup
}

// GetWorkgroupOk returns a tuple with the Workgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetWorkgroupOk() (*string, bool) {
	if o == nil || IsNil(o.Workgroup) {
		return nil, false
	}
	return o.Workgroup, true
}

// HasWorkgroup returns a boolean if a field has been set.
func (o *SmbUpdate0) HasWorkgroup() bool {
	if o != nil && !IsNil(o.Workgroup) {
		return true
	}

	return false
}

// SetWorkgroup gets a reference to the given string and assigns it to the Workgroup field.
func (o *SmbUpdate0) SetWorkgroup(v string) {
	o.Workgroup = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SmbUpdate0) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SmbUpdate0) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SmbUpdate0) SetDescription(v string) {
	o.Description = &v
}

// GetEnableSmb1 returns the EnableSmb1 field value if set, zero value otherwise.
func (o *SmbUpdate0) GetEnableSmb1() bool {
	if o == nil || IsNil(o.EnableSmb1) {
		var ret bool
		return ret
	}
	return *o.EnableSmb1
}

// GetEnableSmb1Ok returns a tuple with the EnableSmb1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetEnableSmb1Ok() (*bool, bool) {
	if o == nil || IsNil(o.EnableSmb1) {
		return nil, false
	}
	return o.EnableSmb1, true
}

// HasEnableSmb1 returns a boolean if a field has been set.
func (o *SmbUpdate0) HasEnableSmb1() bool {
	if o != nil && !IsNil(o.EnableSmb1) {
		return true
	}

	return false
}

// SetEnableSmb1 gets a reference to the given bool and assigns it to the EnableSmb1 field.
func (o *SmbUpdate0) SetEnableSmb1(v bool) {
	o.EnableSmb1 = &v
}

// GetUnixcharset returns the Unixcharset field value if set, zero value otherwise.
func (o *SmbUpdate0) GetUnixcharset() string {
	if o == nil || IsNil(o.Unixcharset) {
		var ret string
		return ret
	}
	return *o.Unixcharset
}

// GetUnixcharsetOk returns a tuple with the Unixcharset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetUnixcharsetOk() (*string, bool) {
	if o == nil || IsNil(o.Unixcharset) {
		return nil, false
	}
	return o.Unixcharset, true
}

// HasUnixcharset returns a boolean if a field has been set.
func (o *SmbUpdate0) HasUnixcharset() bool {
	if o != nil && !IsNil(o.Unixcharset) {
		return true
	}

	return false
}

// SetUnixcharset gets a reference to the given string and assigns it to the Unixcharset field.
func (o *SmbUpdate0) SetUnixcharset(v string) {
	o.Unixcharset = &v
}

// GetLoglevel returns the Loglevel field value if set, zero value otherwise.
func (o *SmbUpdate0) GetLoglevel() string {
	if o == nil || IsNil(o.Loglevel) {
		var ret string
		return ret
	}
	return *o.Loglevel
}

// GetLoglevelOk returns a tuple with the Loglevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetLoglevelOk() (*string, bool) {
	if o == nil || IsNil(o.Loglevel) {
		return nil, false
	}
	return o.Loglevel, true
}

// HasLoglevel returns a boolean if a field has been set.
func (o *SmbUpdate0) HasLoglevel() bool {
	if o != nil && !IsNil(o.Loglevel) {
		return true
	}

	return false
}

// SetLoglevel gets a reference to the given string and assigns it to the Loglevel field.
func (o *SmbUpdate0) SetLoglevel(v string) {
	o.Loglevel = &v
}

// GetSyslog returns the Syslog field value if set, zero value otherwise.
func (o *SmbUpdate0) GetSyslog() bool {
	if o == nil || IsNil(o.Syslog) {
		var ret bool
		return ret
	}
	return *o.Syslog
}

// GetSyslogOk returns a tuple with the Syslog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetSyslogOk() (*bool, bool) {
	if o == nil || IsNil(o.Syslog) {
		return nil, false
	}
	return o.Syslog, true
}

// HasSyslog returns a boolean if a field has been set.
func (o *SmbUpdate0) HasSyslog() bool {
	if o != nil && !IsNil(o.Syslog) {
		return true
	}

	return false
}

// SetSyslog gets a reference to the given bool and assigns it to the Syslog field.
func (o *SmbUpdate0) SetSyslog(v bool) {
	o.Syslog = &v
}

// GetAaplExtensions returns the AaplExtensions field value if set, zero value otherwise.
func (o *SmbUpdate0) GetAaplExtensions() bool {
	if o == nil || IsNil(o.AaplExtensions) {
		var ret bool
		return ret
	}
	return *o.AaplExtensions
}

// GetAaplExtensionsOk returns a tuple with the AaplExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetAaplExtensionsOk() (*bool, bool) {
	if o == nil || IsNil(o.AaplExtensions) {
		return nil, false
	}
	return o.AaplExtensions, true
}

// HasAaplExtensions returns a boolean if a field has been set.
func (o *SmbUpdate0) HasAaplExtensions() bool {
	if o != nil && !IsNil(o.AaplExtensions) {
		return true
	}

	return false
}

// SetAaplExtensions gets a reference to the given bool and assigns it to the AaplExtensions field.
func (o *SmbUpdate0) SetAaplExtensions(v bool) {
	o.AaplExtensions = &v
}

// GetLocalmaster returns the Localmaster field value if set, zero value otherwise.
func (o *SmbUpdate0) GetLocalmaster() bool {
	if o == nil || IsNil(o.Localmaster) {
		var ret bool
		return ret
	}
	return *o.Localmaster
}

// GetLocalmasterOk returns a tuple with the Localmaster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetLocalmasterOk() (*bool, bool) {
	if o == nil || IsNil(o.Localmaster) {
		return nil, false
	}
	return o.Localmaster, true
}

// HasLocalmaster returns a boolean if a field has been set.
func (o *SmbUpdate0) HasLocalmaster() bool {
	if o != nil && !IsNil(o.Localmaster) {
		return true
	}

	return false
}

// SetLocalmaster gets a reference to the given bool and assigns it to the Localmaster field.
func (o *SmbUpdate0) SetLocalmaster(v bool) {
	o.Localmaster = &v
}

// GetGuest returns the Guest field value if set, zero value otherwise.
func (o *SmbUpdate0) GetGuest() string {
	if o == nil || IsNil(o.Guest) {
		var ret string
		return ret
	}
	return *o.Guest
}

// GetGuestOk returns a tuple with the Guest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetGuestOk() (*string, bool) {
	if o == nil || IsNil(o.Guest) {
		return nil, false
	}
	return o.Guest, true
}

// HasGuest returns a boolean if a field has been set.
func (o *SmbUpdate0) HasGuest() bool {
	if o != nil && !IsNil(o.Guest) {
		return true
	}

	return false
}

// SetGuest gets a reference to the given string and assigns it to the Guest field.
func (o *SmbUpdate0) SetGuest(v string) {
	o.Guest = &v
}

// GetAdminGroup returns the AdminGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbUpdate0) GetAdminGroup() string {
	if o == nil || IsNil(o.AdminGroup.Get()) {
		var ret string
		return ret
	}
	return *o.AdminGroup.Get()
}

// GetAdminGroupOk returns a tuple with the AdminGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbUpdate0) GetAdminGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminGroup.Get(), o.AdminGroup.IsSet()
}

// HasAdminGroup returns a boolean if a field has been set.
func (o *SmbUpdate0) HasAdminGroup() bool {
	if o != nil && o.AdminGroup.IsSet() {
		return true
	}

	return false
}

// SetAdminGroup gets a reference to the given NullableString and assigns it to the AdminGroup field.
func (o *SmbUpdate0) SetAdminGroup(v string) {
	o.AdminGroup.Set(&v)
}

// SetAdminGroupNil sets the value for AdminGroup to be an explicit nil
func (o *SmbUpdate0) SetAdminGroupNil() {
	o.AdminGroup.Set(nil)
}

// UnsetAdminGroup ensures that no value is present for AdminGroup, not even an explicit nil
func (o *SmbUpdate0) UnsetAdminGroup() {
	o.AdminGroup.Unset()
}

// GetFilemask returns the Filemask field value if set, zero value otherwise.
func (o *SmbUpdate0) GetFilemask() string {
	if o == nil || IsNil(o.Filemask) {
		var ret string
		return ret
	}
	return *o.Filemask
}

// GetFilemaskOk returns a tuple with the Filemask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetFilemaskOk() (*string, bool) {
	if o == nil || IsNil(o.Filemask) {
		return nil, false
	}
	return o.Filemask, true
}

// HasFilemask returns a boolean if a field has been set.
func (o *SmbUpdate0) HasFilemask() bool {
	if o != nil && !IsNil(o.Filemask) {
		return true
	}

	return false
}

// SetFilemask gets a reference to the given string and assigns it to the Filemask field.
func (o *SmbUpdate0) SetFilemask(v string) {
	o.Filemask = &v
}

// GetDirmask returns the Dirmask field value if set, zero value otherwise.
func (o *SmbUpdate0) GetDirmask() string {
	if o == nil || IsNil(o.Dirmask) {
		var ret string
		return ret
	}
	return *o.Dirmask
}

// GetDirmaskOk returns a tuple with the Dirmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetDirmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Dirmask) {
		return nil, false
	}
	return o.Dirmask, true
}

// HasDirmask returns a boolean if a field has been set.
func (o *SmbUpdate0) HasDirmask() bool {
	if o != nil && !IsNil(o.Dirmask) {
		return true
	}

	return false
}

// SetDirmask gets a reference to the given string and assigns it to the Dirmask field.
func (o *SmbUpdate0) SetDirmask(v string) {
	o.Dirmask = &v
}

// GetNtlmv1Auth returns the Ntlmv1Auth field value if set, zero value otherwise.
func (o *SmbUpdate0) GetNtlmv1Auth() bool {
	if o == nil || IsNil(o.Ntlmv1Auth) {
		var ret bool
		return ret
	}
	return *o.Ntlmv1Auth
}

// GetNtlmv1AuthOk returns a tuple with the Ntlmv1Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetNtlmv1AuthOk() (*bool, bool) {
	if o == nil || IsNil(o.Ntlmv1Auth) {
		return nil, false
	}
	return o.Ntlmv1Auth, true
}

// HasNtlmv1Auth returns a boolean if a field has been set.
func (o *SmbUpdate0) HasNtlmv1Auth() bool {
	if o != nil && !IsNil(o.Ntlmv1Auth) {
		return true
	}

	return false
}

// SetNtlmv1Auth gets a reference to the given bool and assigns it to the Ntlmv1Auth field.
func (o *SmbUpdate0) SetNtlmv1Auth(v bool) {
	o.Ntlmv1Auth = &v
}

// GetMultichannel returns the Multichannel field value if set, zero value otherwise.
func (o *SmbUpdate0) GetMultichannel() bool {
	if o == nil || IsNil(o.Multichannel) {
		var ret bool
		return ret
	}
	return *o.Multichannel
}

// GetMultichannelOk returns a tuple with the Multichannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetMultichannelOk() (*bool, bool) {
	if o == nil || IsNil(o.Multichannel) {
		return nil, false
	}
	return o.Multichannel, true
}

// HasMultichannel returns a boolean if a field has been set.
func (o *SmbUpdate0) HasMultichannel() bool {
	if o != nil && !IsNil(o.Multichannel) {
		return true
	}

	return false
}

// SetMultichannel gets a reference to the given bool and assigns it to the Multichannel field.
func (o *SmbUpdate0) SetMultichannel(v bool) {
	o.Multichannel = &v
}

// GetBindip returns the Bindip field value if set, zero value otherwise.
func (o *SmbUpdate0) GetBindip() []string {
	if o == nil || IsNil(o.Bindip) {
		var ret []string
		return ret
	}
	return o.Bindip
}

// GetBindipOk returns a tuple with the Bindip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetBindipOk() ([]string, bool) {
	if o == nil || IsNil(o.Bindip) {
		return nil, false
	}
	return o.Bindip, true
}

// HasBindip returns a boolean if a field has been set.
func (o *SmbUpdate0) HasBindip() bool {
	if o != nil && !IsNil(o.Bindip) {
		return true
	}

	return false
}

// SetBindip gets a reference to the given []string and assigns it to the Bindip field.
func (o *SmbUpdate0) SetBindip(v []string) {
	o.Bindip = v
}

// GetSmbOptions returns the SmbOptions field value if set, zero value otherwise.
func (o *SmbUpdate0) GetSmbOptions() string {
	if o == nil || IsNil(o.SmbOptions) {
		var ret string
		return ret
	}
	return *o.SmbOptions
}

// GetSmbOptionsOk returns a tuple with the SmbOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbUpdate0) GetSmbOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.SmbOptions) {
		return nil, false
	}
	return o.SmbOptions, true
}

// HasSmbOptions returns a boolean if a field has been set.
func (o *SmbUpdate0) HasSmbOptions() bool {
	if o != nil && !IsNil(o.SmbOptions) {
		return true
	}

	return false
}

// SetSmbOptions gets a reference to the given string and assigns it to the SmbOptions field.
func (o *SmbUpdate0) SetSmbOptions(v string) {
	o.SmbOptions = &v
}

func (o SmbUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Netbiosname) {
		toSerialize["netbiosname"] = o.Netbiosname
	}
	if !IsNil(o.NetbiosnameB) {
		toSerialize["netbiosname_b"] = o.NetbiosnameB
	}
	if !IsNil(o.Netbiosalias) {
		toSerialize["netbiosalias"] = o.Netbiosalias
	}
	if !IsNil(o.Workgroup) {
		toSerialize["workgroup"] = o.Workgroup
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EnableSmb1) {
		toSerialize["enable_smb1"] = o.EnableSmb1
	}
	if !IsNil(o.Unixcharset) {
		toSerialize["unixcharset"] = o.Unixcharset
	}
	if !IsNil(o.Loglevel) {
		toSerialize["loglevel"] = o.Loglevel
	}
	if !IsNil(o.Syslog) {
		toSerialize["syslog"] = o.Syslog
	}
	if !IsNil(o.AaplExtensions) {
		toSerialize["aapl_extensions"] = o.AaplExtensions
	}
	if !IsNil(o.Localmaster) {
		toSerialize["localmaster"] = o.Localmaster
	}
	if !IsNil(o.Guest) {
		toSerialize["guest"] = o.Guest
	}
	if o.AdminGroup.IsSet() {
		toSerialize["admin_group"] = o.AdminGroup.Get()
	}
	if !IsNil(o.Filemask) {
		toSerialize["filemask"] = o.Filemask
	}
	if !IsNil(o.Dirmask) {
		toSerialize["dirmask"] = o.Dirmask
	}
	if !IsNil(o.Ntlmv1Auth) {
		toSerialize["ntlmv1_auth"] = o.Ntlmv1Auth
	}
	if !IsNil(o.Multichannel) {
		toSerialize["multichannel"] = o.Multichannel
	}
	if !IsNil(o.Bindip) {
		toSerialize["bindip"] = o.Bindip
	}
	if !IsNil(o.SmbOptions) {
		toSerialize["smb_options"] = o.SmbOptions
	}
	return toSerialize, nil
}

type NullableSmbUpdate0 struct {
	value *SmbUpdate0
	isSet bool
}

func (v NullableSmbUpdate0) Get() *SmbUpdate0 {
	return v.value
}

func (v *NullableSmbUpdate0) Set(val *SmbUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbUpdate0(val *SmbUpdate0) *NullableSmbUpdate0 {
	return &NullableSmbUpdate0{value: val, isSet: true}
}

func (v NullableSmbUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
