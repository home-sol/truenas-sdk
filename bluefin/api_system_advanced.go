/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// SystemAdvancedApiService SystemAdvancedApi service
type SystemAdvancedApiService service

type ApiSystemAdvancedGetRequest struct {
	ctx        context.Context
	ApiService *SystemAdvancedApiService
}

func (r ApiSystemAdvancedGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedGetExecute(r)
}

/*
SystemAdvancedGet Method for SystemAdvancedGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedGetRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedGet(ctx context.Context) ApiSystemAdvancedGetRequest {
	return ApiSystemAdvancedGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedGetExecute(r ApiSystemAdvancedGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedPutRequest struct {
	ctx                   context.Context
	ApiService            *SystemAdvancedApiService
	systemAdvancedUpdate0 *SystemAdvancedUpdate0
}

func (r ApiSystemAdvancedPutRequest) SystemAdvancedUpdate0(systemAdvancedUpdate0 SystemAdvancedUpdate0) ApiSystemAdvancedPutRequest {
	r.systemAdvancedUpdate0 = &systemAdvancedUpdate0
	return r
}

func (r ApiSystemAdvancedPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedPutExecute(r)
}

/*
SystemAdvancedPut Method for SystemAdvancedPut

Update System Advanced Service Configuration.

`consolemenu` should be disabled if the menu at console is not desired. It will default to standard login
in the console if disabled.

`autotune` when enabled executes autotune script which attempts to optimize the system based on the installed
hardware.

When `syslogserver` is defined, logs of `sysloglevel` or above are sent.

`consolemsg` is a deprecated attribute and will be removed in further releases. Please, use `consolemsg`
attribute in the `system.general` plugin.

`isolated_gpu_pci_ids` is a list of PCI ids which are isolated from host system.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedPutRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedPut(ctx context.Context) ApiSystemAdvancedPutRequest {
	return ApiSystemAdvancedPutRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedPutExecute(r ApiSystemAdvancedPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.systemAdvancedUpdate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedSedGlobalPasswordGetRequest struct {
	ctx        context.Context
	ApiService *SystemAdvancedApiService
}

func (r ApiSystemAdvancedSedGlobalPasswordGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedSedGlobalPasswordGetExecute(r)
}

/*
SystemAdvancedSedGlobalPasswordGet Method for SystemAdvancedSedGlobalPasswordGet

Returns configured global SED password.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedSedGlobalPasswordGetRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedSedGlobalPasswordGet(ctx context.Context) ApiSystemAdvancedSedGlobalPasswordGetRequest {
	return ApiSystemAdvancedSedGlobalPasswordGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedSedGlobalPasswordGetExecute(r ApiSystemAdvancedSedGlobalPasswordGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedSedGlobalPasswordGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced/sed_global_password"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedSerialPortChoicesGetRequest struct {
	ctx        context.Context
	ApiService *SystemAdvancedApiService
}

func (r ApiSystemAdvancedSerialPortChoicesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedSerialPortChoicesGetExecute(r)
}

/*
SystemAdvancedSerialPortChoicesGet Method for SystemAdvancedSerialPortChoicesGet

Get available choices for `serialport`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedSerialPortChoicesGetRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedSerialPortChoicesGet(ctx context.Context) ApiSystemAdvancedSerialPortChoicesGetRequest {
	return ApiSystemAdvancedSerialPortChoicesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedSerialPortChoicesGetExecute(r ApiSystemAdvancedSerialPortChoicesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedSerialPortChoicesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced/serial_port_choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest struct {
	ctx        context.Context
	ApiService *SystemAdvancedApiService
}

func (r ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedSyslogCertificateAuthorityChoicesGetExecute(r)
}

/*
SystemAdvancedSyslogCertificateAuthorityChoicesGet Method for SystemAdvancedSyslogCertificateAuthorityChoicesGet

Return choices of certificate authorities which can be used for `syslog_tls_certificate_authority`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedSyslogCertificateAuthorityChoicesGet(ctx context.Context) ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest {
	return ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedSyslogCertificateAuthorityChoicesGetExecute(r ApiSystemAdvancedSyslogCertificateAuthorityChoicesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedSyslogCertificateAuthorityChoicesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced/syslog_certificate_authority_choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedSyslogCertificateChoicesGetRequest struct {
	ctx        context.Context
	ApiService *SystemAdvancedApiService
}

func (r ApiSystemAdvancedSyslogCertificateChoicesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedSyslogCertificateChoicesGetExecute(r)
}

/*
SystemAdvancedSyslogCertificateChoicesGet Method for SystemAdvancedSyslogCertificateChoicesGet

Return choices of certificates which can be used for `syslog_tls_certificate`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedSyslogCertificateChoicesGetRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedSyslogCertificateChoicesGet(ctx context.Context) ApiSystemAdvancedSyslogCertificateChoicesGetRequest {
	return ApiSystemAdvancedSyslogCertificateChoicesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedSyslogCertificateChoicesGetExecute(r ApiSystemAdvancedSyslogCertificateChoicesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedSyslogCertificateChoicesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced/syslog_certificate_choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemAdvancedUpdateGpuPciIdsPostRequest struct {
	ctx         context.Context
	ApiService  *SystemAdvancedApiService
	requestBody *[]string
}

func (r ApiSystemAdvancedUpdateGpuPciIdsPostRequest) RequestBody(requestBody []string) ApiSystemAdvancedUpdateGpuPciIdsPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiSystemAdvancedUpdateGpuPciIdsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SystemAdvancedUpdateGpuPciIdsPostExecute(r)
}

/*
SystemAdvancedUpdateGpuPciIdsPost Method for SystemAdvancedUpdateGpuPciIdsPost

`isolated_gpu_pci_ids` is a list of PCI ids which are isolated from host system.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemAdvancedUpdateGpuPciIdsPostRequest
*/
func (a *SystemAdvancedApiService) SystemAdvancedUpdateGpuPciIdsPost(ctx context.Context) ApiSystemAdvancedUpdateGpuPciIdsPostRequest {
	return ApiSystemAdvancedUpdateGpuPciIdsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SystemAdvancedApiService) SystemAdvancedUpdateGpuPciIdsPostExecute(r ApiSystemAdvancedUpdateGpuPciIdsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemAdvancedApiService.SystemAdvancedUpdateGpuPciIdsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/advanced/update_gpu_pci_ids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
