/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Dataset1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dataset1{}

// Dataset1 struct for Dataset1
type Dataset1 struct {
	Force      *bool   `json:"force,omitempty"`
	Name       *string `json:"name,omitempty"`
	Key        *string `json:"key,omitempty"`
	Passphrase *string `json:"passphrase,omitempty"`
	Recursive  *bool   `json:"recursive,omitempty"`
}

// NewDataset1 instantiates a new Dataset1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataset1() *Dataset1 {
	this := Dataset1{}
	var force bool
	this.Force = &force
	var recursive bool
	this.Recursive = &recursive
	return &this
}

// NewDataset1WithDefaults instantiates a new Dataset1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataset1WithDefaults() *Dataset1 {
	this := Dataset1{}
	var force bool
	this.Force = &force
	var recursive bool
	this.Recursive = &recursive
	return &this
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *Dataset1) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset1) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *Dataset1) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *Dataset1) SetForce(v bool) {
	o.Force = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dataset1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dataset1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dataset1) SetName(v string) {
	o.Name = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Dataset1) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset1) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Dataset1) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Dataset1) SetKey(v string) {
	o.Key = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *Dataset1) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset1) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *Dataset1) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *Dataset1) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *Dataset1) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dataset1) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *Dataset1) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *Dataset1) SetRecursive(v bool) {
	o.Recursive = &v
}

func (o Dataset1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dataset1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	return toSerialize, nil
}

type NullableDataset1 struct {
	value *Dataset1
	isSet bool
}

func (v NullableDataset1) Get() *Dataset1 {
	return v.value
}

func (v *NullableDataset1) Set(val *Dataset1) {
	v.value = val
	v.isSet = true
}

func (v NullableDataset1) IsSet() bool {
	return v.isSet
}

func (v *NullableDataset1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataset1(val *Dataset1) *NullableDataset1 {
	return &NullableDataset1{value: val, isSet: true}
}

func (v NullableDataset1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataset1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
