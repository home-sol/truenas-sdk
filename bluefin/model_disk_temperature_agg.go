/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the DiskTemperatureAgg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskTemperatureAgg{}

// DiskTemperatureAgg struct for DiskTemperatureAgg
type DiskTemperatureAgg struct {
	Names                []string `json:"names,omitempty"`
	Days                 *int32   `json:"days,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DiskTemperatureAgg DiskTemperatureAgg

// NewDiskTemperatureAgg instantiates a new DiskTemperatureAgg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskTemperatureAgg() *DiskTemperatureAgg {
	this := DiskTemperatureAgg{}
	return &this
}

// NewDiskTemperatureAggWithDefaults instantiates a new DiskTemperatureAgg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskTemperatureAggWithDefaults() *DiskTemperatureAgg {
	this := DiskTemperatureAgg{}
	return &this
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *DiskTemperatureAgg) GetNames() []string {
	if o == nil || IsNil(o.Names) {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatureAgg) GetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Names) {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *DiskTemperatureAgg) HasNames() bool {
	if o != nil && !IsNil(o.Names) {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *DiskTemperatureAgg) SetNames(v []string) {
	o.Names = v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *DiskTemperatureAgg) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatureAgg) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *DiskTemperatureAgg) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *DiskTemperatureAgg) SetDays(v int32) {
	o.Days = &v
}

func (o DiskTemperatureAgg) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskTemperatureAgg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Names) {
		toSerialize["names"] = o.Names
	}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskTemperatureAgg) UnmarshalJSON(bytes []byte) (err error) {
	varDiskTemperatureAgg := _DiskTemperatureAgg{}

	if err = json.Unmarshal(bytes, &varDiskTemperatureAgg); err == nil {
		*o = DiskTemperatureAgg(varDiskTemperatureAgg)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "names")
		delete(additionalProperties, "days")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskTemperatureAgg struct {
	value *DiskTemperatureAgg
	isSet bool
}

func (v NullableDiskTemperatureAgg) Get() *DiskTemperatureAgg {
	return v.value
}

func (v *NullableDiskTemperatureAgg) Set(val *DiskTemperatureAgg) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTemperatureAgg) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTemperatureAgg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTemperatureAgg(val *DiskTemperatureAgg) *NullableDiskTemperatureAgg {
	return &NullableDiskTemperatureAgg{value: val, isSet: true}
}

func (v NullableDiskTemperatureAgg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTemperatureAgg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
