/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// CoreDebug0 the model 'CoreDebug0'
type CoreDebug0 string

// List of core_debug_0
const (
	PTVS       CoreDebug0 = "PTVS"
	PYDEV      CoreDebug0 = "PYDEV"
	REMOTE_PDB CoreDebug0 = "REMOTE_PDB"
)

// All allowed values of CoreDebug0 enum
var AllowedCoreDebug0EnumValues = []CoreDebug0{
	"PTVS",
	"PYDEV",
	"REMOTE_PDB",
}

func (v *CoreDebug0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CoreDebug0(value)
	for _, existing := range AllowedCoreDebug0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CoreDebug0", value)
}

// NewCoreDebug0FromValue returns a pointer to a valid CoreDebug0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCoreDebug0FromValue(v string) (*CoreDebug0, error) {
	ev := CoreDebug0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CoreDebug0: valid values are %v", v, AllowedCoreDebug0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CoreDebug0) IsValid() bool {
	for _, existing := range AllowedCoreDebug0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to core_debug_0 value
func (v CoreDebug0) Ptr() *CoreDebug0 {
	return &v
}

type NullableCoreDebug0 struct {
	value *CoreDebug0
	isSet bool
}

func (v NullableCoreDebug0) Get() *CoreDebug0 {
	return v.value
}

func (v *NullableCoreDebug0) Set(val *CoreDebug0) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDebug0) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDebug0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDebug0(val *CoreDebug0) *NullableCoreDebug0 {
	return &NullableCoreDebug0{value: val, isSet: true}
}

func (v NullableCoreDebug0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDebug0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
