{
  "openapi": "3.0.0",
  "info": {
    "title": "TrueNAS RESTful API",
    "version": "v2.0"
  },
  "paths": {
    "/core/bulk": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Will sequentially call `method` with arguments from the `params` list. For example, running\n\n    call(\"core.bulk\", \"zfs.snapshot.delete\", [[\"tank@snap-1\", true], [\"tank@snap-2\", false]])\n\nwill call\n\n    call(\"zfs.snapshot.delete\", \"tank@snap-1\", true)\n    call(\"zfs.snapshot.delete\", \"tank@snap-2\", false)\n\nIf the first call fails and the seconds succeeds (returning `true`), the result of the overall call will be:\n\n    [\n        {\"result\": null, \"error\": \"Error deleting snapshot\"},\n        {\"result\": true, \"error\": null}\n    ]\n\nImportant note: the execution status of `core.bulk` will always be a `SUCCESS` (unless an unlikely internal\nerror occurs). Caller must check for individual call results to ensure the absence of any call errors.\n\n`description` contains format string for job progress (e.g. \"Deleting snapshot {0[dataset]}@{0[name]}\")",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_bulk"
              }
            }
          }
        }
      }
    },
    "/core/debug": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Setup middlewared for remote debugging.\n\nengines:\n  - PTVS: Python Visual Studio\n  - PYDEV: Python Dev (Eclipse/PyCharm)\n  - REMOTE_PDB: Remote vanilla PDB (over TCP sockets)\n\noptions:\n  - secret: password for PTVS\n  - host: required for PYDEV, hostname of local computer (developer workstation)\n  - local_path: required for PYDEV, path for middlewared source in local computer\n                (e.g. /home/user/freenas/src/middlewared/middlewared\n  - threaded: run debugger in a new thread instead of event loop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_debug"
              }
            }
          }
        }
      }
    },
    "/core/debug_mode_enabled": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      }
    },
    "/core/download": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Core helper to call a job marked for download.\n\nNon-`buffered` downloads will allow job to write to pipe as soon as download URL is requested, job will stay\nblocked meanwhile. `buffered` downloads must wait for job to complete before requesting download URL, job's\npipe output will be buffered to ramfs.\n\nReturns the job id and the URL for download.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_download"
              }
            }
          }
        }
      }
    },
    "/core/get_events": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns metadata for every possible event emitted from websocket server."
      }
    },
    "/core/get_jobs": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get the long running jobs.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/core/get_websocket_messages": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve last 1000 incoming/outgoing message(s) logged over websocket."
      }
    },
    "/core/job_abort": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_job_abort_0"
              }
            }
          }
        }
      }
    },
    "/core/job_update": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_job_update"
              }
            }
          }
        }
      }
    },
    "/core/job_wait": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_job_wait_0"
              }
            }
          }
        }
      }
    },
    "/core/ping": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Utility method which just returns \"pong\".\nCan be used to keep connection/authtoken alive instead of using\n\"ping\" protocol message."
      }
    },
    "/core/ping_remote": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Method that will send an ICMP echo request to \"hostname\"\nand will wait up to \"timeout\" for a reply.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_ping_remote_0"
              }
            }
          }
        }
      }
    },
    "/core/resize_shell": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Resize terminal session (/websocket/shell) to cols x rows",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_resize_shell"
              }
            }
          }
        }
      }
    },
    "/core/sessions": {
      "get": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get currently open websocket sessions.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/core/set_debug_mode": {
      "post": {
        "tags": [
          "core"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set `debug_mode` for middleware.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core_set_debug_mode_0"
              }
            }
          }
        }
      }
    },
    "/acme/dns/authenticator": {
      "get": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a DNS Authenticator\n\nCreate a specific DNS Authenticator containing required authentication details for the said\nprovider to successfully connect with it\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/acme_dns_authenticator_create_0"
              }
            }
          }
        }
      }
    },
    "/acme/dns/authenticator/id/{id}": {
      "delete": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete DNS Authenticator of `id`\n\n"
      },
      "get": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update DNS Authenticator of `id`\n\n"
      }
    },
    "/acme/dns/authenticator/authenticator_schemas": {
      "get": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the schemas for all DNS providers we support for ACME DNS Challenge and the respective attributes\nrequired for connecting to them while validating a DNS Challenge"
      }
    },
    "/acme/dns/authenticator/get_instance": {
      "post": {
        "tags": [
          "acme.dns.authenticator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/acme_dns_authenticator_get_instance"
              }
            }
          }
        }
      }
    },
    "/activedirectory": {
      "get": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update active directory configuration.\n`domainname` full DNS domain name of the Active Directory domain.\n\n`bindname` username used to perform the intial domain join.\n\n`bindpw` password used to perform the initial domain join. User-\nprovided credentials are used to obtain a kerberos ticket, which\nis used to perform the actual domain join.\n\n`verbose_logging` increase logging during the domain join process.\n\n`use_default_domain` controls whether domain users and groups have\nthe pre-windows 2000 domain name prepended to the user account. When\nenabled, the user appears as \"administrator\" rather than\n\"EXAMPLE\u0007dministrator\"\n\n`allow_trusted_doms` enable support for trusted domains. If this\nparameter is enabled, then separate idmap backends _must_ be configured\nfor each trusted domain, and the idmap cache should be cleared.\n\n`allow_dns_updates` during the domain join process, automatically\ngenerate DNS entries in the AD domain for the NAS. If this is disabled,\nthen a domain administrator must manually add appropriate DNS entries\nfor the NAS. This parameter is recommended for TrueNAS HA servers.\n\n`disable_freenas_cache` disables active caching of AD users and groups.\nWhen disabled, only users cached in winbind's internal cache are\nvisible in GUI dropdowns. Disabling active caching is recommended\nin environments with a large amount of users.\n\n`site` AD site of which the NAS is a member. This parameter is auto-\ndetected during the domain join process. If no AD site is configured\nfor the subnet in which the NAS is configured, then this parameter\nappears as 'Default-First-Site-Name'. Auto-detection is only performed\nduring the initial domain join.\n\n`kerberos_realm` in which the server is located. This parameter is\nautomatically populated during the initial domain join. If the NAS has\nan AD site configured and that site has multiple kerberos servers, then\nthe kerberos realm is automatically updated with a site-specific\nconfiguration to use those servers. Auto-detection is only performed\nduring initial domain join.\n\n`kerberos_principal` kerberos principal to use for AD-related\noperations outside of Samba. After intial domain join, this field is\nupdated with the kerberos principal associated with the AD machine\naccount for the NAS.\n\n`nss_info` controls how Winbind retrieves Name Service Information to\nconstruct a user's home directory and login shell. This parameter\nis only effective if the Active Directory Domain Controller supports\nthe Microsoft Services for Unix (SFU) LDAP schema.\n\n`timeout` timeout value for winbind-related operations. This value may\nneed to be increased in  environments with high latencies for\ncommunications with domain controllers or a large number of domain\ncontrollers. Lowering the value may cause status checks to fail.\n\n`dns_timeout` timeout value for DNS queries during the initial domain\njoin. This value is also set as the NETWORK_TIMEOUT in the ldap config\nfile.\n\n`createcomputer` Active Directory Organizational Unit in which new\ncomputer accounts are created.\n\nThe OU string is read from top to bottom without RDNs. Slashes (\"/\")\nare used as delimiters, like `Computers/Servers/NAS`. The backslash\n(\"\\\") is used to escape characters but not as a separator. Backslashes\nare interpreted at multiple levels and might require doubling or even\nquadrupling to take effect.\n\nWhen this field is blank, new computer accounts are created in the\nActive Directory default OU.\n\nThe Active Directory service is started after a configuration\nupdate if the service was initially disabled, and the updated\nconfiguration sets `enable` to `True`. The Active Directory\nservice is stopped if `enable` is changed to `False`. If the\nconfiguration is updated, but the initial `enable` state is `True`, and\nremains unchanged, then the samba server is only restarted.\n\nDuring the domain join, a kerberos keytab for the newly-created AD\nmachine account is generated. It is used for all future\nLDAP / AD interaction and the user-provided credentials are removed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activedirectory_update_0"
              }
            }
          }
        }
      }
    },
    "/activedirectory/domain_info": {
      "post": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the following information about the currently joined domain:\n\n`LDAP server` IP address of current LDAP server to which TrueNAS is connected.\n\n`LDAP server name` DNS name of LDAP server to which TrueNAS is connected\n\n`Realm` Kerberos realm\n\n`LDAP port`\n\n`Server time` timestamp.\n\n`KDC server` Kerberos KDC to which TrueNAS is connected\n\n`Server time offset` current time offset from DC.\n\n`Last machine account password change`. timestamp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activedirectory_domain_info_0"
              }
            }
          }
        }
      }
    },
    "/activedirectory/get_state": {
      "get": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Wrapper function for 'directoryservices.get_state'. Returns only the state of the\nActive Directory service."
      }
    },
    "/activedirectory/leave": {
      "post": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Leave Active Directory domain. This will remove computer\nobject from AD and clear relevant configuration data from\nthe NAS.\nThis requires credentials for appropriately-privileged user.\nCredentials are used to obtain a kerberos ticket, which is\nused to perform the actual removal from the domain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/activedirectory_leave_0"
              }
            }
          }
        }
      }
    },
    "/activedirectory/nss_info_choices": {
      "get": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns list of available LDAP schema choices."
      }
    },
    "/activedirectory/started": {
      "get": {
        "tags": [
          "activedirectory"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Issue a no-effect command to our DC. This checks if our secure channel connection to our\ndomain controller is still alive. It has much less impact than wbinfo -t.\nDefault winbind request timeout is 60 seconds, and can be adjusted by the smb4.conf parameter\n'winbind request timeout ='"
      }
    },
    "/alert/dismiss": {
      "post": {
        "tags": [
          "alert"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Dismiss `id` alert.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alert_dismiss_0"
              }
            }
          }
        }
      }
    },
    "/alert/list": {
      "get": {
        "tags": [
          "alert"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List all types of alerts including active/dismissed currently in the system."
      }
    },
    "/alert/list_categories": {
      "get": {
        "tags": [
          "alert"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List all types of alerts which the system can issue."
      }
    },
    "/alert/list_policies": {
      "get": {
        "tags": [
          "alert"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List all alert policies which indicate the frequency of the alerts."
      }
    },
    "/alert/restore": {
      "post": {
        "tags": [
          "alert"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restore `id` alert which had been dismissed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alert_restore_0"
              }
            }
          }
        }
      }
    },
    "/alertclasses": {
      "get": {
        "tags": [
          "alertclasses"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "alertclasses"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update default Alert settings.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alertclasses_update_0"
              }
            }
          }
        }
      }
    },
    "/alertservice": {
      "get": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an Alert Service of specified `type`.\n\nIf `enabled`, it sends alerts to the configured `type` of Alert Service.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alertservice_create_0"
              }
            }
          }
        }
      }
    },
    "/alertservice/id/{id}": {
      "delete": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Alert Service of `id`."
      },
      "get": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Alert Service of `id`."
      }
    },
    "/alertservice/get_instance": {
      "post": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alertservice_get_instance"
              }
            }
          }
        }
      }
    },
    "/alertservice/list_types": {
      "get": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List all types of supported Alert services which can be configured with the system."
      }
    },
    "/alertservice/test": {
      "post": {
        "tags": [
          "alertservice"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Send a test alert using `type` of Alert Service.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alertservice_test_0"
              }
            }
          }
        }
      }
    },
    "/api_key": {
      "get": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates API Key.\n\n`name` is a user-readable name for key.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api_key_create_0"
              }
            }
          }
        }
      }
    },
    "/api_key/id/{id}": {
      "delete": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete API Key `id`."
      },
      "get": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update API Key `id`.\n\nSpecify `reset: true` to reset this API Key."
      }
    },
    "/api_key/get_instance": {
      "post": {
        "tags": [
          "api_key"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/api_key_get_instance"
              }
            }
          }
        }
      }
    },
    "/auth/check_password": {
      "post": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Verify username and password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_check_password"
              }
            }
          }
        }
      }
    },
    "/auth/check_user": {
      "post": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Verify username and password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_check_user"
              }
            }
          }
        }
      }
    },
    "/auth/generate_token": {
      "post": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Generate a token to be used for authentication.\n\n`ttl` stands for Time To Live, in seconds. The token will be invalidated if the connection\nhas been inactive for a time greater than this.\n\n`attrs` is a general purpose object/dictionary to hold information about the token.\n\n`match_origin` will only allow using this token from the same IP address or with the same user UID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_generate_token"
              }
            }
          }
        }
      }
    },
    "/auth/terminate_session": {
      "post": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Terminates session `id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_terminate_session_0"
              }
            }
          }
        }
      }
    },
    "/auth/two_factor_auth": {
      "get": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns true if two factor authorization is required for authorizing user's login."
      }
    },
    "/auth/twofactor": {
      "get": {
        "tags": [
          "auth.twofactor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "auth.twofactor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`otp_digits` represents number of allowed digits in the OTP.\n\n`window` extends the validity to `window` many counter ticks before and after the current one.\n\n`interval` is time duration in seconds specifying OTP expiration time from it's creation time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_twofactor_update_0"
              }
            }
          }
        }
      }
    },
    "/auth/twofactor/provisioning_uri": {
      "get": {
        "tags": [
          "auth.twofactor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the provisioning URI for the OTP. This can then be encoded in a QR Code and used to\nprovision an OTP app like Google Authenticator."
      }
    },
    "/auth/twofactor/renew_secret": {
      "get": {
        "tags": [
          "auth.twofactor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Generates a new secret for Two Factor Authentication. Returns boolean true on success."
      }
    },
    "/auth/twofactor/verify": {
      "post": {
        "tags": [
          "auth.twofactor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns boolean true if provided `token` is successfully authenticated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth_twofactor_verify_0"
              }
            }
          }
        }
      }
    },
    "/boot/attach": {
      "post": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Attach a disk to the boot pool, turning a stripe into a mirror.\n\n`expand` option will determine whether the new disk partition will be\n         the maximum available or the same size as the current disk.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/boot_attach"
              }
            }
          }
        }
      }
    },
    "/boot/detach": {
      "post": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Detach given `dev` from boot pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/boot_detach_0"
              }
            }
          }
        }
      }
    },
    "/boot/get_disks": {
      "get": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns disks of the boot pool."
      }
    },
    "/boot/get_scrub_interval": {
      "get": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get Automatic Scrub Interval value in days."
      }
    },
    "/boot/get_state": {
      "get": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the current state of the boot pool, including all vdevs, properties and datasets."
      }
    },
    "/boot/replace": {
      "post": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Replace device `label` on boot pool with `dev`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/boot_replace"
              }
            }
          }
        }
      }
    },
    "/boot/scrub": {
      "get": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Scrub on boot pool."
      }
    },
    "/boot/set_scrub_interval": {
      "post": {
        "tags": [
          "boot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set Automatic Scrub Interval value in days.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/boot_set_scrub_interval_0"
              }
            }
          }
        }
      }
    },
    "/bootenv": {
      "get": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all Boot Environments with `query-filters` and `query-options`.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new boot environment using `name`.\n\nIf a new boot environment is desired which is a clone of another boot environment, `source` can be passed.\nThen, a new boot environment of `name` is created using boot environment `source` by cloning it.\n\nEnsure that `name` and `source` are valid boot environment names.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bootenv_create_0"
              }
            }
          }
        }
      }
    },
    "/bootenv/id/{id}": {
      "delete": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete `id` boot environment. This removes the clone from the system."
      },
      "get": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all Boot Environments with `query-filters` and `query-options`.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update `id` boot environment name with a new provided valid `name`."
      }
    },
    "/bootenv/id/{id}/activate": {
      "post": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Activates boot environment `id`."
      }
    },
    "/bootenv/get_instance": {
      "post": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bootenv_get_instance"
              }
            }
          }
        }
      }
    },
    "/bootenv/id/{id}/set_attribute": {
      "post": {
        "tags": [
          "bootenv"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Sets attributes boot environment `id`.\n\nCurrently only `keep` attribute is allowed."
      }
    },
    "/catalog": {
      "get": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`catalog_create.preferred_trains` specifies trains which will be displayed in the UI directly for a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_create_0"
              }
            }
          }
        }
      }
    },
    "/catalog/id/{id}": {
      "delete": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": ""
      },
      "get": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": ""
      }
    },
    "/catalog/get_instance": {
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_get_instance"
              }
            }
          }
        }
      }
    },
    "/catalog/get_item_details": {
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve information of `item_name` `item_version_details.catalog` catalog item.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_get_item_details"
              }
            }
          }
        }
      }
    },
    "/catalog/items": {
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve item details for `label` catalog.\n\n`options.cache` is a boolean which when set will try to get items details for `label` catalog from cache\nif available.\n\n`options.cache_only` is a boolean which when set will force usage of cache only for retrieving catalog\ninformation. If the content for the catalog in question is not cached, no content would be returned. If\n`options.cache` is unset, this attribute has no effect.\n\n`options.retrieve_all_trains` is a boolean value which when set will retrieve information for all the trains\npresent in the catalog ( it is set by default ).\n\n`options.trains` is a list of train name(s) which will allow selective filtering to retrieve only information\nof desired trains in a catalog. If `options.retrieve_all_trains` is set, it has precedence over `options.train`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_items"
              }
            }
          }
        }
      }
    },
    "/catalog/sync": {
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sync `label` catalog to retrieve latest changes from upstream.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_sync_0"
              }
            }
          }
        }
      }
    },
    "/catalog/sync_all": {
      "get": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Refresh all available catalogs from upstream."
      }
    },
    "/catalog/validate": {
      "post": {
        "tags": [
          "catalog"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Validates `label` catalog format which includes validating trains and applications with their versions.\n\nThis does not test if an app version is valid in terms of kubernetes resources but instead ensures it has\nthe correct format and files necessary for TrueNAS to use it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/catalog_validate_0"
              }
            }
          }
        }
      }
    },
    "/certificate": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new Certificate\n\nCertificates are classified under following types and the necessary keywords to be passed\nfor `create_type` attribute to create the respective type of certificate\n\n1) Internal Certificate                 -  CERTIFICATE_CREATE_INTERNAL\n\n2) Imported Certificate                 -  CERTIFICATE_CREATE_IMPORTED\n\n3) Certificate Signing Request          -  CERTIFICATE_CREATE_CSR\n\n4) Imported Certificate Signing Request -  CERTIFICATE_CREATE_IMPORTED_CSR\n\n5) ACME Certificate                     -  CERTIFICATE_CREATE_ACME\n\nBy default, created certs use RSA keys. If an Elliptic Curve Key is desired, it can be specified with the\n`key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, then default to\nusing \"BrainpoolP384R1\" curve.\n\nA type is selected by the Certificate Service based on `create_type`. The rest of the values in `data` are\nvalidated accordingly and finally a certificate is made based on the selected type.\n\n`cert_extensions` can be specified to set X509v3 extensions.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificate_create_0"
              }
            }
          }
        }
      }
    },
    "/certificate/id/{id}": {
      "delete": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete certificate of `id`.\n\nIf the certificate is an ACME based certificate, certificate service will try to\nrevoke the certificate by updating it's status with the ACME server, if it fails an exception is raised\nand the certificate is not deleted from the system. However, if `force` is set to True, certificate is deleted\nfrom the system even if some error occurred while revoking the certificate with the ACME Server\n\n"
      },
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update certificate of `id`\n\nOnly name and revoked attribute can be updated.\n\nWhen `revoked` is enabled, the specified cert `id` is revoked and if it belongs to a CA chain which\nexists on this system, its serial number is added to the CA's certificate revocation list.\n\n"
      }
    },
    "/certificate/acme_server_choices": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Dictionary of popular ACME Servers with their directory URI endpoints which we display automatically\nin UI"
      }
    },
    "/certificate/certificate_signing_requests_profiles": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of predefined options for specific use cases i.e openvpn client/server\nconfigurations which can be used for creating certificate signing requests."
      }
    },
    "/certificate/country_choices": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns country choices for creating a certificate/csr."
      }
    },
    "/certificate/ec_curve_choices": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Dictionary of supported EC curves."
      }
    },
    "/certificate/extended_key_usage_choices": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Dictionary of choices for `ExtendedKeyUsage` extension which can be passed over to `usages` attribute."
      }
    },
    "/certificate/get_instance": {
      "post": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificate_get_instance"
              }
            }
          }
        }
      }
    },
    "/certificate/key_type_choices": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Dictionary of supported key types for certificates."
      }
    },
    "/certificate/profiles": {
      "get": {
        "tags": [
          "certificate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of predefined options for specific use cases i.e openvpn client/server\nconfigurations which can be used for creating certificates."
      }
    },
    "/certificateauthority": {
      "get": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new Certificate Authority\n\nCertificate Authorities are classified under following types with the necessary keywords to be passed\nfor `create_type` attribute to create the respective type of certificate authority\n\n1) Internal Certificate Authority       -  CA_CREATE_INTERNAL\n\n2) Imported Certificate Authority       -  CA_CREATE_IMPORTED\n\n3) Intermediate Certificate Authority   -  CA_CREATE_INTERMEDIATE\n\nCreated certificate authorities use RSA keys by default. If an Elliptic Curve Key is desired, then it can be\nspecified with the `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic\nCurve Key, default to using \"BrainpoolP384R1\" curve.\n\nA type is selected by the Certificate Authority Service based on `create_type`. The rest of the values\nare validated accordingly and finally a certificate is made based on the selected type.\n\n`cert_extensions` can be specified to set X509v3 extensions.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificateauthority_create_0"
              }
            }
          }
        }
      }
    },
    "/certificateauthority/id/{id}": {
      "delete": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a Certificate Authority of `id`\n\n"
      },
      "get": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Certificate Authority of `id`\n\nOnly `name` and `revoked` attribute can be updated.\n\nIf `revoked` is enabled, the CA and its complete chain is marked as revoked and added to the CA's\ncertificate revocation list.\n\n"
      }
    },
    "/certificateauthority/ca_sign_csr": {
      "post": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sign CSR by Certificate Authority of `ca_id`\n\nSign CSR's and generate a certificate from it. `ca_id` provides which CA is to be used for signing\na CSR of `csr_cert_id` which exists in the system\n\n`cert_extensions` can be specified if specific extensions are to be set in the newly signed certificate.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificateauthority_ca_sign_csr_0"
              }
            }
          }
        }
      }
    },
    "/certificateauthority/get_instance": {
      "post": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/certificateauthority_get_instance"
              }
            }
          }
        }
      }
    },
    "/certificateauthority/profiles": {
      "get": {
        "tags": [
          "certificateauthority"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of predefined options for specific use cases i.e OpenVPN certificate authority\nconfigurations which can be used for creating certificate authorities."
      }
    },
    "/chart/release": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query available chart releases.\n\n`query-options.extra.retrieve_resources` is a boolean when set will retrieve existing kubernetes resources\nin the chart namespace.\n\n`query-options.extra.history` is a boolean when set will retrieve all chart version upgrades\nfor a chart release.\n\n`query-options.extra.include_chart_schema` is a boolean when set will retrieve the schema being used by\nthe chart release in question.\n\n`query-options.extra.resource_events` is a boolean when set will retrieve individual events of each resource.\nThis only has effect if `query-options.extra.retrieve_resources` is set.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a chart release for a catalog item.\n\n`release_name` is the name which will be used to identify the created chart release.\n\n`catalog` is a valid catalog id where system will look for catalog `item` details.\n\n`train` is which train to look for under `catalog` i.e stable / testing etc.\n\n`version` specifies the catalog `item` version.\n\n`values` is configuration specified for the catalog item version in question which will be used to\ncreate the chart release.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_create_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/id/{id}": {
      "delete": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete existing chart release.\n\nThis will delete the chart release from the kubernetes cluster and also remove any associated volumes / data.\nTo clarify, host path volumes will not be deleted which live outside the chart release dataset."
      },
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query available chart releases.\n\n`query-options.extra.retrieve_resources` is a boolean when set will retrieve existing kubernetes resources\nin the chart namespace.\n\n`query-options.extra.history` is a boolean when set will retrieve all chart version upgrades\nfor a chart release.\n\n`query-options.extra.include_chart_schema` is a boolean when set will retrieve the schema being used by\nthe chart release in question.\n\n`query-options.extra.resource_events` is a boolean when set will retrieve individual events of each resource.\nThis only has effect if `query-options.extra.retrieve_resources` is set.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update an existing chart release.\n\n`values` is configuration specified for the catalog item version in question which will be used to\ncreate the chart release."
      }
    },
    "/chart/release/certificate_authority_choices": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns certificate authorities which can be used by applications."
      }
    },
    "/chart/release/certificate_choices": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns certificates which can be used by applications."
      }
    },
    "/chart/release/events": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns kubernetes events for `release_name` Chart Release.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_events_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/get_chart_releases_using_chart_release_images": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve chart releases which are consuming any images in use by `chart_release_name`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_get_chart_releases_using_chart_release_images_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/get_instance": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_get_instance"
              }
            }
          }
        }
      }
    },
    "/chart/release/nic_choices": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for NIC which can be added to a pod in a chart release."
      }
    },
    "/chart/release/pod_console_choices": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns choices for console access to a chart release.\n\nOutput is a dictionary with names of pods as keys and containing names of containers which the pod\ncomprises of.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_pod_console_choices_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/pod_logs": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Export logs of `options.container_name` container in `options.pod_name` pod in `release_name` chart release.\n\n`options.tail_lines` is an option to select how many lines of logs to retrieve for the said container. It\ndefaults to 500. If set to `null`, it will retrieve complete logs of the container.\n\n`options.limit_bytes` is an option to select how many bytes to retrieve from the tail lines selected. If set\nto null ( which is the default ), it will not limit the bytes returned. To clarify, `options.tail_lines`\nis applied first and the required number of lines are retrieved and then `options.limit_bytes` is applied.\n\nPlease refer to websocket documentation for downloading the file.\n\nA file will be downloaded from this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_pod_logs"
              }
            }
          }
        }
      }
    },
    "/chart/release/pod_logs_choices": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns choices for accessing logs of any container in any pod in a chart release.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_pod_logs_choices_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/pod_status": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve available/desired pods status for a chart release and it's current state.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_pod_status_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/pull_container_images": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update container images being used by `release_name` chart release.\n\n`redeploy` when set will redeploy pods which will result in chart release using newer updated versions of\nthe container images.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_pull_container_images"
              }
            }
          }
        }
      }
    },
    "/chart/release/redeploy": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Redeploy will initiate a new rollout of the Helm chart according to upgrade strategy defined by the chart\nrelease workloads. A good example for redeploying is updating kubernetes pods with an updated container image.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_redeploy_0"
              }
            }
          }
        }
      }
    },
    "/chart/release/remove_ix_volume": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Remove `volume_name` ix_volume from `release_name` chart release.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_remove_ix_volume"
              }
            }
          }
        }
      }
    },
    "/chart/release/rollback": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Rollback a chart release to a previous chart version.\n\n`item_version` is version which we want to rollback a chart release to.\n\n`rollback_snapshot` is a boolean value which when set will rollback snapshots of any PVC's or ix volumes being\nconsumed by the chart release.\n\n`force_rollback` is a boolean which when set will force rollback operation to move forward even if no\nsnapshots are found. This is only useful when `rollback_snapshot` is set.\n\n`recreate_resources` is a boolean which will delete and then create the kubernetes resources on rollback\nof chart release. This should be used with caution as if chart release is consuming immutable objects like\na PVC, the rollback operation can't be performed and will fail as helm tries to do a 3 way patch for rollback.\n\nRollback is functional for the actual configuration of the release at the `item_version` specified and\nany associated `ix_volumes` with any PVC's which were consuming chart release storage class.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_rollback"
              }
            }
          }
        }
      }
    },
    "/chart/release/scale": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Scale a `release_name` chart release to `scale_options.replica_count` specified.\n\nThis will scale deployments/statefulset to replica count specified.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_scale"
              }
            }
          }
        }
      }
    },
    "/chart/release/scale_workloads": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Scale workloads in a chart release to specified `replica_count`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_scale_workloads"
              }
            }
          }
        }
      }
    },
    "/chart/release/scaleable_resources": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns choices for types of workloads which can be scaled up/down."
      }
    },
    "/chart/release/upgrade": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Upgrade `release_name` chart release.\n\n`upgrade_options.item_version` specifies to which item version chart release should be upgraded to.\n\nSystem will update container images being used by `release_name` chart release as a chart release\nupgrade is not considered complete until the images in use have also been updated to latest versions.\n\nDuring upgrade, `upgrade_options.values` can be specified to apply configuration changes for configuration\nchanges for the chart release in question.\n\nWhen chart version is upgraded, system will automatically take a snapshot of `ix_volumes` in question\nwhich can be used to rollback later on.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_upgrade"
              }
            }
          }
        }
      }
    },
    "/chart/release/upgrade_summary": {
      "post": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve upgrade summary for `release_name` which will include which container images will be updated\nand changelog for `options.item_version` chart version specified if applicable. If only container images\nneed to be updated, changelog will be `null`.\n\nIf chart release `release_name` does not require an upgrade, an error will be raised.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chart_release_upgrade_summary"
              }
            }
          }
        }
      }
    },
    "/chart/release/used_ports": {
      "get": {
        "tags": [
          "chart.release"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns ports in use by applications."
      }
    },
    "/cloudsync": {
      "get": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a new cloud_sync entry.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_create_0"
              }
            }
          }
        }
      }
    },
    "/cloudsync/id/{id}": {
      "delete": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Deletes cloud_sync entry `id`."
      },
      "get": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Updates the cloud_sync entry `id` with `data`."
      }
    },
    "/cloudsync/id/{id}/abort": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Aborts cloud sync task."
      }
    },
    "/cloudsync/create_bucket": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a new bucket `name` using ` credentials_id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_create_bucket"
              }
            }
          }
        }
      }
    },
    "/cloudsync/get_instance": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_get_instance"
              }
            }
          }
        }
      }
    },
    "/cloudsync/list_buckets": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_list_buckets_0"
              }
            }
          }
        }
      }
    },
    "/cloudsync/list_directory": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List contents of a remote bucket / directory.\n\nIf remote supports buckets, path is constructed by two keys \"bucket\"/\"folder\" in `attributes`.\nIf remote does not support buckets, path is constructed using \"folder\" key only in `attributes`.\n\"folder\" is directory name and \"bucket\" is bucket name for remote.\n\nPath examples:\n\nS3 Service\n`bucketname/directory/name`\n\nDropbox Service\n`directory/name`\n\n`credentials` is a valid id of a Cloud Sync Credential which will be used to connect to the provider.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_list_directory_0"
              }
            }
          }
        }
      }
    },
    "/cloudsync/onedrive_list_drives": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Lists all available drives and their types for given Microsoft OneDrive credentials.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_onedrive_list_drives_0"
              }
            }
          }
        }
      }
    },
    "/cloudsync/providers": {
      "get": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a list of dictionaries of supported providers for Cloud Sync Tasks.\n\n`credentials_schema` is JSON schema for credentials attributes.\n\n`task_schema` is JSON schema for task attributes.\n\n`buckets` is a boolean value which is set to \"true\" if provider supports buckets.\n\nExample of a single provider:\n\n[\n    {\n        \"name\": \"AMAZON_CLOUD_DRIVE\",\n        \"title\": \"Amazon Cloud Drive\",\n        \"credentials_schema\": [\n            {\n                \"property\": \"client_id\",\n                \"schema\": {\n                    \"title\": \"Amazon Application Client ID\",\n                    \"_required_\": true,\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"property\": \"client_secret\",\n                \"schema\": {\n                    \"title\": \"Application Key\",\n                    \"_required_\": true,\n                    \"type\": \"string\"\n                }\n            }\n        ],\n        \"credentials_oauth\": null,\n        \"buckets\": false,\n        \"bucket_title\": \"Bucket\",\n        \"task_schema\": []\n    }\n]"
      }
    },
    "/cloudsync/id/{id}/restore": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Create the opposite of cloud sync task `id` (PULL if it was PUSH and vice versa)."
      }
    },
    "/cloudsync/id/{id}/sync": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Run the cloud_sync job `id`, syncing the local data to remote."
      }
    },
    "/cloudsync/sync_onetime": {
      "post": {
        "tags": [
          "cloudsync"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Run cloud sync task without creating it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_sync_onetime"
              }
            }
          }
        }
      }
    },
    "/cloudsync/credentials": {
      "get": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create Cloud Sync Credentials.\n\n`attributes` is a dictionary of valid values which will be used to authorize with the `provider`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_credentials_create_0"
              }
            }
          }
        }
      }
    },
    "/cloudsync/credentials/id/{id}": {
      "delete": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Cloud Sync Credentials of `id`."
      },
      "get": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Cloud Sync Credentials of `id`."
      }
    },
    "/cloudsync/credentials/get_instance": {
      "post": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_credentials_get_instance"
              }
            }
          }
        }
      }
    },
    "/cloudsync/credentials/verify": {
      "post": {
        "tags": [
          "cloudsync.credentials"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Verify if `attributes` provided for `provider` are authorized by the `provider`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloudsync_credentials_verify_0"
              }
            }
          }
        }
      }
    },
    "/cluster/utils/is_clustered": {
      "get": {
        "tags": [
          "cluster.utils"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a boolean value on whether this system is clustered.\n`True` means this system is clustered\n`False` means this system is not clustered."
      }
    },
    "/config/reset": {
      "post": {
        "tags": [
          "config"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Reset database to configuration defaults.\n\nIf `reboot` is true this job will reboot the system after its completed with a delay of 10\nseconds.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/config_reset_0"
              }
            }
          }
        }
      }
    },
    "/config/save": {
      "post": {
        "tags": [
          "config"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a tar file of security-sensitive information. These options select which information\nis included in the tar file:\n\n`secretseed` bool: When true, include password secret seed.\n`pool_keys` bool: IGNORED and DEPRECATED as it does not apply on SCALE systems.\n`root_authorized_keys` bool: When true, include \"/root/.ssh/authorized_keys\" file for the root user.\n`gluster_config` bool: When true, include the directory that stores the gluster configuration files.\n\nIf none of these options are set, the tar file is not generated and the database file is returned.\n\nA file will be downloaded from this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/config_save_0"
              }
            }
          }
        }
      }
    },
    "/config/upload": {
      "post": {
        "tags": [
          "config"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Accepts a configuration file via job pipe.\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file."
      }
    },
    "/container": {
      "get": {
        "tags": [
          "container"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "container"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "When `enable_image_updates` is set, system will check if existing container images need to be updated. System\nwill basically check if we have an updated image hash available for the same tag available and if we do,\nuser is alerted to update the image.\nA use case for unsetting this variable can be rate limits for docker registries, as each time we check if a\nsingle image needs update, we consume the rate limit and eventually it can hinder operations if the number\nof images to be checked is a lot.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_update_0"
              }
            }
          }
        }
      }
    },
    "/container/prune": {
      "post": {
        "tags": [
          "container"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Prune unused images/containers. This will by default remove any dangling images.\n\n`prune_options.remove_unused_images` when set will remove any docker image which is not being used by any\ncontainer.\n\n`prune_options.remove_stopped_containers` when set will remove any containers which are stopped.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_prune_0"
              }
            }
          }
        }
      }
    },
    "/container/image": {
      "get": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Retrieve container images present in the system.\n\n`query-options.extra.parse_tags` is a boolean which when set will have normalized tags to be retrieved\nfor container images.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/container/image/id/{id}": {
      "delete": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`options.force` should be used to force delete an image even if it's in use by a stopped container."
      },
      "get": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Retrieve container images present in the system.\n\n`query-options.extra.parse_tags` is a boolean which when set will have normalized tags to be retrieved\nfor container images.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/container/image/get_chart_releases_consuming_image": {
      "post": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve chart releases consuming `image_tag` image.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_image_get_chart_releases_consuming_image_0"
              }
            }
          }
        }
      }
    },
    "/container/image/get_instance": {
      "post": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_image_get_instance"
              }
            }
          }
        }
      }
    },
    "/container/image/pull": {
      "post": {
        "tags": [
          "container.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`from_image` is the name of the image to pull. Format for the name is \"registry/repo/image\" where\nregistry may be omitted and it will default to docker registry in this case.\n\n`tag` specifies tag of the image and defaults to `null`. In case of `null` it will retrieve all the tags\nof the image.\n\n`docker_authentication` should be specified if image to be retrieved is under a private repository.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_image_pull_0"
              }
            }
          }
        }
      }
    },
    "/cronjob": {
      "get": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new cron job.\n\n`stderr` and `stdout` are boolean values which if `true`, represent that we would like to suppress\nstandard error / standard output respectively.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cronjob_create_0"
              }
            }
          }
        }
      }
    },
    "/cronjob/id/{id}": {
      "delete": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete cronjob of `id`."
      },
      "get": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update cronjob of `id`."
      }
    },
    "/cronjob/get_instance": {
      "post": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cronjob_get_instance"
              }
            }
          }
        }
      }
    },
    "/cronjob/run": {
      "post": {
        "tags": [
          "cronjob"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Job to run cronjob task of `id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cronjob_run"
              }
            }
          }
        }
      }
    },
    "/ctdb/general/healthy": {
      "get": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a boolean if the ctdb cluster is healthy."
      }
    },
    "/ctdb/general/ips": {
      "post": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return a list of public ip addresses in the ctdb cluster.\n\nPublic IPs will float between nodes in the cluster and\nshould automatically rebalance as nodes become available.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_general_ips_0"
              }
            }
          }
        }
      }
    },
    "/ctdb/general/listnodes": {
      "get": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return a list of nodes in the ctdb cluster."
      }
    },
    "/ctdb/general/pnn": {
      "get": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return node number for this node.\nThis value should be static for life of cluster."
      }
    },
    "/ctdb/general/recovery_master": {
      "get": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return node number for the recovery master for the cluster."
      }
    },
    "/ctdb/general/status": {
      "post": {
        "tags": [
          "ctdb.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List the status of the ctdb cluster.\n\n`all_nodes`: Boolean if True, return status\n    for all nodes in the cluster else return\n    status of this node.\n\n`nodemap` contains the current nodemap in-memory for ctdb daemon on\nthis particular cluster node.\n\n`vnnmap` list of all nodes in the cluster that are participating in\nhosting the cluster databases. BANNED nodes are excluded from vnnmap.\n\n`recovery_master` the node number of the cluster node that currently\nholds the cluster recovery lock in the ctdb shared volume. This node\nis responsible for performing full cluster checks and cluster node\nconsistency. It is also responsible for performing databse recovery\nprocedures. Database recovery related logs will be primarily located\non this node and so troubleshooting cluster health and recovery\noperations should start here.\n\n`recovery_mode_str` will be either 'NORMAL' or 'RECOVERY' depending\non whether database recovery is in progress in the cluster.\n\n`recovery_mode_raw` provides raw the internal raw recovery_state of\nctdbd. Currently defined values are:\nCTDB_RECOVERY_NORMAL 0\nCTDB_RECOVERY_ACTIVE 1\n\n`all_healthy` provides a summary of whether all nodes in internal\nnodelist are healthy. This is a convenience feature and not an\nexplicit ctdb client response.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_general_status_0"
              }
            }
          }
        }
      }
    },
    "/ctdb/private/ips": {
      "get": {
        "tags": [
          "ctdb.private.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "ctdb.private.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add a ctdb private address to the cluster\n\n`ip` string representing an IP v4/v6 address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_private_ips_create_0"
              }
            }
          }
        }
      }
    },
    "/ctdb/private/ips/id/{id}": {
      "get": {
        "tags": [
          "ctdb.private.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "ctdb.private.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Private IP address from the ctdb cluster with pnn value of `id`.\n\n`id` integer representing the PNN value for the node.\n`enable` boolean. When True, enable the node else disable the node."
      }
    },
    "/ctdb/private/ips/get_instance": {
      "post": {
        "tags": [
          "ctdb.private.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_private_ips_get_instance"
              }
            }
          }
        }
      }
    },
    "/ctdb/public/ips": {
      "get": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Retrieve information about configured public IP addresses for the\nctdb cluster. This call raise a CallError with errno set to ENXIO\nif this node is not in a state where it can provide accurate\ninformation about cluster. Examples problematic states are:\n\n- ctdb or glusterd are not running on this node\n\n- ctdb shared volume is not mounted\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add a ctdb public address to the cluster\n\n`pnn` node number of record to adjust\n`ip` string representing an IP v4/v6 address\n`netmask` integer representing a cidr notated netmask (i.e. 16/24/48/64 etc)\n`interface` string representing a network interface to apply the `ip`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_public_ips_create_0"
              }
            }
          }
        }
      }
    },
    "/ctdb/public/ips/id/{id}": {
      "delete": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Remove the specified `address` from the configuration for the node specified by `pnn`.\nIf `pnn` is not specified, then the operation applies to the current node.\nIn order to remove an address cluster-wide, this method must be called on\nevery node where the public IP address is configured."
      },
      "get": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Retrieve information about configured public IP addresses for the\nctdb cluster. This call raise a CallError with errno set to ENXIO\nif this node is not in a state where it can provide accurate\ninformation about cluster. Examples problematic states are:\n\n- ctdb or glusterd are not running on this node\n\n- ctdb shared volume is not mounted\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/ctdb/public/ips/get_instance": {
      "post": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_public_ips_get_instance"
              }
            }
          }
        }
      }
    },
    "/ctdb/public/ips/interface_choices": {
      "post": {
        "tags": [
          "ctdb.public.ips"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve list of available interface choices that can be used for assigning a ctdbd public ip.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ctdb_public_ips_interface_choices_0"
              }
            }
          }
        }
      }
    },
    "/device/get_info": {
      "post": {
        "tags": [
          "device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get info for SERIAL/DISK/GPU device types.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/device_get_info_0"
              }
            }
          }
        }
      }
    },
    "/device/gpu_pci_ids_choices": {
      "get": {
        "tags": [
          "device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve choices for GPU PCI ids located in the system."
      }
    },
    "/directoryservices/cache_refresh": {
      "get": {
        "tags": [
          "directoryservices"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This method refreshes the directory services cache for users and groups that is\nused as a backing for `user.query` and `group.query` methods. The first cache fill in\nan Active Directory domain may take a significant amount of time to complete and\nso it is performed as within a job. The most likely situation in which a user may\ndesire to refresh the directory services cache is after new users or groups  to a remote\ndirectory server with the intention to have said users or groups appear in the\nresults of the aforementioned account-related methods.\n\nA cache refresh is not required in order to use newly-added users and groups for in\npermissions and ACL related methods. Likewise, a cache refresh will not resolve issues\nwith users being unable to authenticate to shares."
      }
    },
    "/directoryservices/get_state": {
      "get": {
        "tags": [
          "directoryservices"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`DISABLED` Directory Service is disabled.\n\n`FAULTED` Directory Service is enabled, but not HEALTHY. Review logs and generated alert\nmessages to debug the issue causing the service to be in a FAULTED state.\n\n`LEAVING` Directory Service is in process of stopping.\n\n`JOINING` Directory Service is in process of starting.\n\n`HEALTHY` Directory Service is enabled, and last status check has passed."
      }
    },
    "/disk": {
      "get": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query disks.\n\nThe following extra options are supported:\n\n     include_expired: true - will also include expired disks (default: false)\n     passwords: true - will not hide KMIP password for the disks (default: false)\n     supports_smart: true - will query if disks support S.M.A.R.T. Only supported if resulting disks count is\n                            not larger than one; otherwise, raises an error.\n     pools: true - will join pool name for each disk (default: false)\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/disk/id/{id}": {
      "get": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query disks.\n\nThe following extra options are supported:\n\n     include_expired: true - will also include expired disks (default: false)\n     passwords: true - will not hide KMIP password for the disks (default: false)\n     supports_smart: true - will query if disks support S.M.A.R.T. Only supported if resulting disks count is\n                            not larger than one; otherwise, raises an error.\n     pools: true - will join pool name for each disk (default: false)\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update disk of `id`.\n\nIf extra options need to be passed to SMART which we don't already support, they can be passed by\n`smartoptions`.\n\n`critical`, `informational` and `difference` are integer values on which alerts for SMART are configured\nif the disk temperature crosses the assigned threshold for each respective attribute.\nIf they are set to null, then SMARTD config values are used as defaults.\n\nEmail of log level LOG_CRIT is issued when disk temperature crosses `critical`.\n\nEmail of log level LOG_INFO is issued when disk temperature crosses `informational`.\n\nIf temperature of a disk changes by `difference` degree Celsius since the last report, SMART reports this."
      }
    },
    "/disk/get_instance": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_get_instance"
              }
            }
          }
        }
      }
    },
    "/disk/get_unused": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return disks that are not in use by any zpool that is currently imported. It will\nalso return disks that are in use by any zpool that is exported.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_get_unused_0"
              }
            }
          }
        }
      }
    },
    "/disk/resize": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Takes a list of disks. Each list entry is a dict that requires a key, value pair.\n`name`: string (the name of the disk (i.e. sda))\n`size`: integer (given in gigabytes)\n`sync`: boolean, when true (default) will synchronize the new size of the disk(s)\n    with the database cache.\n`raise_error`: boolean\n    when true, will raise a `CallError` if any failures occur\n    when false, will will log the errors if any failures occur\n\nNOTE:\n    if `size` is given, the disk with `name` will be resized\n        to `size` (overprovision).\n    if `size` is not given, the disk with `name` will be resized\n        to it's original size (unoverprovision).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_resize"
              }
            }
          }
        }
      }
    },
    "/disk/retaste": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_retaste_0"
              }
            }
          }
        }
      }
    },
    "/disk/smart_attributes": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns S.M.A.R.T. attributes values for specified disk name.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_smart_attributes_0"
              }
            }
          }
        }
      }
    },
    "/disk/temperature": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns temperature for device `name` using specified S.M.A.R.T. `powermode`. If `cache` is not null\nthen the last cached within `cache` seconds value is used.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_temperature"
              }
            }
          }
        }
      }
    },
    "/disk/temperature_agg": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns min/max/avg temperature for `names` disks for the last `days` days.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_temperature_agg"
              }
            }
          }
        }
      }
    },
    "/disk/temperature_alerts": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns existing temperature alerts for specified disk `names.`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_temperature_alerts_0"
              }
            }
          }
        }
      }
    },
    "/disk/temperatures": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns temperatures for a list of devices (runs in parallel).\nSee `disk.temperature` documentation for more details.\nIf `only_cached` is specified then this method only returns disk temperatures that exist in cache.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_temperatures"
              }
            }
          }
        }
      }
    },
    "/disk/wipe": {
      "post": {
        "tags": [
          "disk"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Performs a wipe of a disk `dev`.\nIt can be of the following modes:\n  - QUICK: clean the first and last 32 megabytes on `dev`\n  - FULL: write whole disk with zero's\n  - FULL_RANDOM: write whole disk with random bytes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/disk_wipe"
              }
            }
          }
        }
      }
    },
    "/dns/query": {
      "get": {
        "tags": [
          "dns"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query Name Servers with `query-filters` and `query-options`.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/dyndns": {
      "get": {
        "tags": [
          "dyndns"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "dyndns"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update dynamic dns service configuration.\n\n`period` indicates how often the IP is checked in seconds.\n\n`ssl` if set to true, makes sure that HTTPS is used for the connection to the server which updates the\nDNS record.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dyndns_update_0"
              }
            }
          }
        }
      }
    },
    "/dyndns/provider_choices": {
      "get": {
        "tags": [
          "dyndns"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List supported Dynamic DNS Service Providers."
      }
    },
    "/enclosure": {
      "get": {
        "tags": [
          "enclosure"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/enclosure/id/{id}": {
      "get": {
        "tags": [
          "enclosure"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "enclosure"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": ""
      }
    },
    "/enclosure/get_instance": {
      "post": {
        "tags": [
          "enclosure"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enclosure_get_instance"
              }
            }
          }
        }
      }
    },
    "/enclosure/set_slot_status": {
      "post": {
        "tags": [
          "enclosure"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enclosure_set_slot_status"
              }
            }
          }
        }
      }
    },
    "/failover": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update failover state.\n\n`disabled` When true indicates that HA will be disabled.\n`master`  Marks the particular node in the chassis as the master node.\n            The standby node will have the opposite value.\n\n`timeout` is the time to WAIT until a failover occurs when a network\n    event occurs on an interface that is marked critical for failover AND\n    HA is enabled and working appropriately.\n\n    The default time to wait is 2 seconds.\n    **NOTE**\n        This setting does NOT effect the `disabled` or `master` parameters.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_update_0"
              }
            }
          }
        }
      }
    },
    "/failover/become_passive": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This method is only called manually by the end-user so we fully expect that they\nknow what they're doing. Furthermore, this method will only run if failover has NOT\nbeen administratively disabled. The reason why we only allow this in that scenario\nis because the failover logic (on the other node) will ignore any failover \"event\"\nthat comes in if failover has been administratively disabled. This immediately causes\nthe HA system to go into a \"faulted\" state because the other node will get the VIPs\nbut it will not import the zpool and it will not start fenced. Only way out of that\nsituation is to manually fix things (import zpool, migrate VIPs, start fenced, etc).\n\nNOTE: The only \"safe\" way to \"become passive\" is to use the STCNITH method (similar to STONITH).\n(i.e. Shoot The Current Node In The Head)\n\nThis ensures that the current node gets out of the way _completely_ so there is no chance\nof the zpool being imported at the same time on both nodes (which can ultimately end in data corruption)."
      }
    },
    "/failover/call_remote": {
      "post": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Call a method on the other node.\n\n`method` name of the method to be called\n`args` list of arguments to be passed to `method`\n`options` dictionary with following keys\n    `timeout`: time to wait for `method` to return\n        NOTE: This parameter _ONLY_ applies if the remote\n            client is connected to the other node.\n    `job`: whether or not the `method` being called is a job\n    `job_return`: if true, will return immediately and not wait\n        for the job to complete, otherwise will wait for the\n        job to complete\n    `callback`: a function that will be called as a callback\n        on completion/failure of `method`.\n        NOTE: Only applies if `method` is a job\n    `connect_timeout`: Maximum amount of time in seconds to wait\n        for remote connection to become available.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_call_remote"
              }
            }
          }
        }
      }
    },
    "/failover/control": {
      "post": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_control"
              }
            }
          }
        }
      }
    },
    "/failover/force_master": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Force this controller to become MASTER, if it's not already."
      }
    },
    "/failover/get_ips": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get a list of IPs for which the webUI can be accessed."
      }
    },
    "/failover/hardware": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the hardware type for an HA system.\n  ECHOSTREAM\n  ECHOWARP\n  PUMA\n  BHYVE\n  MANUAL"
      }
    },
    "/failover/in_progress": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns True if there is an ongoing failover event."
      }
    },
    "/failover/licensed": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Checks whether this instance is licensed as a HA unit."
      }
    },
    "/failover/node": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the slot position in the chassis that\nthe controller is located.\n  A - First node\n  B - Seconde Node\n  MANUAL - slot position in chassis could not be determined"
      }
    },
    "/failover/status": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the current HA status.\n\nReturns:\n    MASTER\n    BACKUP\n    ELECTING\n    IMPORTING\n    ERROR\n    SINGLE"
      }
    },
    "/failover/sync_from_peer": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sync database and files from the other controller."
      }
    },
    "/failover/sync_to_peer": {
      "post": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sync database and files to the other controller.\n\n`reboot` as true will reboot the other controller after syncing.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_sync_to_peer_0"
              }
            }
          }
        }
      }
    },
    "/failover/unlock": {
      "post": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Unlock datasets in HA, syncing passphrase between controllers and forcing this controller\nto be MASTER importing the pools.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_unlock_0"
              }
            }
          }
        }
      }
    },
    "/failover/upgrade": {
      "post": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Upgrades both controllers.\n\nFiles will be downloaded to the Active Controller and then transferred to the Standby\nController.\n\nUpgrade process will start concurrently on both nodes.\n\nOnce both upgrades are applied, the Standby Controller will reboot. This job will wait for\nthat job to complete before finalizing.\n\nA file might be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/failover_upgrade_0"
              }
            }
          }
        }
      }
    },
    "/failover/upgrade_finish": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Perform the last stage of an HA upgrade.\n\nThis will activate the new boot environment on the\nStandby Controller and reboot it."
      }
    },
    "/failover/upgrade_pending": {
      "get": {
        "tags": [
          "failover"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Verify if HA upgrade is pending.\n\n`upgrade_finish` needs to be called to finish\nthe HA upgrade process if this method returns true."
      }
    },
    "/filesystem/acl_is_trivial": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns True if the ACL can be fully expressed as a file mode without losing\nany access rules.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_acl_is_trivial_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/can_access_as_user": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Check if `username` is able to access `path` with specific `permissions`. At least one of `read/write/execute`\npermission must be specified for checking with each of these defaulting to `null`. `null` for\n`read/write/execute` represents that the permission should not be checked.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_can_access_as_user"
              }
            }
          }
        }
      }
    },
    "/filesystem/chown": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Change owner or group of file at `path`.\n\n`uid` and `gid` specify new owner of the file. If either\nkey is absent or None, then existing value on the file is not\nchanged.\n\n`recursive` performs action recursively, but does\nnot traverse filesystem mount points.\n\nIf `traverse` and `recursive` are specified, then the chown\noperation will traverse filesystem mount points.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_chown_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/default_acl_choices": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`DEPRECATED`\nReturns list of names of ACL templates. Wrapper around\nfilesystem.acltemplate.query.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_default_acl_choices_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/get": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Job to get contents of `path`.\n\nA file will be downloaded from this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_get_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/get_default_acl": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`DEPRECATED`\nReturns a default ACL depending on the usage specified by `acl_type`.\nIf an admin group is defined, then an entry granting it full control will\nbe placed at the top of the ACL. Optionally may pass `share_type` to argument\nto get share-specific template ACL.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_get_default_acl"
              }
            }
          }
        }
      }
    },
    "/filesystem/get_dosmode": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_get_dosmode_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/getacl": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return ACL of a given path. This may return a POSIX1e ACL or a NFSv4 ACL. The acl type is indicated\nby the `acltype` key.\n\n`simplified` - effect of this depends on ACL type on underlying filesystem. In the case of\nNFSv4 ACLs simplified permissions and flags are returned for ACL entries where applicable.\nNFSv4 errata below. In the case of POSIX1E ACls, this setting has no impact on returned ACL.\n\n`resolve_ids` - adds additional `who` key to each ACL entry, that converts the numeric id to\na user name or group name. In the case of owner@ and group@ (NFSv4) or USER_OBJ and GROUP_OBJ\n(POSIX1E), st_uid or st_gid will be converted from stat() return for file. In the case of\nMASK (POSIX1E), OTHER (POSIX1E), everyone@ (NFSv4), key `who` will be included, but set to null.\nIn case of failure to resolve the id to a name, `who` will be set to null. This option should\nonly be used if resolving ids to names is required.\n\nErrata about ACLType NFSv4:\n\n`simplified` returns a shortened form of the ACL permset and flags where applicable. If permissions\nhave been simplified, then the `perms` object will contain only a single `BASIC` key with a string\ndescribing the underlying permissions set.\n\n`TRAVERSE` sufficient rights to traverse a directory, but not read contents.\n\n`READ` sufficient rights to traverse a directory, and read file contents.\n\n`MODIFIY` sufficient rights to traverse, read, write, and modify a file.\n\n`FULL_CONTROL` all permissions.\n\nIf the permisssions do not fit within one of the pre-defined simplified permissions types, then\nthe full ACL entry will be returned.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_getacl"
              }
            }
          }
        }
      }
    },
    "/filesystem/is_immutable": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieves boolean which is set when immutable flag is set on `path`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_is_immutable_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/listdir": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the contents of a directory.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.\n\nEach entry of the list consists of:\n  name(str): name of the file\n  path(str): absolute path of the entry\n  realpath(str): absolute real path of the entry (if SYMLINK)\n  type(str): DIRECTORY | FILE | SYMLINK | OTHER\n  size(int): size of the entry\n  mode(int): file mode/permission\n  uid(int): user id of entry owner\n  gid(int): group id of entry onwer\n  acl(bool): extended ACL is present on file\n  is_mountpoint(bool): path is a mountpoint\n  is_ctldir(bool): path is within special .zfs directory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_listdir"
              }
            }
          }
        }
      }
    },
    "/filesystem/mkdir": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a directory at the specified path.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_mkdir_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/put": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Job to put contents to `path`.\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_put"
              }
            }
          }
        }
      }
    },
    "/filesystem/set_dosmode": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_set_dosmode_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/set_immutable": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set/Unset immutable flag at `path`.\n\n`set_flag` when set will set immutable flag and when unset will unset immutable flag at `path`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_set_immutable"
              }
            }
          }
        }
      }
    },
    "/filesystem/setacl": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set ACL of a given path. Takes the following parameters:\n`path` full path to directory or file.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.\n\n`dacl` ACL entries. Formatting depends on the underlying `acltype`. NFS4ACL requires\nNFSv4 entries. POSIX1e requires POSIX1e entries.\n\n`uid` the desired UID of the file user. If set to None (the default), then user is not changed.\n\n`gid` the desired GID of the file group. If set to None (the default), then group is not changed.\n\n`recursive` apply the ACL recursively\n\n`traverse` traverse filestem boundaries (ZFS datasets)\n\n`strip` convert ACL to trivial. ACL is trivial if it can be expressed as a file mode without\nlosing any access rules.\n\n`canonicalize` reorder ACL entries so that they are in concanical form as described\nin the Microsoft documentation MS-DTYP 2.4.5 (ACL). This only applies to NFSv4 ACLs.\n\nFor case of NFSv4 ACLs  USER_OBJ, GROUP_OBJ, and EVERYONE with owner@, group@, everyone@ for\nconsistency with getfacl and setfacl. If one of aforementioned special tags is used, 'id' must\nbe set to None.\n\nAn inheriting empty everyone@ ACE is appended to non-trivial ACLs in order to enforce Windows\nexpectations regarding permissions inheritance. This entry is removed from NT ACL returned\nto SMB clients when 'ixnas' samba VFS module is enabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_setacl_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/setperm": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set unix permissions on given `path`.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.\n\nIf `mode` is specified then the mode will be applied to the\npath and files and subdirectories depending on which `options` are\nselected. Mode should be formatted as string representation of octal\npermissions bits.\n\n`uid` the desired UID of the file user. If set to None (the default), then user is not changed.\n\n`gid` the desired GID of the file group. If set to None (the default), then group is not changed.\n\n`stripacl` setperm will fail if an extended ACL is present on `path`,\nunless `stripacl` is set to True.\n\n`recursive` remove ACLs recursively, but do not traverse dataset\nboundaries.\n\n`traverse` remove ACLs from child datasets.\n\nIf no `mode` is set, and `stripacl` is True, then non-trivial ACLs\nwill be converted to trivial ACLs. An ACL is trivial if it can be\nexpressed as a file mode without losing any access rules.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_setperm_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/stat": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return the filesystem stat(2) for a given `path`.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_stat_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/statfs": {
      "post": {
        "tags": [
          "filesystem"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return stats from the filesystem of a given path.\n\nPaths on clustered volumes may be specifed with the path prefix\n`CLUSTER:<volume name>`. For example, to list directories\nin the directory 'data' in the clustered volume `smb01`, the\npath should be specified as `CLUSTER:smb01/data`.\n\nRaises:\n    CallError(ENOENT) - Path not found",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_statfs_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/acltemplate": {
      "get": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new filesystem ACL template.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_acltemplate_create_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/acltemplate/id/{id}": {
      "delete": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": ""
      },
      "get": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "update filesystem ACL template with `id`."
      }
    },
    "/filesystem/acltemplate/by_path": {
      "post": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve list of available ACL templates for a given `path`.\n\nSupports `query-filters` and `query-options`.\n`format-options` gives additional options to alter the results of\nthe template query:\n\n`canonicalize` - place ACL entries for NFSv4 ACLs in Microsoft canonical order.\n`ensure_builtins` - ensure all results contain entries for `builtin_users` and `builtin_administrators`\ngroups.\n`resolve_names` - convert ids in ACL entries into names.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_acltemplate_by_path_0"
              }
            }
          }
        }
      }
    },
    "/filesystem/acltemplate/get_instance": {
      "post": {
        "tags": [
          "filesystem.acltemplate"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/filesystem_acltemplate_get_instance"
              }
            }
          }
        }
      }
    },
    "/ftp": {
      "get": {
        "tags": [
          "ftp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "ftp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update ftp service configuration.\n\n`clients` is an integer value which sets the maximum number of simultaneous clients allowed. It defaults to 32.\n\n`ipconnections` is an integer value which shows the maximum number of connections per IP address. It defaults\nto 0 which equals to unlimited.\n\n`timeout` is the maximum number of seconds that proftpd will allow clients to stay connected without receiving\nany data on either the control or data connection.\n\n`timeout_notransfer` is the maximum number of seconds a client is allowed to spend connected, after\nauthentication, without issuing a command which results in creating an active or passive data connection\n(i.e. sending/receiving a file, or receiving a directory listing).\n\n`rootlogin` is a boolean value which when configured to true enables login as root. This is generally\ndiscouraged because of the security risks.\n\n`onlyanonymous` allows anonymous FTP logins with access to the directory specified by `anonpath`.\n\n`banner` is a message displayed to local login users after they successfully authenticate. It is not displayed\nto anonymous login users.\n\n`filemask` sets the default permissions for newly created files which by default are 077.\n\n`dirmask` sets the default permissions for newly created directories which by default are 077.\n\n`resume` if set allows FTP clients to resume interrupted transfers.\n\n`fxp` if set to true indicates that File eXchange Protocol is enabled. Generally it is discouraged as it\nmakes the server vulnerable to FTP bounce attacks.\n\n`defaultroot` when set ensures that for local users, home directory access is only granted if the user\nis a member of group wheel.\n\n`ident` is a boolean value which when set to true indicates that IDENT authentication is required. If identd\nis not running on the client, this can result in timeouts.\n\n`masqaddress` is the public IP address or hostname which is set if FTP clients cannot connect through a\nNAT device.\n\n`localuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for local user.\nDefault of zero indicates unlimited upload bandwidth ( from the FTP server configuration ).\n\n`localuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for local user.\nDefault of zero indicates unlimited download bandwidth ( from the FTP server configuration ).\n\n`anonuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for anonymous user.\nDefault of zero indicates unlimited upload bandwidth ( from the FTP server configuration ).\n\n`anonuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for anonymous\nuser. Default of zero indicates unlimited download bandwidth ( from the FTP server configuration ).\n\n`tls` is a boolean value which when set indicates that encrypted connections are enabled. This requires a\ncertificate to be configured first with the certificate service and the id of certificate is passed on in\n`ssltls_certificate`.\n\n`tls_policy` defines whether the control channel, data channel, both channels, or neither channel of an FTP\nsession must occur over SSL/TLS.\n\n`tls_opt_enable_diags` is a boolean value when set, logs verbosely. This is helpful when troubleshooting a\nconnection.\n\n`options` is a string used to add proftpd(8) parameters not covered by ftp service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ftp_update_0"
              }
            }
          }
        }
      }
    },
    "/gluster/eventsd/create": {
      "post": {
        "tags": [
          "gluster.eventsd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add `url` webhook that will be called\nwith a JSON formatted POST request that\nwill include the event that was triggered\nalong with the relevant data.\n\n`url` is a http address (i.e. http://192.168.1.50/endpoint)\n`bearer_token` is a bearer token\n`secret` secret to encode the JWT message\n\nNOTE: This webhook will be synchronized to all\npeers in the trusted storage pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_eventsd_create_0"
              }
            }
          }
        }
      }
    },
    "/gluster/eventsd/delete": {
      "post": {
        "tags": [
          "gluster.eventsd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Delete `url` webhook\n\n`url` is a http address (i.e. http://192.168.1.50/endpoint)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_eventsd_delete_0"
              }
            }
          }
        }
      }
    },
    "/gluster/eventsd/sync": {
      "get": {
        "tags": [
          "gluster.eventsd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sync the webhooks config file to all peers in the\ntrusted storage pool"
      }
    },
    "/gluster/eventsd/webhooks": {
      "get": {
        "tags": [
          "gluster.eventsd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List the current webhooks (if any)"
      }
    },
    "/gluster/fuse/is_mounted": {
      "post": {
        "tags": [
          "gluster.fuse"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Check if gluster volume is FUSE mounted locally.\n\n`name` String representing name of the gluster volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_fuse_is_mounted_0"
              }
            }
          }
        }
      }
    },
    "/gluster/fuse/mount": {
      "post": {
        "tags": [
          "gluster.fuse"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Mount a gluster volume using the gluster FUSE client.\n\n`name` String representing the name of the gluster volume\n`all` Boolean if True locally FUSE mount all detected\n        gluster volumes\n`raise` Boolean if True raise a CallError if the FUSE mount\n        fails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_fuse_mount_0"
              }
            }
          }
        }
      }
    },
    "/gluster/fuse/umount": {
      "post": {
        "tags": [
          "gluster.fuse"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Unmount a locally FUSE mounted gluster volume.\n\n`name` String representing the name of the gluster volume\n`all` Boolean if True umount all locally detected FUSE\n        mounted gluster volumes\n`raise` Boolean if True raise a CallError if the FUSE mount\n        fails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_fuse_umount_0"
              }
            }
          }
        }
      }
    },
    "/gluster/localevents/add_jwt_secret": {
      "post": {
        "tags": [
          "gluster.localevents"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add a `secret` key used to encode/decode\nJWT messages for sending/receiving gluster\nevents.\n\n`secret` String representing the key to be used\n            to encode/decode JWT messages\n`force` Boolean if set to True, will forcefully\n            wipe any existing jwt key for this\n            peer. Note, if forcefully adding a\n            new key, the other peers in the TSP\n            will also need to be sent this key.\n\nNote: this secret is only used for messages\nthat are destined for the api endpoint at\nhttp://*:6000/_clusterevents for each peer\nin the trusted storage pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_localevents_add_jwt_secret_0"
              }
            }
          }
        }
      }
    },
    "/gluster/localevents/get_set_jwt_secret": {
      "get": {
        "tags": [
          "gluster.localevents"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return the secret key used to encode/decode\nJWT messages for sending/receiving gluster\nevents.\n\nNote: this secret is only used for messages\nthat are destined for the api endpoint at\nhttp://*:6000/_clusterevents for each peer\nin the trusted storage pool."
      }
    },
    "/gluster/peer": {
      "get": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add peer to the Trusted Storage Pool.\n\n`hostname` String representing an IP(v4/v6) address or DNS name",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_peer_create_0"
              }
            }
          }
        }
      }
    },
    "/gluster/peer/id/{id}": {
      "delete": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Remove peer of `id` from the Trusted Storage Pool.\n\n`id` String representing the uuid of the peer"
      },
      "get": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/gluster/peer/get_instance": {
      "post": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_peer_get_instance"
              }
            }
          }
        }
      }
    },
    "/gluster/peer/ips_available": {
      "get": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return list of VIP(v4/v6) addresses available on the system"
      }
    },
    "/gluster/peer/status": {
      "post": {
        "tags": [
          "gluster.peer"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List the status of peers in the Trusted Storage Pool.\n\n`localhost` Boolean if True, include localhost else exclude localhost",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_peer_status_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume": {
      "get": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a gluster volume.\n\n`name` String representing name to be given to the volume\n`bricks` List representing the brick paths\n    `peer_name` String representing IP or DNS name of the peer\n    `peer_path` String representing the full path of the brick\n\n`replica` Integer representing number of replica bricks\n`arbiter` Integer representing number of arbiter bricks\n`disperse` Integer representing number of disperse bricks\n`disperse_data` Integer representing number of disperse data bricks\n`redundancy` Integer representing number of redundancy bricks\n`force` Boolean, if True ignore potential warnings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_create_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/id/{id}": {
      "delete": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete a gluster volume.\n\n`id` String representing name of gluster volume\n        to be deleted"
      },
      "get": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/gluster/volume/get_instance": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_get_instance"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/info": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return information about gluster volume(s).\n\n`name` String representing name of gluster volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_info_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/list": {
      "get": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return list of gluster volumes."
      }
    },
    "/gluster/volume/optreset": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Reset volumes options.\n    If `opt` is not provided, then all options\n    will be reset.\n\n`name` String representing name of gluster volume\n`opt` String representing name of the option to reset\n`force` Boolean, if True forcefully reset option(s)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_optreset_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/optset": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set gluster volume options.\n\n`name` String representing name of gluster volume\n`opts` Dict where\n    --key-- is the name of the option\n    --value-- is the value to be given to the option",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_optset_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/quota": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Enable/Disable the quota for a given gluster volume.\n\n`name` String representing name of gluster volume\n`enable` Boolean, if True enable quota else disable it",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_quota_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/restart": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restart a gluster volume.\n\n`name` String representing name of gluster volume\n`force` Boolean, if True forcefully restart the gluster volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_restart_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/start": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Start a gluster volume.\n\n`name` String representing name of gluster volume\n`force` Boolean, if True forcefully start the gluster volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_start_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/status": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return detailed information about gluster volume.\n\n`name` String representing name of gluster volume\n`verbose` Boolean, If False, only return brick information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_status_0"
              }
            }
          }
        }
      }
    },
    "/gluster/volume/stop": {
      "post": {
        "tags": [
          "gluster.volume"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Stop a gluster volume.\n\n`name` String representing name of gluster volume\n`force` Boolean, if True forcefully stop the gluster volume",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/gluster_volume_stop_0"
              }
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query groups with `query-filters` and `query-options`. As a performance optimization, only local groups\nwill be queried by default.\n\nExpanded information may be requested by specifying the extra option `\"extra\": {\"additional_information\": []}`.\n\nThe following `additional_information` options are supported:\n`SMB` - include Windows SID and NT Name for group. If this option is not specified, then these\n    keys will have `null` value.\n`DS` - include groups from Directory Service (LDAP or Active Directory) in results\n\n`\"extra\": {\"search_dscache\": true}` is a legacy method of querying for directory services groups.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new group.\n\nIf `gid` is not provided it is automatically filled with the next one available.\n\n`allow_duplicate_gid` allows distinct group names to share the same gid.\n\n`users` is a list of user ids (`id` attribute from `user.query`).\n\n`smb` specifies whether the group should be mapped into an NT group.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_create_0"
              }
            }
          }
        }
      }
    },
    "/group/id/{id}": {
      "delete": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete group `id`.\n\nThe `delete_users` option deletes all users that have this group as their primary group."
      },
      "get": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Query groups with `query-filters` and `query-options`. As a performance optimization, only local groups\nwill be queried by default.\n\nExpanded information may be requested by specifying the extra option `\"extra\": {\"additional_information\": []}`.\n\nThe following `additional_information` options are supported:\n`SMB` - include Windows SID and NT Name for group. If this option is not specified, then these\n    keys will have `null` value.\n`DS` - include groups from Directory Service (LDAP or Active Directory) in results\n\n`\"extra\": {\"search_dscache\": true}` is a legacy method of querying for directory services groups.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update attributes of an existing group."
      }
    },
    "/group/get_group_obj": {
      "post": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns dictionary containing information from struct grp for the group specified by either\nthe groupname or gid. Bypasses group cache.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_get_group_obj_0"
              }
            }
          }
        }
      }
    },
    "/group/get_instance": {
      "post": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_get_instance"
              }
            }
          }
        }
      }
    },
    "/group/get_next_gid": {
      "get": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the next available/free gid."
      }
    },
    "/group/has_password_enabled_user": {
      "post": {
        "tags": [
          "group"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Checks whether at least one local user with a password is a member of any of the `group_ids`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/group_has_password_enabled_user"
              }
            }
          }
        }
      }
    },
    "/idmap": {
      "get": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new IDMAP domain. These domains must be unique. This table\nwill be automatically populated after joining an Active Directory domain\nif \"allow trusted domains\" is set to True in the AD service configuration.\nThere are three default system domains: DS_TYPE_ACTIVEDIRECTORY, DS_TYPE_LDAP, DS_TYPE_DEFAULT_DOMAIN.\nThe system domains correspond with the idmap settings under Active Directory, LDAP, and SMB\nrespectively.\n\n`name` the pre-windows 2000 domain name.\n\n`DNS_domain_name` DNS name of the domain.\n\n`idmap_backend` provides a plugin interface for Winbind to use varying\nbackends to store SID/uid/gid mapping tables. The correct setting\ndepends on the environment in which the NAS is deployed.\n\n`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.\n\n`certificate_id` references the certificate ID of the SSL certificate to use for certificate-based\nauthentication to a remote LDAP server. This parameter is not supported for all idmap backends as some\nbackends will generate SID to ID mappings algorithmically without causing network traffic.\n\n`options` are additional parameters that are backend-dependent:\n\n`AD` idmap backend options:\n`unix_primary_group` If True, the primary group membership is fetched from the LDAP attributes (gidNumber).\nIf False, the primary group membership is calculated via the \"primaryGroupID\" LDAP attribute.\n\n`unix_nss_info` if True winbind will retrieve the login shell and home directory from the LDAP attributes.\nIf False or if the AD LDAP entry lacks the SFU attributes the smb4.conf parameters `template shell` and `template homedir` are used.\n\n`schema_mode` Defines the schema that idmap_ad should use when querying Active Directory regarding user and group information.\nThis can be either the RFC2307 schema support included in Windows 2003 R2 or the Service for Unix (SFU) schema.\nFor SFU 3.0 or 3.5 please choose \"SFU\", for SFU 2.0 please choose \"SFU20\". The behavior of primary group membership is\ncontrolled by the unix_primary_group option.\n\n`AUTORID` idmap backend options:\n`readonly` sets the module to read-only mode. No new ranges will be allocated and new mappings\nwill not be created in the idmap pool.\n\n`ignore_builtin` ignores mapping requests for the BUILTIN domain.\n\n`LDAP` idmap backend options:\n`ldap_base_dn` defines the directory base suffix to use for SID/uid/gid mapping entries.\n\n`ldap_user_dn` defines the user DN to be used for authentication.\n\n`ldap_url` specifies the LDAP server to use for SID/uid/gid map entries.\n\n`ssl` specifies whether to encrypt the LDAP transport for the idmap backend.\n\n`NSS` idmap backend options:\n`linked_service` specifies the auxiliary directory service ID provider.\n\n`RFC2307` idmap backend options:\n`domain` specifies the domain for which the idmap backend is being created. Numeric id, short-form\ndomain name, or long-form DNS domain name of the domain may be specified. Entry must be entered as\nit appears in `idmap.domain`.\n\n`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.\n\n`ldap_server` defines the type of LDAP server to use. This can either be an LDAP server provided\nby the Active Directory Domain (ad) or a stand-alone LDAP server.\n\n`bind_path_user` specfies the search base where user objects can be found in the LDAP server.\n\n`bind_path_group` specifies the search base where group objects can be found in the LDAP server.\n\n`user_cn` query cn attribute instead of uid attribute for the user name in LDAP.\n\n`realm` append @realm to cn for groups (and users if user_cn is set) in LDAP queries.\n\n`ldmap_domain` when using the LDAP server in the Active Directory server, this allows one to\nspecify the domain where to access the Active Directory server. This allows using trust relationships\nwhile keeping all RFC 2307 records in one place. This parameter is optional, the default is to access\nthe AD server in the current domain to query LDAP records.\n\n`ldap_url` when using a stand-alone LDAP server, this parameter specifies the LDAP URL for accessing the LDAP server.\n\n`ldap_user_dn` defines the user DN to be used for authentication.\n\n`ldap_user_dn_password` is the password to be used for LDAP authentication.\n\n`realm` defines the realm to use in the user and group names. This is only required when using cn_realm together with\n a stand-alone ldap server.\n\n`RID` backend options:\n`sssd_compat` generate idmap low range based on same algorithm that SSSD uses by default.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idmap_create_0"
              }
            }
          }
        }
      }
    },
    "/idmap/id/{id}": {
      "delete": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a domain by id. Deletion of default system domains is not permitted.\nIn case of registry config for clustered server, this will remove all smb4.conf\nentries for the domain associated with the id."
      },
      "get": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a domain by id."
      }
    },
    "/idmap/backend_choices": {
      "get": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns array of valid idmap backend choices per directory service."
      }
    },
    "/idmap/backend_options": {
      "get": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This returns full information about idmap backend options. Not all\n`options` are valid for every backend."
      }
    },
    "/idmap/clear_idmap_cache": {
      "get": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Stop samba, remove the winbindd_cache.tdb file, start samba, flush samba's cache.\nThis should be performed after finalizing idmap changes."
      }
    },
    "/idmap/get_instance": {
      "post": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idmap_get_instance"
              }
            }
          }
        }
      }
    },
    "/idmap/options_choices": {
      "post": {
        "tags": [
          "idmap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a list of supported keys for the specified idmap backend.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idmap_options_choices_0"
              }
            }
          }
        }
      }
    },
    "/initshutdownscript": {
      "get": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an initshutdown script task.\n\n`type` indicates if a command or script should be executed at `when`.\n\nThere are three choices for `when`:\n\n1) PREINIT - This is early in the boot process before all the services / rc scripts have started\n2) POSTINIT - This is late in the boot process when most of the services / rc scripts have started\n3) SHUTDOWN - This is on shutdown\n\n`timeout` is an integer value which indicates time in seconds which the system should wait for the execution\nof script/command. It should be noted that a hard limit for a timeout is configured by the base OS, so when\na script/command is set to execute on SHUTDOWN, the hard limit configured by the base OS is changed adding\nthe timeout specified by script/command so it can be ensured that it executes as desired and is not interrupted\nby the base OS's limit.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/initshutdownscript_create_0"
              }
            }
          }
        }
      }
    },
    "/initshutdownscript/id/{id}": {
      "delete": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete init/shutdown task of `id`."
      },
      "get": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update initshutdown script task of `id`."
      }
    },
    "/initshutdownscript/get_instance": {
      "post": {
        "tags": [
          "initshutdownscript"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/initshutdownscript_get_instance"
              }
            }
          }
        }
      }
    },
    "/interface": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query Interfaces with `query-filters` and `query-options`\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create virtual interfaces (Link Aggregation, VLAN)\n\nFor BRIDGE `type` the following attribute is required: bridge_members.\n\nFor LINK_AGGREGATION `type` the following attributes are required: lag_ports,\nlag_protocol.\n\nFor VLAN `type` the following attributes are required: vlan_parent_interface,\nvlan_tag and vlan_pcp.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_create_0"
              }
            }
          }
        }
      }
    },
    "/interface/id/{id}": {
      "delete": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete Interface of `id`."
      },
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query Interfaces with `query-filters` and `query-options`\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update Interface of `id`.\n\n"
      }
    },
    "/interface/bridge_members_choices": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return available interface choices that can be added to a `br` (bridge) interface.\n\n`id` is name of existing bridge interface on the system that will have its member\n        interfaces included.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_bridge_members_choices_0"
              }
            }
          }
        }
      }
    },
    "/interface/cancel_rollback": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "If this method is called after interface changes have been committed and within the checkin timeout,\nthen the task that automatically rollsback any interface changes is cancelled and the in-memory snapshot\nof database tables for the various interface tables will NOT be cleared."
      }
    },
    "/interface/checkin": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "If this method is called after interface changes have been committed and within the checkin timeout,\nthen the task that automatically rollsback any interface changes is cancelled and the in-memory snapshot\nof database tables for the various interface tables will be cleared. The idea is that the end-user has\nverified the changes work as intended and need to be committed permanently."
      }
    },
    "/interface/checkin_waiting": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether or not we are waiting user to checkin the applied network changes\nbefore they are rolled back.\nValue is in number of seconds or null."
      }
    },
    "/interface/choices": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Choices of available network interfaces.\n\n`bridge_members` will include BRIDGE members.\n`lag_ports` will include LINK_AGGREGATION ports.\n`vlan_parent` will include VLAN parent interface.\n`exclude` is a list of interfaces prefix to remove.\n`include` is a list of interfaces that should not be removed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_choices_0"
              }
            }
          }
        }
      }
    },
    "/interface/commit": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Commit/apply pending interfaces changes.\n\n`rollback` as true (default) will rollback changes in case they fail to apply.\n`checkin_timeout` is the time in seconds it will wait for the checkin call to acknowledge\nthe interfaces changes happened as planned from the user. If checkin does not happen\nwithin this period of time the changes will get reverted.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_commit_0"
              }
            }
          }
        }
      }
    },
    "/interface/default_route_will_be_removed": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "On a fresh install of SCALE, dhclient is started for every interface so IP\naddresses/routes could be installed via that program. However, when the\nend-user goes to configure the first interface we tear down all other interfaces\nconfigs AND delete the default route. We also remove the default route if the\nconfigured gateway doesn't match the one currently installed in kernel."
      }
    },
    "/interface/get_instance": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_get_instance"
              }
            }
          }
        }
      }
    },
    "/interface/has_pending_changes": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether there are pending interfaces changes to be applied or not."
      }
    },
    "/interface/ip_in_use": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get all IPv4 / Ipv6 from all valid interfaces, excluding tap and epair.\n\n`loopback` will return loopback interface addresses.\n\n`any` will return wildcard addresses (0.0.0.0 and ::).\n\n`static` when enabled will ensure we only return static ip's configured.\n\nReturns a list of dicts - eg -\n\n[\n    {\n        \"type\": \"INET6\",\n        \"address\": \"fe80::5054:ff:fe16:4aac\",\n        \"netmask\": 64\n    },\n    {\n        \"type\": \"INET\",\n        \"address\": \"192.168.122.148\",\n        \"netmask\": 24,\n        \"broadcast\": \"192.168.122.255\"\n    },\n]",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_ip_in_use_0"
              }
            }
          }
        }
      }
    },
    "/interface/lacpdu_rate_choices": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available lacpdu rate policies for the LACP lagg type interfaces."
      }
    },
    "/interface/lag_ports_choices": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return available interface choices that can be added to a `bond` (lag) interface.\n\n`id` is name of existing bond interface on the system that will have its member\n        interfaces included.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_lag_ports_choices_0"
              }
            }
          }
        }
      }
    },
    "/interface/rollback": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Rollback pending interfaces changes."
      }
    },
    "/interface/save_default_route": {
      "post": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "This method exists _solely_ to provide a \"warning\" and therefore\na path for remediation for when an end-user modifies an interface\nand we rip the default gateway out from underneath them without\nany type of warning.\n\nNOTE: This makes 2 assumptions\n1. interface.create/update/delete must have been called before\n    calling this method\n2. this method must be called before `interface.sync` is called\n\nThis method exists for the predominant scenario for new users...\n1. fresh install SCALE\n2. all interfaces start DHCPv4 (v6 is ignored for now)\n3. 1 of the interfaces receives an IP address\n4. along with the IP, the kernel receives a default route\n    (by design, of course)\n5. user goes to configure this interface as having a static\n    IP address\n6. as we go through and \"sync\" the changes, we remove the default\n    route because it exists in the kernel FIB but doesn't exist\n    in the database.\n7. IF the user is connecting via layer3, then they will lose all\n    access to the TrueNAS and never be able to finalize the changes\n    to the network because we ripped out the default route which\n    is how they were communicating to begin with.\n\nIn the above scenario, we're going to try and prevent this by doing\nthe following:\n1. fresh install SCALE\n2. all interfaces start DHCPv4\n3. default route is received\n4. user configures an interface\n5. When user pushes \"Test Changes\" (interface.sync), webUI will call\n    network.configuration.default_route_will_be_removed BEFORE interface.sync\n6. if network.configuration.default_route_will_be_removed returns True,\n    then webUI will open a new modal dialog that gives the end-user\n    ample warning/verbiage describing the situation. Furthermore, the\n    modal will allow the user to input a default gateway\n7. if user gives gateway, webUI will call this method providing the info\n    and we'll validate accordingly\n8. OR if user doesn't give gateway, they will need to \"confirm\" this is\n    desired\n9. the default gateway provided to us (if given by end-user) will be stored\n    in the same in-memory cache that we use for storing the interface changes\n    and will be rolledback accordingly in this plugin just like everything else\n\nThere are a few other scenarios where this is beneficial, but the one listed above\nis seen most often by end-users/support team.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_save_default_route_0"
              }
            }
          }
        }
      }
    },
    "/interface/services_restarted_on_sync": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns which services will be set to listen on 0.0.0.0 (and, thus, restarted) on sync.\n\nExample result:\n[\n    // Samba service will be set ot listen on 0.0.0.0 and restarted because it was set up to listen on\n    // 192.168.0.1 which is being removed.\n    {\"type\": \"SYSTEM_SERVICE\", \"service\": \"cifs\", \"ips\": [\"192.168.0.1\"]},\n]"
      }
    },
    "/interface/vlan_parent_interface_choices": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return available interface choices for `vlan_parent_interface` attribute."
      }
    },
    "/interface/xmit_hash_policy_choices": {
      "get": {
        "tags": [
          "interface"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available transmit hash policies for the LACP or LOADBALANCE\nlagg type interfaces."
      }
    },
    "/interface/capabilities/get": {
      "post": {
        "tags": [
          "interface.capabilities"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return enabled, disabled and supported capabilities (also known as features)\non a given interface.\n\n`name` String representing name of the interface",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_capabilities_get_0"
              }
            }
          }
        }
      }
    },
    "/interface/capabilities/set": {
      "post": {
        "tags": [
          "interface.capabilities"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Enable or Disable capabilties (also known as features) on a given interface.\n\n`name` String representing name of the interface\n`capabilities` List representing capabilities to be acted upon\n`action` String when set to 'ENABLE' will enable `capabilities` else if set\n            to `DISABLE` will disable `capabilities`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/interface_capabilities_set_0"
              }
            }
          }
        }
      }
    },
    "/ipmi": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query available IPMI Channels with `query-filters` and `query-options`.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/ipmi/id/{id}": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Query available IPMI Channels with `query-filters` and `query-options`.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update IPMI configuration on channel number `id`.\n\n`ipaddress` is an IPv4 address to be assigned to channel number `id`.\n`netmask` is the subnet mask associated with `ipaddress`.\n`gateway` is an IPv4 address used by `ipaddress` to reach outside the local subnet.\n`password` is a password to be assigned to channel number `id`\n`dhcp` is a boolean. If False, `ipaddress`, `netmask` and `gateway` must be set.\n`vlan` is an integer representing the vlan tag number."
      }
    },
    "/ipmi/channels": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return a list of available IPMI channels."
      }
    },
    "/ipmi/clear_sel": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Clear IPMI system event log."
      }
    },
    "/ipmi/get_instance": {
      "post": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ipmi_get_instance"
              }
            }
          }
        }
      }
    },
    "/ipmi/identify": {
      "post": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Turn on chassis identify light.\n\n`seconds` is an integer representing the number of seconds to leave the chassis identify light turned on.\n    - default is 15 seconds\n    - to turn it off, specify `seconds` as 0\n`force` is a boolean. When True, turn on chassis identify light indefinitely.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ipmi_identify_0"
              }
            }
          }
        }
      }
    },
    "/ipmi/is_loaded": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a boolean value indicating if `IPMI_DEV` is loaded."
      }
    },
    "/ipmi/query_sel": {
      "get": {
        "tags": [
          "ipmi"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query IPMI system extended event log.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/iscsi/auth": {
      "get": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an iSCSI Authorized Access.\n\n`tag` should be unique among all configured iSCSI Authorized Accesses.\n\n`secret` and `peersecret` should have length between 12-16 letters inclusive.\n\n`peeruser` and `peersecret` are provided only when configuring mutual CHAP. `peersecret` should not be\nsimilar to `secret`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_auth_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/auth/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete iSCSI Authorized Access of `id`."
      },
      "get": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI Authorized Access of `id`."
      }
    },
    "/iscsi/auth/get_instance": {
      "post": {
        "tags": [
          "iscsi.auth"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_auth_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/extent": {
      "get": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an iSCSI Extent.\n\nWhen `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if\nnot zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.\n\nWith `type` being set to DISK, a valid ZFS volume is required.\n\n`insecure_tpc` when enabled allows an initiator to bypass normal access control and access any scannable\ntarget. This allows xcopy operations otherwise blocked by access control.\n\n`xen` is a boolean value which is set to true if Xen is being used as the iSCSI initiator.\n\n`ro` when set to true prevents the initiator from writing to this LUN.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_extent_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/extent/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete iSCSI Extent of `id`.\n\nIf `id` iSCSI Extent's `type` was configured to FILE, `remove` can be set to remove the configured file."
      },
      "get": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI Extent of `id`."
      }
    },
    "/iscsi/extent/disk_choices": {
      "get": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return a dict of available zvols that can be used\nwhen creating an extent."
      }
    },
    "/iscsi/extent/get_instance": {
      "post": {
        "tags": [
          "iscsi.extent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_extent_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/global": {
      "get": {
        "tags": [
          "iscsi.global"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "iscsi.global"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`alua` is a no-op for FreeNAS.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_global_update_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/global/alua_enabled": {
      "get": {
        "tags": [
          "iscsi.global"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether iSCSI ALUA is enabled or not."
      }
    },
    "/iscsi/global/client_count": {
      "get": {
        "tags": [
          "iscsi.global"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return currently connected clients count."
      }
    },
    "/iscsi/global/sessions": {
      "get": {
        "tags": [
          "iscsi.global"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get a list of currently running iSCSI sessions. This includes initiator and target names\nand the unique connection IDs.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/iscsi/host": {
      "get": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates iSCSI host.\n\n`ip` indicates an IP address of the host.\n`description` is a human-readable name for the host.\n`iqns` is a list of initiator iSCSI Qualified Names.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/host/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI host `id`."
      },
      "get": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI host `id`."
      }
    },
    "/iscsi/host/get_initiators": {
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns initiator groups associated with host `id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_get_initiators_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/host/get_instance": {
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/host/get_targets": {
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns targets associated with host `id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_get_targets_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/host/set_initiators": {
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Associates initiator groups `ids` with host `id`.\nUse `force` if you want to allow adding first or removing last initiator from initiator groups.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_set_initiators"
              }
            }
          }
        }
      }
    },
    "/iscsi/host/set_targets": {
      "post": {
        "tags": [
          "iscsi.host"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Associates targets `ids` with host `id`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_host_set_targets"
              }
            }
          }
        }
      }
    },
    "/iscsi/initiator": {
      "get": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an iSCSI Initiator.\n\n`initiators` is a list of initiator hostnames which are authorized to access an iSCSI Target. To allow all\npossible initiators, `initiators` can be left empty.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_initiator_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/initiator/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete iSCSI initiator of `id`."
      },
      "get": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI initiator of `id`."
      }
    },
    "/iscsi/initiator/get_instance": {
      "post": {
        "tags": [
          "iscsi.initiator"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_initiator_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/portal": {
      "get": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new iSCSI Portal.\n\n`discovery_authgroup` is required for CHAP and CHAP_MUTUAL.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_portal_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/portal/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete iSCSI Portal `id`."
      },
      "get": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI Portal `id`."
      }
    },
    "/iscsi/portal/get_instance": {
      "post": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_portal_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/portal/listen_ip_choices": {
      "get": {
        "tags": [
          "iscsi.portal"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns possible choices for `listen.ip` attribute of portal create and update."
      }
    },
    "/iscsi/target": {
      "get": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an iSCSI Target.\n\n`groups` is a list of group dictionaries which provide information related to using a `portal`, `initiator`,\n`authmethod` and `auth` with this target. `auth` represents a valid iSCSI Authorized Access and defaults to\nnull.\n\n`auth_networks` is a list of IP/CIDR addresses which are allowed to use this initiator. If all networks are\nto be allowed, this field should be left empty.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_target_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/target/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete iSCSI Target of `id`.\n\nDeleting an iSCSI Target makes sure we delete all Associated Targets which use `id` iSCSI Target."
      },
      "get": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update iSCSI Target of `id`."
      }
    },
    "/iscsi/target/get_instance": {
      "post": {
        "tags": [
          "iscsi.target"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_target_get_instance"
              }
            }
          }
        }
      }
    },
    "/iscsi/targetextent": {
      "get": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create an Associated Target.\n\n`lunid` will be automatically assigned if it is not provided based on the `target`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_targetextent_create_0"
              }
            }
          }
        }
      }
    },
    "/iscsi/targetextent/id/{id}": {
      "delete": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Associated Target of `id`."
      },
      "get": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Associated Target of `id`."
      }
    },
    "/iscsi/targetextent/get_instance": {
      "post": {
        "tags": [
          "iscsi.targetextent"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iscsi_targetextent_get_instance"
              }
            }
          }
        }
      }
    },
    "/kerberos": {
      "get": {
        "tags": [
          "kerberos"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "kerberos"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`appdefaults_aux` add parameters to \"appdefaults\" section of the krb5.conf file.\n\n`libdefaults_aux` add parameters to \"libdefaults\" section of the krb5.conf file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_update_0"
              }
            }
          }
        }
      }
    },
    "/kerberos/keytab": {
      "get": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a kerberos keytab. Uploaded keytab files will be merged with the system\nkeytab under /etc/krb5.keytab.\n\n`file` b64encoded kerberos keytab\n`name` name for kerberos keytab",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_keytab_create_0"
              }
            }
          }
        }
      }
    },
    "/kerberos/keytab/id/{id}": {
      "delete": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete kerberos keytab by id, and force regeneration of\nsystem keytab."
      },
      "get": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update kerberos keytab by id."
      }
    },
    "/kerberos/keytab/get_instance": {
      "post": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_keytab_get_instance"
              }
            }
          }
        }
      }
    },
    "/kerberos/keytab/system_keytab_list": {
      "get": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns content of system keytab (/etc/krb5.keytab)."
      }
    },
    "/kerberos/keytab/upload_keytab": {
      "post": {
        "tags": [
          "kerberos.keytab"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Upload a keytab file. This method expects the keytab file to be uploaded using\nthe /_upload/ endpoint.\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_keytab_upload_keytab_0"
              }
            }
          }
        }
      }
    },
    "/kerberos/realm": {
      "get": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new kerberos realm. This will be automatically populated during the\ndomain join process in an Active Directory environment. Kerberos realm names\nare case-sensitive, but convention is to only use upper-case.\n\nEntries for kdc, admin_server, and kpasswd_server are not required.\nIf they are unpopulated, then kerberos will use DNS srv records to\ndiscover the correct servers. The option to hard-code them is provided\ndue to AD site discovery. Kerberos has no concept of Active Directory\nsites. This means that middleware performs the site discovery and\nsets the kerberos configuration based on the AD site.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_realm_create_0"
              }
            }
          }
        }
      }
    },
    "/kerberos/realm/id/{id}": {
      "delete": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a kerberos realm by ID."
      },
      "get": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a kerberos realm by id. This will be automatically populated during the\ndomain join process in an Active Directory environment. Kerberos realm names\nare case-sensitive, but convention is to only use upper-case."
      }
    },
    "/kerberos/realm/get_instance": {
      "post": {
        "tags": [
          "kerberos.realm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kerberos_realm_get_instance"
              }
            }
          }
        }
      }
    },
    "/keychaincredential": {
      "get": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Keychain Credential\n\nCreate a Keychain Credential of any type.\nEvery Keychain Credential has a `name` which is used to distinguish it from others.\nThe following `type`s are supported:\n * `SSH_KEY_PAIR`\n   Which `attributes` are:\n   * `private_key`\n   * `public_key` (which can be omitted and thus automatically derived from private key)\n   At least one attribute is required.\n\n * `SSH_CREDENTIALS`\n   Which `attributes` are:\n   * `host`\n   * `port` (default 22)\n   * `username` (default root)\n   * `private_key` (Keychain Credential ID)\n   * `remote_host_key` (you can use `keychaincredential.remote_ssh_host_key_scan` do discover it)\n   * `cipher`: one of `STANDARD`, `FAST`, or `DISABLED` (last requires special support from both SSH server and\n     client)\n   * `connect_timeout` (default 10)\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_create_0"
              }
            }
          }
        }
      }
    },
    "/keychaincredential/id/{id}": {
      "delete": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Keychain Credential with specific `id`\n\n"
      },
      "get": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a Keychain Credential with specific `id`\n\nPlease note that you can't change `type`\n\nAlso you must specify full `attributes` value\n\nSee the documentation for `create` method for information on payload contents\n\n"
      }
    },
    "/keychaincredential/generate_ssh_key_pair": {
      "get": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Generate a public/private key pair\n\nGenerate a public/private key pair (useful for `SSH_KEY_PAIR` type)\n\n"
      }
    },
    "/keychaincredential/get_instance": {
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_get_instance"
              }
            }
          }
        }
      }
    },
    "/keychaincredential/remote_ssh_host_key_scan": {
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Discover a remote host key\n\nDiscover a remote host key (useful for `SSH_CREDENTIALS`)\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_remote_ssh_host_key_scan_0"
              }
            }
          }
        }
      }
    },
    "/keychaincredential/remote_ssh_semiautomatic_setup": {
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine\n\nPerform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other\n`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_remote_ssh_semiautomatic_setup_0"
              }
            }
          }
        }
      }
    },
    "/keychaincredential/setup_ssh_connection": {
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a SSH Connection performing the following steps:\n\n1) Generating SSH Key Pair if required\n2) Setting up SSH Credentials based on `setup_type`\n\nIn case (2) fails, it will be ensured that SSH Key Pair generated ( if applicable ) in the process is\nremoved.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_setup_ssh_connection_0"
              }
            }
          }
        }
      }
    },
    "/keychaincredential/used_by": {
      "post": {
        "tags": [
          "keychaincredential"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns list of objects that use this credential.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/keychaincredential_used_by_0"
              }
            }
          }
        }
      }
    },
    "/kmip": {
      "get": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update KMIP Server Configuration.\n\nSystem currently authenticates connection with remote KMIP Server with a TLS handshake. `certificate` and\n`certificate_authority` determine the certs which will be used to initiate the TLS handshake with `server`.\n\n`validate` is enabled by default. When enabled, system will test connection to `server` making sure\nit's reachable.\n\n`manage_zfs_keys`/`manage_sed_disks` when enabled will sync keys from local database to remote KMIP server.\nWhen disabled, if there are any keys left to be retrieved from the KMIP server,\nit will sync them back to local database.\n\n`enabled` if true, cannot be set to disabled if there are existing keys pending to be synced. However users\ncan still perform this action by enabling `force_clear`.\n\n`ssl_version` can be specified to match the ssl configuration being used by KMIP server.\n\n`change_server` is a boolean field which allows users to migrate data between two KMIP servers. System\nwill first migrate keys from old KMIP server to local database and then migrate the keys from local database\nto new KMIP server. If it is unable to retrieve all the keys from old server, this will fail. Users can bypass\nthis by enabling `force_clear`.\n\n`force_clear` is a boolean option which when enabled will in this case remove all\npending keys to be synced from database. It should be used with extreme caution as users may end up with\nnot having ZFS dataset or SED disks keys leaving them locked forever. It is disabled by default.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kmip_update_0"
              }
            }
          }
        }
      }
    },
    "/kmip/clear_sync_pending_keys": {
      "get": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Clear all keys which are pending to be synced between KMIP server and TN database.\n\nFor ZFS/SED keys, we remove the UID from local database with which we are able to retrieve ZFS/SED keys.\nIt should be used with caution."
      }
    },
    "/kmip/kmip_sync_pending": {
      "get": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns true or false based on if there are keys which are to be synced from local database to remote KMIP\nserver or vice versa."
      }
    },
    "/kmip/ssl_version_choices": {
      "get": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve valid SSL version choices to be used when configuring kmip service."
      }
    },
    "/kmip/sync_keys": {
      "get": {
        "tags": [
          "kmip"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sync ZFS/SED keys between KMIP Server and TN database."
      }
    },
    "/kubernetes": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`pool` must be a valid ZFS pool configured in the system. Kubernetes service will initialise the pool by\ncreating datasets under `pool_name/ix-applications`.\n\n`configure_gpus` is a boolean to enable or disable to prevent automatically loading any GPU Support\ninto kubernetes. This includes not loading any daemonsets for Intel and NVIDIA support.\n\n`servicelb` is a boolean to enable or disable the integrated k3s Service Loadbalancer called \"Klipper\".\nThis can be set to disabled to enable the user to run another LoadBalancer or no LoadBalancer at all.\n\n`cluster_cidr` is the CIDR to be used for default NAT network between workloads.\n\n`service_cidr` is the CIDR to be used for kubernetes services which are an abstraction and refer to a\nlogically set of kubernetes pods.\n\n`cluster_dns_ip` is the IP of the DNS server running for the kubernetes cluster. It must be in the range\nof `service_cidr`.\n\nSpecifying values for `cluster_cidr`, `service_cidr` and `cluster_dns_ip` are permanent and a subsequent change\nrequires re-initialisation of the applications. To clarify, system will destroy old `ix-applications` dataset\nand any data within it when any of the values for the above configuration change.\n\n`node_ip` is the IP address which the kubernetes cluster will assign to the TrueNAS node. It defaults to\n0.0.0.0 and the cluster in this case will automatically manage which IP address to use for managing traffic\nfor default NAT network.\n\nBy default kubernetes pods will be using default gateway of the system for outward traffic. This might\nnot be desirable for certain users who want to separate NAT traffic over a specific interface / route. System\nwill create a L3 network which will be routing the traffic towards default gateway for NAT.\n\nIf users want to restrict traffic over a certain gateway / interface, they can specify a default route\nfor the NAT traffic. `route_v4_interface` and `route_v4_gateway` will set a default route for the kubernetes\ncluster IPv4 traffic. Similarly `route_v6_interface` and 'route_v6_gateway` can be used to specify default\nroute for IPv6 traffic.\n\nIn case user is switching pools and the new desired pool has not been configured for kubernetes before, it\nis possible to replicate data from old pool to new pool with setting `migrate_applications` attribute. This\nwill replicate contents of old pool's ix-applications dataset to the new pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_update_0"
              }
            }
          }
        }
      }
    },
    "/kubernetes/backup_chart_releases": {
      "post": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a backup of existing chart releases.\n\nThe backup will save helm configuration with history for each chart release and then take a\nsnapshot of `ix-applications` dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_backup_chart_releases_0"
              }
            }
          }
        }
      }
    },
    "/kubernetes/bindip_choices": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns ip choices for Kubernetes service to use."
      }
    },
    "/kubernetes/delete_backup": {
      "post": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Delete `backup_name` chart releases backup.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_delete_backup_0"
              }
            }
          }
        }
      }
    },
    "/kubernetes/events": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns events for kubernetes node."
      }
    },
    "/kubernetes/list_backups": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List existing chart releases backups."
      }
    },
    "/kubernetes/node_ip": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns IP used by kubernetes which kubernetes uses to allow incoming connections."
      }
    },
    "/kubernetes/restore_backup": {
      "post": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restore `backup_name` chart releases backup.\n\nIt should be noted that a rollback will be initiated which will destroy any newer snapshots/clones\nof `ix-applications` dataset then the snapshot in question of `backup_name`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_restore_backup"
              }
            }
          }
        }
      }
    },
    "/kubernetes/route_interface_choices": {
      "get": {
        "tags": [
          "kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns Interface choices for Kubernetes service to use for ipv4 connections."
      }
    },
    "/ldap": {
      "get": {
        "tags": [
          "ldap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "ldap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`hostname` list of ip addresses or hostnames of LDAP servers with\nwhich to communicate in order of preference. Failover only occurs\nif the current LDAP server is unresponsive.\n\n`basedn` specifies the default base DN to use when performing ldap\noperations. The base must be specified as a Distinguished Name in LDAP\nformat.\n\n`binddn` specifies the default bind DN to use when performing ldap\noperations. The bind DN must be specified as a Distinguished Name in\nLDAP format.\n\n`anonbind` use anonymous authentication.\n\n`ssl` establish SSL/TLS-protected connections to the LDAP server(s).\nGSSAPI signing is disabled on SSL/TLS-protected connections if\nkerberos authentication is used.\n\n`certificate` LDAPs client certificate to be used for certificate-\nbased authentication.\n\n`validate_certificates` specifies whether to perform checks on server\ncertificates in a TLS session. If enabled, TLS_REQCERT demand is set.\nThe server certificate is requested. If no certificate is provided or\nif a bad certificate is provided, the session is immediately terminated.\nIf disabled, TLS_REQCERT allow is set. The server certificate is\nrequested, but all errors are ignored.\n\n`kerberos_realm` in which the server is located. This parameter is\nonly required for SASL GSSAPI authentication to the remote LDAP server.\n\n`kerberos_principal` kerberos principal to use for SASL GSSAPI\nauthentication to the remote server. If `kerberos_realm` is specified\nwithout a keytab, then the `binddn` and `bindpw` are used to\nperform to obtain the ticket necessary for GSSAPI authentication.\n\n`timeout` specifies  a  timeout  (in  seconds) after which calls to\nsynchronous LDAP APIs will abort if no response is received.\n\n`dns_timeout` specifies the timeout (in seconds) after which the\npoll(2)/select(2) following a connect(2) returns in case of no activity\nfor openldap. For nslcd this specifies the time limit (in seconds) to\nuse when connecting to the directory server. This directly impacts the\nlength of time that the LDAP service tries before failing over to\na secondary LDAP URI.\n\n`has_samba_schema` determines whether to configure samba to use the\nldapsam passdb backend to provide SMB access to LDAP users. This feature\nrequires the presence of Samba LDAP schema extensions on the remote\nLDAP server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ldap_update_0"
              }
            }
          }
        }
      }
    },
    "/ldap/get_state": {
      "get": {
        "tags": [
          "ldap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Wrapper function for 'directoryservices.get_state'. Returns only the state of the\nLDAP service."
      }
    },
    "/ldap/schema_choices": {
      "get": {
        "tags": [
          "ldap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns list of available LDAP schema choices."
      }
    },
    "/ldap/ssl_choices": {
      "get": {
        "tags": [
          "ldap"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns list of SSL choices."
      }
    },
    "/mail": {
      "get": {
        "tags": [
          "mail"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "mail"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Mail Service Configuration.\n\n`fromemail` is used as a sending address which the mail server will use for sending emails.\n\n`outgoingserver` is the hostname or IP address of SMTP server used for sending an email.\n\n`security` is type of encryption desired.\n\n`smtp` is a boolean value which when set indicates that SMTP authentication has been enabled and `user`/`pass`\nare required attributes now.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mail_update_0"
              }
            }
          }
        }
      }
    },
    "/mail/send": {
      "post": {
        "tags": [
          "mail"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sends mail using configured mail settings.\n\n`text` will be formatted to HTML using Markdown and rendered using default E-Mail template.\nYou can put your own HTML using `html`. If `html` is null, no HTML MIME part will be added to E-Mail.\n\nIf `attachments` is true, a list compromised of the following dict is required\nvia HTTP upload:\n  - headers(list)\n    - name(str)\n    - value(str)\n    - params(dict)\n  - content (str)\n\n[\n {\n  \"headers\": [\n   {\n    \"name\": \"Content-Transfer-Encoding\",\n    \"value\": \"base64\"\n   },\n   {\n    \"name\": \"Content-Type\",\n    \"value\": \"application/octet-stream\",\n    \"params\": {\n     \"name\": \"test.txt\"\n    }\n   }\n  ],\n  \"content\": \"dGVzdAo=\"\n }\n]\n\nA file might be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mail_send"
              }
            }
          }
        }
      }
    },
    "/network/configuration": {
      "get": {
        "tags": [
          "network.configuration"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "network.configuration"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Network Configuration Service configuration.\n\n`ipv4gateway` if set is used instead of the default gateway provided by DHCP.\n\n`nameserver1` is primary DNS server.\n\n`nameserver2` is secondary DNS server.\n\n`nameserver3` is tertiary DNS server.\n\n`httpproxy` attribute must be provided if a proxy is to be used for network operations.\n\n`netwait_enabled` is a boolean attribute which when set indicates that network services will not start at\nboot unless they are able to ping the addresses listed in `netwait_ip` list.\n\n`service_announcement` determines the broadcast protocols that will be used to advertise the server.\n`netbios` enables the NetBIOS name server (NBNS), which starts concurrently with the SMB service. SMB clients\nwill only perform NBNS lookups if SMB1 is enabled. NBNS may be required for legacy SMB clients.\n`mdns` enables multicast DNS service announcements for enabled services. `wsd` enables Web Service\nDiscovery support.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/network_configuration_update_0"
              }
            }
          }
        }
      }
    },
    "/network/configuration/activity_choices": {
      "get": {
        "tags": [
          "network.configuration"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns allowed/forbidden network activity choices."
      }
    },
    "/network/general/summary": {
      "get": {
        "tags": [
          "network.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve general information for current Network.\n\nReturns a dictionary. For example:\n\n"
      }
    },
    "/nfs": {
      "get": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update NFS Service Configuration.\n\n`servers` represents number of servers to create.\n\nWhen `allow_nonroot` is set, it allows non-root mount requests to be served.\n\n`bindip` is a list of IP's on which NFS will listen for requests. When it is unset/empty, NFS listens on\nall available addresses.\n\n`v4` when set means that we switch from NFSv3 to NFSv4.\n\n`v4_v3owner` when set means that system will use NFSv3 ownership model for NFSv4.\n\n`v4_krb` will force NFS shares to fail if the Kerberos ticket is unavailable.\n\n`v4_domain` overrides the default DNS domain name for NFSv4.\n\n`mountd_port` specifies the port mountd(8) binds to.\n\n`rpcstatd_port` specifies the port rpc.statd(8) binds to.\n\n`rpclockd_port` specifies the port rpclockd_port(8) binds to.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nfs_update_0"
              }
            }
          }
        }
      }
    },
    "/nfs/add_principal": {
      "post": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Use user-provided admin credentials to kinit, add NFS SPN\nentries to the remote kerberos server, and then append the new entries\nto our system keytab.\n\nCurrently this is only supported in AD environments.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nfs_add_principal_0"
              }
            }
          }
        }
      }
    },
    "/nfs/bindip_choices": {
      "get": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns ip choices for NFS service to use"
      }
    },
    "/nfs/client_count": {
      "get": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return currently connected clients count.\nCount may not be accurate if NFSv3 protocol is in use\ndue to potentially stale rmtab entries."
      }
    },
    "/nfs/get_nfs3_clients": {
      "get": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Read contents of rmtab. This information may not\nbe accurate due to stale entries. This is ultimately\na limitation of the NFSv3 protocol.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/nfs/get_nfs4_clients": {
      "get": {
        "tags": [
          "nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Read information about NFSv4 clients from\n/proc/fs/nfsd/clients\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/openvpn/client": {
      "get": {
        "tags": [
          "openvpn.client"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "openvpn.client"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update OpenVPN Client configuration.\n\n`remote` can be a valid ip address / domain which openvpn will try to connect to.\n\n`nobind` must be enabled if OpenVPN client / server are to run concurrently.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/openvpn_client_update_0"
              }
            }
          }
        }
      }
    },
    "/openvpn/client/authentication_algorithm_choices": {
      "get": {
        "tags": [
          "openvpn.client"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of valid authentication algorithms which can be used with OpenVPN server."
      }
    },
    "/openvpn/client/cipher_choices": {
      "get": {
        "tags": [
          "openvpn.client"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of valid ciphers which can be used with OpenVPN server."
      }
    },
    "/openvpn/server": {
      "get": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update OpenVPN Server configuration.\n\nWhen `tls_crypt_auth_enabled` is enabled and `tls_crypt_auth` not provided, a static key is automatically\ngenerated to be used with OpenVPN server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/openvpn_server_update_0"
              }
            }
          }
        }
      }
    },
    "/openvpn/server/authentication_algorithm_choices": {
      "get": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of valid authentication algorithms which can be used with OpenVPN server."
      }
    },
    "/openvpn/server/cipher_choices": {
      "get": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary of valid ciphers which can be used with OpenVPN server."
      }
    },
    "/openvpn/server/client_configuration_generation": {
      "post": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a configuration for OpenVPN client which can be used with any client to connect to FN/TN OpenVPN\nserver.\n\n`client_certificate_id` should be a valid certificate issued for use with OpenVPN client service.\n\n`server_address` if specified auto-fills the remote directive in the OpenVPN configuration enabling the end\nuser to use the file without making any edits to connect to OpenVPN server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/openvpn_server_client_configuration_generation"
              }
            }
          }
        }
      }
    },
    "/openvpn/server/renew_static_key": {
      "get": {
        "tags": [
          "openvpn.server"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Reset OpenVPN server's TLS static key which will be used to encrypt/authenticate control channel packets."
      }
    },
    "/pool": {
      "get": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new ZFS Pool.\n\n`topology` is a object which requires at least one `data` entry.\nAll of `data` entries (vdevs) require to be of the same type.\n\n`deduplication` when set to ON or VERIFY makes sure that no block of data is duplicated in the pool. When\nVERIFY is specified, if two blocks have similar signatures, byte to byte comparison is performed to ensure that\nthe blocks are identical. This should be used in special circumstances as it carries a significant overhead.\n\n`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\n\n`encryption_options` specifies configuration for encryption of root dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for root dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption.\n\nIt should be noted that keys are stored by the system for automatic locking/unlocking\non import/export of encrypted datasets. If that is not desired, dataset should be created\nwith a passphrase as a key.\n\nExample of `topology`:\n\n    {\n        \"data\": [\n            {\"type\": \"RAIDZ1\", \"disks\": [\"da1\", \"da2\", \"da3\"]}\n        ],\n        \"cache\": [\n            {\"type\": \"STRIPE\", \"disks\": [\"da4\"]}\n        ],\n        \"log\": [\n            {\"type\": \"STRIPE\", \"disks\": [\"da5\"]}\n        ],\n        \"spares\": [\"da6\"]\n    }\n\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_create_0"
              }
            }
          }
        }
      }
    },
    "/pool/id/{id}": {
      "get": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update pool of `id`, adding the new topology.\n\nThe `type` of `data` must be the same of existing vdevs.\n\n"
      }
    },
    "/pool/attach": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "For TrueNAS Core/Enterprise platform, if the `oid` pool is passphrase GELI encrypted, `passphrase`\nmust be specified for this operation to succeed.\n\n`target_vdev` is the GUID of the vdev where the disk needs to be attached. In case of STRIPED vdev, this\nis the STRIPED disk GUID which will be converted to mirror. If `target_vdev` is mirror, it will be converted\ninto a n-way mirror.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_attach"
              }
            }
          }
        }
      }
    },
    "/pool/id/{id}/attachments": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Return a list of services dependent of this pool.\n\nResponsible for telling the user whether there is a related\nshare, asking for confirmation."
      }
    },
    "/pool/id/{id}/detach": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Detach a disk from pool of id `id`.\n\n`label` is the vdev guid or device name.\n\n"
      }
    },
    "/pool/id/{id}/expand": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Expand pool to fit all available disk space."
      }
    },
    "/pool/id/{id}/export": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Export pool of `id`.\n\n`cascade` will delete all attachments of the given pool (`pool.attachments`).\n`restart_services` will restart services that have open files on given pool.\n`destroy` will also PERMANENTLY destroy the pool/data.\n\n"
      }
    },
    "/pool/filesystem_choices": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns all available datasets, except the following:\n    1. system datasets\n    2. glusterfs datasets\n    3. application(s) internal datasets\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_filesystem_choices_0"
              }
            }
          }
        }
      }
    },
    "/pool/id/{id}/get_disks": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Get all disks in use by pools.\nIf `id` is provided only the disks from the given pool `id` will be returned."
      }
    },
    "/pool/get_instance": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_get_instance"
              }
            }
          }
        }
      }
    },
    "/pool/get_instance_by_name": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns pool with name `name`. If `name` is not found, Validation error is raised.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_get_instance_by_name_0"
              }
            }
          }
        }
      }
    },
    "/pool/import_disk": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Import a disk, by copying its content to a pool.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_import_disk"
              }
            }
          }
        }
      }
    },
    "/pool/import_disk_autodetect_fs_type": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Autodetect filesystem type for `pool.import_disk`.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_import_disk_autodetect_fs_type_0"
              }
            }
          }
        }
      }
    },
    "/pool/import_disk_msdosfs_locales": {
      "get": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get a list of locales for msdosfs type to be used in `pool.import_disk`."
      }
    },
    "/pool/import_find": {
      "get": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a job id which can be used to retrieve a list of pools available for\nimport with the following details as a result of the job:\nname, guid, status, hostname."
      }
    },
    "/pool/import_pool": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Import a pool found with `pool.import_find`.\n\nIf a `name` is specified the pool will be imported using that new name.\n\n`passphrase` DEPRECATED. GELI not supported on SCALE.\n\nIf `enable_attachments` is set to true, attachments that were disabled during pool export will be\nre-enabled.\n\nErrors:\n    ENOENT - Pool not found\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_import_pool_0"
              }
            }
          }
        }
      }
    },
    "/pool/id/{id}/is_upgraded": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Returns whether or not the pool of `id` is on the latest version and with all feature\nflags enabled.\n\n"
      }
    },
    "/pool/id/{id}/offline": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Offline a disk from pool of id `id`.\n\n`label` is the vdev guid or device name.\n\n"
      }
    },
    "/pool/id/{id}/online": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Online a disk from pool of id `id`.\n\n`label` is the vdev guid or device name.\n\n"
      }
    },
    "/pool/id/{id}/processes": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Returns a list of running processes using this pool."
      }
    },
    "/pool/id/{id}/remove": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Remove a disk from pool of id `id`.\n\n`label` is the vdev guid or device name.\n\nError codes:\n\n    EZFS_NOSPC(2032): out of space to remove a device\n    EZFS_NODEVICE(2017): no such device in pool\n    EZFS_NOREPLICAS(2019): no valid replicas\n\n"
      }
    },
    "/pool/id/{id}/replace": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Replace a disk on a pool.\n\n`label` is the ZFS guid or a device name\n`disk` is the identifier of a disk\nIf `preserve_settings` is true, then settings (power management, S.M.A.R.T., etc.) of a disk being replaced\nwill be applied to a new disk.\n\n"
      }
    },
    "/pool/id/{id}/scrub": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Performs a scrub action to pool of `id`.\n\n`action` can be either of \"START\", \"STOP\" or \"PAUSE\".\n\n"
      }
    },
    "/pool/id/{id}/upgrade": {
      "post": {
        "tags": [
          "pool"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Upgrade pool of `id` to latest version with all feature flags.\n\n"
      }
    },
    "/pool/dataset": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query Pool Datasets with `query-filters` and `query-options`.\n\nWe provide two ways to retrieve datasets. The first is a flat structure (default), where\nall datasets in the system are returned as separate objects which contain all data\nthere is for their children. This retrieval type is slightly slower because of duplicates in each object.\nThe second type is hierarchical, where only top level datasets are returned in the list. They contain all the\nchildren in the `children` key. This retrieval type is slightly faster.\nThese options are controlled by the `query-options.extra.flat` attribute (default true).\n\nIn some cases it might be desirable to only retrieve details of a dataset itself and not it's children, in this\ncase `query-options.extra.retrieve_children` should be explicitly specified and set to `false` which will\nresult in children not being retrieved.\n\nIn case only some properties are desired to be retrieved for datasets, consumer should specify\n`query-options.extra.properties` which when `null` ( which is the default ) will retrieve all properties\nand otherwise a list can be specified like `[\"type\", \"used\", \"available\"]` to retrieve selective properties.\nIf no properties are desired, in that case an empty list should be sent.\n\n`query-options.extra.snapshots` can be set to retrieve snapshot(s) of dataset in question.\n\n`query-options.extra.snapshots_recursive` can be set to retrieve snapshot(s) recursively of dataset in question.\nIf `query-options.extra.snapshots_recursive` and `query-options.extra.snapshots` are set, snapshot(s) will be\nretrieved recursively.\n\n`query-options.extra.snapshots_properties` can be specified to list out properties which should be retrieved\nfor snapshot(s) related to each dataset. By default only name of the snapshot would be retrieved, however\nif `null` is specified all properties of the snapshot would be retrieved in this case.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a dataset/zvol.\n\n`volsize` is required for type=VOLUME and is supposed to be a multiple of the block size.\n`sparse` and `volblocksize` are only used for type=VOLUME.\n\n`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\nThere are 2 cases where ZFS encryption is not allowed for a dataset:\n1) Pool in question is GELI encrypted.\n2) If the parent dataset is encrypted with a passphrase and `name` is being created\n   with a key for encrypting the dataset.\n\n`encryption_options` specifies configuration for encryption of dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption.\n\nIt should be noted that keys are stored by the system for automatic locking/unlocking\non import/export of encrypted datasets. If that is not desired, dataset should be created\nwith a passphrase as a key.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_create_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/id/{id}": {
      "delete": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete dataset/zvol `id`.\n\n`recursive` will also delete/destroy all children datasets.\n`force` will force delete busy datasets.\n\n"
      },
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query Pool Datasets with `query-filters` and `query-options`.\n\nWe provide two ways to retrieve datasets. The first is a flat structure (default), where\nall datasets in the system are returned as separate objects which contain all data\nthere is for their children. This retrieval type is slightly slower because of duplicates in each object.\nThe second type is hierarchical, where only top level datasets are returned in the list. They contain all the\nchildren in the `children` key. This retrieval type is slightly faster.\nThese options are controlled by the `query-options.extra.flat` attribute (default true).\n\nIn some cases it might be desirable to only retrieve details of a dataset itself and not it's children, in this\ncase `query-options.extra.retrieve_children` should be explicitly specified and set to `false` which will\nresult in children not being retrieved.\n\nIn case only some properties are desired to be retrieved for datasets, consumer should specify\n`query-options.extra.properties` which when `null` ( which is the default ) will retrieve all properties\nand otherwise a list can be specified like `[\"type\", \"used\", \"available\"]` to retrieve selective properties.\nIf no properties are desired, in that case an empty list should be sent.\n\n`query-options.extra.snapshots` can be set to retrieve snapshot(s) of dataset in question.\n\n`query-options.extra.snapshots_recursive` can be set to retrieve snapshot(s) recursively of dataset in question.\nIf `query-options.extra.snapshots_recursive` and `query-options.extra.snapshots` are set, snapshot(s) will be\nretrieved recursively.\n\n`query-options.extra.snapshots_properties` can be specified to list out properties which should be retrieved\nfor snapshot(s) related to each dataset. By default only name of the snapshot would be retrieved, however\nif `null` is specified all properties of the snapshot would be retrieved in this case.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Updates a dataset/zvol `id`.\n\n"
      }
    },
    "/pool/dataset/id/{id}/attachments": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a list of services dependent of this dataset.\n\nResponsible for telling the user whether there is a related\nshare, asking for confirmation.\n\nExample return value:\n[\n  {\n    \"type\": \"NFS Share\",\n    \"service\": \"nfs\",\n    \"attachments\": [\"/mnt/tank/work\"]\n  }\n]"
      }
    },
    "/pool/dataset/change_key": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Change encryption properties for `id` encrypted dataset.\n\nChanging dataset encryption to use passphrase instead of a key is not allowed if:\n\n1) It has encrypted roots as children which are encrypted with a key\n2) If it is a root dataset where the system dataset is located\n\nA file might be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_change_key"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/checksum_choices": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve checksums supported for ZFS dataset."
      }
    },
    "/pool/dataset/compression_choices": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve compression algorithm supported by ZFS."
      }
    },
    "/pool/dataset/destroy_snapshots": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Destroy specified snapshots of a given dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_destroy_snapshots"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/details": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve all dataset(s) details outlining any services/tasks which might be consuming the dataset(s)."
      }
    },
    "/pool/dataset/encryption_algorithm_choices": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve encryption algorithms supported for ZFS dataset encryption."
      }
    },
    "/pool/dataset/encryption_summary": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve summary of all encrypted roots under `id`.\n\nKeys/passphrase can be supplied to check if the keys are valid.\n\nIt should be noted that there are 2 keys which show if a recursive unlock operation is\ndone for `id`, which dataset will be unlocked and if not why it won't be unlocked. The keys\nnamely are \"unlock_successful\" and \"unlock_error\". The former is a boolean value showing if unlock\nwould succeed/fail. The latter is description why it failed if it failed.\n\nIn some cases it's possible that the provided key/passphrase is valid but the path where the dataset is\nsupposed to be mounted after being unlocked already exists and is not empty. In this case, unlock operation\nwould fail and `unlock_error` will reflect this error appropriately. This can be overridden by setting\n`encryption_root_summary_options.datasets.X.force` boolean flag or by setting\n`encryption_root_summary_options.force` flag. In practice, when the dataset is going to be unlocked\nand these flags have been provided to `pool.dataset.unlock`, system will rename the directory/file path\nwhere the dataset should be mounted resulting in successful unlock of the dataset.\n\nIf a dataset is already unlocked, it will show up as true for \"unlock_successful\" regardless of what\nkey user provided as the unlock keys in the output are to reflect what a real unlock operation would\nbehave. If user is interested in seeing if a provided key is valid or not, then the key to look out for\nin the output is \"valid_key\" which based on what system has in database or if a user provided one, validates\nthe key and sets a boolean value for the dataset.\n\nExample output:\n[\n    {\n        \"name\": \"vol\",\n        \"key_format\": \"PASSPHRASE\",\n        \"key_present_in_database\": false,\n        \"valid_key\": true,\n        \"locked\": true,\n        \"unlock_error\": null,\n        \"unlock_successful\": true\n    },\n    {\n        \"name\": \"vol/c1/d1\",\n        \"key_format\": \"PASSPHRASE\",\n        \"key_present_in_database\": false,\n        \"valid_key\": false,\n        \"locked\": true,\n        \"unlock_error\": \"Provided key is invalid\",\n        \"unlock_successful\": false\n    },\n    {\n        \"name\": \"vol/c\",\n        \"key_format\": \"PASSPHRASE\",\n        \"key_present_in_database\": false,\n        \"valid_key\": false,\n        \"locked\": true,\n        \"unlock_error\": \"Key not provided\",\n        \"unlock_successful\": false\n    },\n    {\n        \"name\": \"vol/c/d2\",\n        \"key_format\": \"PASSPHRASE\",\n        \"key_present_in_database\": false,\n        \"valid_key\": false,\n        \"locked\": true,\n        \"unlock_error\": \"Child cannot be unlocked when parent \"vol/c\" is locked and provided key is invalid\",\n        \"unlock_successful\": false\n    }\n]\n\nA file might be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_encryption_summary"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/export_key": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Export own encryption key for dataset `id`. If `download` is `true`, key will be downloaded in a json file\nwhere the same file can be used to unlock the dataset, otherwise it will be returned as string.\n\nPlease refer to websocket documentation for downloading the file.\n\nA file might be downloaded from this endpoint. Please specify `?download=0` to fetch a method call result instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_export_key"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/export_keys": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Export keys for `id` and its children which are stored in the system. The exported file is a JSON file\nwhich has a dictionary containing dataset names as keys and their keys as the value.\n\nPlease refer to websocket documentation for downloading the file.\n\nA file will be downloaded from this endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_export_keys_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/get_instance": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_get_instance"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/id/{id}/get_quota": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a list of the specified `quota_type` of quotas on the ZFS dataset `ds`.\nSupport `query-filters` and `query-options`. used_bytes may not instantly\nupdate as space is used.\n\nWhen quota_type is not DATASET, each quota entry has these fields:\n\n`id` - the uid or gid to which the quota applies.\n\n`name` - the user or group name to which the quota applies. Value is\nnull if the id in the quota cannot be resolved to a user or group. This\nindicates that the user or group does not exist on the server.\n\n`quota` - the quota size in bytes.  Absent if no quota is set.\n\n`used_bytes` - the amount of bytes the user has written to the dataset.\nA value of zero means unlimited.\n\n`obj_quota` - the number of objects that may be owned by `id`.\nA value of zero means unlimited.  Absent if no objquota is set.\n\n`obj_used` - the number of objects currently owned by `id`.\n\nNote: SMB client requests to set a quota granting no space will result\nin an on-disk quota of 1 KiB."
      }
    },
    "/pool/dataset/inherit_parent_encryption_properties": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Allows inheriting parent's encryption root discarding its current encryption settings. This\ncan only be done where `id` has an encrypted parent and `id` itself is an encryption root.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_inherit_parent_encryption_properties_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/lock": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Locks `id` dataset. It will unmount the dataset and its children before locking.\n\nAfter the dataset has been unmounted, system will set immutable flag on the dataset's mountpoint where\nthe dataset was mounted before it was locked making sure that the path cannot be modified. Once the dataset\nis unlocked, it will not be affected by this change and consumers can continue consuming it.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_lock"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/mountpoint": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns mountpoint for specific mounted dataset. If it is not mounted and `raise` is `true` (default), an\nerror is raised. `null` is returned otherwise.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_mountpoint"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/id/{id}/permission": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Set permissions for a dataset `id`. Permissions may be specified as\neither a posix `mode` or an `acl`. This method is a wrapper around\n`filesystem.setperm`, `filesystem.setacl`, and `filesystem.chown`\n\n`filesystem.setperm` is called if `mode` is specified.\n`filesystem.setacl` is called if `acl` is specified or if the\noption `set_default_acl` is selected.\n`filesystem.chown` is called if neither `mode` nor `acl` is\nspecified.\n\nThe following `options` are supported:\n\n`set_default_acl` - apply a default ACL appropriate for specified\ndataset. Default ACL is `NFS4_RESTRICTED` or `POSIX_RESTRICTED`\nACL template builtin with additional entries builtin_users group\nand builtin_administrators group. See documentation for\n`filesystem.acltemplate` for more details.\n\n`stripacl` - this option must be set in order to apply a POSIX\nmode to a dataset that has a non-trivial ACL. The effect will\nbe to remove existing ACL and replace with specified mode.\n\n`recursive` - apply permissions recursively to dataset (all files\nand directories will be impacted.\n\n`traverse` - permit recursive job to traverse filesystem boundaries\n(child datasets).\n\n"
      }
    },
    "/pool/dataset/id/{id}/processes": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Return a list of processes using this dataset.\n\nExample return value:\n\n[\n  {\n    \"pid\": 2520,\n    \"name\": \"smbd\",\n    \"service\": \"cifs\"\n  },\n  {\n    \"pid\": 97778,\n    \"name\": \"minio\",\n    \"cmdline\": \"/usr/local/bin/minio -C /usr/local/etc/minio server --address=0.0.0.0:9000 --quiet /mnt/tank/wk\"\n  }\n]"
      }
    },
    "/pool/dataset/id/{id}/promote": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Promote the cloned dataset `id`."
      }
    },
    "/pool/dataset/recommended_zvol_blocksize": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Helper method to get recommended size for a new zvol (dataset of type VOLUME).\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_recommended_zvol_blocksize_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/recordsize_choices": {
      "get": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      }
    },
    "/pool/dataset/id/{id}/set_quota": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "There are three over-arching types of quotas for ZFS datasets.\n1) dataset quotas and refquotas. If a DATASET quota type is specified in\nthis API call, then the API acts as a wrapper for `pool.dataset.update`.\n2) User and group quotas. These limit the amount of disk space consumed\nby files that are owned by the specified users or groups. If the respective\n\"object quota\" type is specfied, then the quota limits the number of objects\nthat may be owned by the specified user or group.\n3) Project quotas. These limit the amount of disk space consumed by files\nthat are owned by the specified project. Project quotas are not yet implemended.\nThis API allows users to set multiple quotas simultaneously by submitting a\nlist of quotas. The list may contain all supported quota types.\n`ds` the name of the target ZFS dataset.\n`quotas` specifies a list of `quota_entry` entries to apply to dataset.\n`quota_entry` entries have these required parameters:\n`quota_type`: specifies the type of quota to apply to the dataset. Possible\nvalues are USER, USEROBJ, GROUP, GROUPOBJ, and DATASET. USEROBJ and GROUPOBJ\nquotas limit the number of objects consumed by the specified user or group.\n`id`: the uid, gid, or name to which the quota applies. If quota_type is\n'DATASET', then `id` must be either `QUOTA` or `REFQUOTA`.\n`quota_value`: the quota size in bytes. Setting a value of `0` removes\nthe user or group quota."
      }
    },
    "/pool/dataset/snapshot_count": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns snapshot count for specified `dataset`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_snapshot_count_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/unlock": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Unlock dataset `id` (and its children if `unlock_options.recursive` is `true`).\n\nIf `id` dataset is not encrypted an exception will be raised. There is one exception:\nwhen `id` is a root dataset and `unlock_options.recursive` is specified, encryption\nvalidation will not be performed for `id`. This allow unlocking encrypted children for the entire pool `id`.\n\nThere are two ways to supply the key(s)/passphrase(s) for unlocking a dataset:\n\n1. Upload a json file which contains encrypted dataset keys (it will be read from the input pipe if\n`unlock_options.key_file` is `true`). The format is the one that is used for exporting encrypted dataset keys\n(`pool.export_keys`).\n\n2. Specify a key or a passphrase for each unlocked dataset using `unlock_options.datasets`.\n\nIf `unlock_options.datasets.{i}.recursive` is `true`, a key or a passphrase is applied to all the encrypted\nchildren of a dataset.\n\n`unlock_options.toggle_attachments` controls whether attachments  should be put in action after unlocking\ndataset(s). Toggling attachments can theoretically lead to service interruption when daemons configurations are\nreloaded (this should not happen,  and if this happens it should be considered a bug). As TrueNAS does not have\na state for resources that should be unlocked but are still locked, disabling this option will put the system\ninto an inconsistent state so it should really never be disabled.\n\nIn some cases it's possible that the provided key/passphrase is valid but the path where the dataset is\nsupposed to be mounted after being unlocked already exists and is not empty. In this case, unlock operation\nwould fail. This can be overridden by setting `unlock_options.datasets.X.force` boolean flag or by setting\n`unlock_options.force` flag. When any of these flags are set, system will rename the existing\ndirectory/file path where the dataset should be mounted resulting in successful unlock of the dataset.\n\nA file might be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_unlock"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/unlock_services_restart_choices": {
      "post": {
        "tags": [
          "pool.dataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get a mapping of services identifiers and labels that can be restart on dataset unlock.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_unlock_services_restart_choices_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/userprop": {
      "get": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all user properties for ZFS datasets.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a user property for a given `id` dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_userprop_create_0"
              }
            }
          }
        }
      }
    },
    "/pool/dataset/userprop/id/{id}": {
      "delete": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete user property `dataset_user_prop_delete.name` for `id` dataset."
      },
      "get": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all user properties for ZFS datasets.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update `dataset_user_prop_update.name` user property for `id` dataset."
      }
    },
    "/pool/dataset/userprop/get_instance": {
      "post": {
        "tags": [
          "pool.dataset.userprop"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_dataset_userprop_get_instance"
              }
            }
          }
        }
      }
    },
    "/pool/resilver": {
      "get": {
        "tags": [
          "pool.resilver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "pool.resilver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Configure Pool Resilver Priority.\n\nIf `begin` time is greater than `end` time it means it will rollover the day, e.g.\nbegin = \"19:00\", end = \"05:00\" will increase pool resilver priority from 19:00 of one day\nuntil 05:00 of the next day.\n\n`weekday` follows crontab(5) values 0-7 (0 or 7 is Sun).\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_resilver_update_0"
              }
            }
          }
        }
      }
    },
    "/pool/scrub": {
      "get": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a scrub task for a pool.\n\n`threshold` refers to the minimum amount of time in days has to be passed before\na scrub can run again.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_scrub_create_0"
              }
            }
          }
        }
      }
    },
    "/pool/scrub/id/{id}": {
      "delete": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete scrub task of `id`."
      },
      "get": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update scrub task of `id`."
      }
    },
    "/pool/scrub/get_instance": {
      "post": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_scrub_get_instance"
              }
            }
          }
        }
      }
    },
    "/pool/scrub/run": {
      "post": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Initiate a scrub of a pool `name` if last scrub was performed more than `threshold` days before.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_scrub_run"
              }
            }
          }
        }
      }
    },
    "/pool/scrub/scrub": {
      "post": {
        "tags": [
          "pool.scrub"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Start/Stop/Pause a scrub on pool `name`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_scrub_scrub"
              }
            }
          }
        }
      }
    },
    "/pool/snapshottask": {
      "get": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Periodic Snapshot Task\n\nCreate a Periodic Snapshot Task that will take snapshots of specified `dataset` at specified `schedule`.\nRecursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets\nor zvols from the snapshot.\nSnapshots will be automatically destroyed after a certain amount of time, specified by\n`lifetime_value` and `lifetime_unit`.\nIf multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot\nwill be kept until the last of these tasks reaches its expiry time.\nSnapshots will be named according to `naming_schema` which is a `strftime`-like template for snapshot name\nand must contain `%Y`, `%m`, `%d`, `%H` and `%M`.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_snapshottask_create_0"
              }
            }
          }
        }
      }
    },
    "/pool/snapshottask/id/{id}": {
      "delete": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a Periodic Snapshot Task with specific `id`\n\n"
      },
      "get": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a Periodic Snapshot Task with specific `id`\n\nSee the documentation for `create` method for information on payload contents\n\n"
      }
    },
    "/pool/snapshottask/id/{id}/delete_will_change_retention_for": {
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Returns a list of snapshots which will change the retention if periodic snapshot task `id` is deleted."
      }
    },
    "/pool/snapshottask/foreseen_count": {
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a number of snapshots (per-dataset) being retained if a periodic snapshot task with specific parameters\nis created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_snapshottask_foreseen_count_0"
              }
            }
          }
        }
      }
    },
    "/pool/snapshottask/get_instance": {
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pool_snapshottask_get_instance"
              }
            }
          }
        }
      }
    },
    "/pool/snapshottask/max_count": {
      "get": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a maximum amount of snapshots (per-dataset) the system can sustain."
      }
    },
    "/pool/snapshottask/max_total_count": {
      "get": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a maximum amount of snapshots (total) the system can sustain."
      }
    },
    "/pool/snapshottask/id/{id}/run": {
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Execute a Periodic Snapshot Task of `id`."
      }
    },
    "/pool/snapshottask/id/{id}/update_will_change_retention_for": {
      "post": {
        "tags": [
          "pool.snapshottask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Returns a list of snapshots which will change the retention if periodic snapshot task `id` is updated\nwith `data`."
      }
    },
    "/privilege": {
      "get": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a privilege.\n\n`name` is a name for privilege (must be unique).\n\n`local_groups` is a list of local user account group GIDs that gain this privilege.\n\n`ds_groups` is list of Directory Service group GIDs that will gain this privilege.\n\n`allowlist` is a list of API endpoints allowed for this privilege.\n\n`web_shell` controls whether users with this privilege are allowed to log in to the Web UI.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/privilege_create_0"
              }
            }
          }
        }
      }
    },
    "/privilege/id/{id}": {
      "delete": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete the privilege `id`."
      },
      "get": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update the privilege `id`."
      }
    },
    "/privilege/get_instance": {
      "post": {
        "tags": [
          "privilege"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/privilege_get_instance"
              }
            }
          }
        }
      }
    },
    "/replication": {
      "get": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Replication Task\n\nCreate a Replication Task that will push or pull ZFS snapshots to or from remote host..\n\n* `name` specifies a name for replication task\n* `direction` specifies whether task will `PUSH` or `PULL` snapshots\n* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine.\n* `source_datasets` is a non-empty list of datasets to replicate snapshots from\n* `target_dataset` is a dataset to put snapshots into. It must exist on target side\n* `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task\n* `properties` control whether we should send dataset properties along with snapshots\n* `periodic_snapshot_tasks` is a list of periodic snapshot task IDs that are sources of snapshots for this\n  replication task. Only push replication tasks can be bound to periodic snapshot tasks.\n* `naming_schema` is a list of naming schemas for pull replication\n* `also_include_naming_schema` is a list of naming schemas for push replication\n* `name_regex` will replicate all snapshots which names match specified regular expression\n* `auto` allows replication to run automatically on schedule or after bound periodic snapshot task\n* `schedule` is a schedule to run replication task. Only `auto` replication tasks without bound periodic\n  snapshot tasks can have a schedule\n* `restrict_schedule` restricts when replication task with bound periodic snapshot tasks runs. For example,\n  you can have periodic snapshot tasks that run every 15 minutes, but only run replication task every hour.\n* Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or\n  `restrict_schedule`\n* `allow_from_scratch` will destroy all snapshots on target side and replicate everything from scratch if none\n  of the snapshots on target side matches source snapshots\n* `readonly` controls destination datasets readonly property:\n  * `SET` will set all destination datasets to readonly=on after finishing the replication\n  * `REQUIRE` will require all existing destination datasets to have readonly=on property\n  * `IGNORE` will avoid this kind of behavior\n* `hold_pending_snapshots` will prevent source snapshots from being deleted by retention of replication fails\n  for some reason\n* `retention_policy` specifies how to delete old snapshots on target side:\n  * `SOURCE` deletes snapshots that are absent on source side\n  * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`\n  * `NONE` does not delete any snapshots\n* `compression` compresses SSH stream. Available only for SSH transport\n* `speed_limit` limits speed of SSH stream. Available only for SSH transport\n* `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`\n* `retries` specifies number of retries before considering replication failed\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_create_0"
              }
            }
          }
        }
      }
    },
    "/replication/id/{id}": {
      "delete": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a Replication Task with specific `id`\n\n"
      },
      "get": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a Replication Task with specific `id`\n\nSee the documentation for `create` method for information on payload contents\n\n"
      }
    },
    "/replication/count_eligible_manual_snapshots": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Count how many existing snapshots of `dataset` match `naming_schema`.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_count_eligible_manual_snapshots_0"
              }
            }
          }
        }
      }
    },
    "/replication/create_dataset": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates dataset on remote side\n\nAccepts `dataset` name, `transport` and SSH credentials ID (for non-local transport)\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_create_dataset"
              }
            }
          }
        }
      }
    },
    "/replication/get_instance": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_get_instance"
              }
            }
          }
        }
      }
    },
    "/replication/list_datasets": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List datasets on remote side\n\nAccepts `transport` and SSH credentials ID (for non-local transport)\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_list_datasets"
              }
            }
          }
        }
      }
    },
    "/replication/list_naming_schemas": {
      "get": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List all naming schemas used in periodic snapshot and replication tasks."
      }
    },
    "/replication/id/{id}/restore": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Create the opposite of replication task `id` (PULL if it was PUSH and vice versa)."
      }
    },
    "/replication/id/{id}/run": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Run Replication Task of `id`."
      }
    },
    "/replication/run_onetime": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Run replication task without creating it.\n\nIf `only_from_scratch` is `true` then replication will fail if target dataset already exists.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_run_onetime_0"
              }
            }
          }
        }
      }
    },
    "/replication/target_unmatched_snapshots": {
      "post": {
        "tags": [
          "replication"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Check if target has any snapshots that do not exist on source. Returns these snapshots grouped by dataset.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_target_unmatched_snapshots"
              }
            }
          }
        }
      }
    },
    "/replication/config": {
      "get": {
        "tags": [
          "replication.config"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "replication.config"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`max_parallel_replication_tasks` represents a maximum number of parallel replication tasks running.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replication_config_update_0"
              }
            }
          }
        }
      }
    },
    "/reporting": {
      "get": {
        "tags": [
          "reporting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "reporting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Configure Reporting Database settings.\n\nIf `cpu_in_percentage` is `true`, collectd reports CPU usage in percentage instead of \"jiffies\".\n\n`graphite` specifies a destination hostname or IP for collectd data sent by the Graphite plugin..\n\n`graphite_separateinstances` corresponds to collectd SeparateInstances option.\n\n`graph_age` specifies the maximum age of stored graphs in months. `graph_points` is the number of points for\neach hourly, daily, weekly, etc. graph. Changing these requires destroying the current reporting database,\nso when these fields are changed, an additional `confirm_rrd_destroy: true` flag must be present.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reporting_update_0"
              }
            }
          }
        }
      }
    },
    "/reporting/clear": {
      "get": {
        "tags": [
          "reporting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Clear reporting database."
      }
    },
    "/reporting/get_data": {
      "post": {
        "tags": [
          "reporting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get reporting data for given graphs.\n\nList of possible graphs can be retrieved using `reporting.graphs` call.\n\nFor the time period of the graph either `unit` and `page` OR `start` and `end` should be\nused, not both.\n\n`aggregate` will return aggregate available data for each graph (e.g. min, max, mean).\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reporting_get_data"
              }
            }
          }
        }
      }
    },
    "/reporting/graphs": {
      "get": {
        "tags": [
          "reporting"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/route/ipv4gw_reachable": {
      "post": {
        "tags": [
          "route"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the IPv4 gateway and verify if it is reachable by any interface.\n\nReturns:\n    bool: True if the gateway is reachable or otherwise False.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/route_ipv4gw_reachable_0"
              }
            }
          }
        }
      }
    },
    "/route/system_routes": {
      "get": {
        "tags": [
          "route"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get current/applied network routes.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/rsyncd": {
      "get": {
        "tags": [
          "rsyncd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "rsyncd"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Rsyncd Service Configuration.\n\n`auxiliary` attribute can be used to pass on any additional parameters from rsyncd.conf(5).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rsyncd_update_0"
              }
            }
          }
        }
      }
    },
    "/rsyncmod": {
      "get": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Rsyncmod module.\n\n`path` represents the path to a dataset. Path length is limited to 1023 characters maximum as per the limit\nenforced by FreeBSD. It is possible that we reach this max length recursively while transferring data. In that\ncase, the user must ensure the maximum path will not be too long or modify the recursed path to shorter\nthan the limit.\n\n`maxconn` is an integer value representing the maximum number of simultaneous connections. Zero represents\nunlimited.\n\n`hostsallow` is a list of patterns to match hostname/ip address of a connecting client. If list is empty,\nall hosts are allowed.\n\n`hostsdeny` is a list of patterns to match hostname/ip address of a connecting client. If the pattern is\nmatched, access is denied to the client. If no client should be denied, this should be left empty.\n\n`auxiliary` attribute can be used to pass on any additional parameters from rsyncd.conf(5).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rsyncmod_create_0"
              }
            }
          }
        }
      }
    },
    "/rsyncmod/id/{id}": {
      "delete": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Rsyncmod module of `id`."
      },
      "get": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Rsyncmod module of `id`."
      }
    },
    "/rsyncmod/get_instance": {
      "post": {
        "tags": [
          "rsyncmod"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rsyncmod_get_instance"
              }
            }
          }
        }
      }
    },
    "/rsynctask": {
      "get": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Rsync Task.\n\nSee the comment in Rsyncmod about `path` length limits.\n\n`remotehost` is ip address or hostname of the remote system. If username differs on the remote host,\n\"username@remote_host\" format should be used.\n\n`mode` represents different operating mechanisms for Rsync i.e Rsync Module mode / Rsync SSH mode.\n\nIn SSH mode, if `ssh_credentials` (a keychain credential of `SSH_CREDENTIALS` type) is specified then it is used\nto connect to the remote host. If it is not specified, then keys in `user`'s .ssh directory are used.\n`remotehost` and `remoteport` are not used in this case.\n\n`remotemodule` is the name of remote module, this attribute should be specified when `mode` is set to MODULE.\n\n`remotepath` specifies the path on the remote system.\n\n`validate_rpath` is a boolean which when sets validates the existence of the remote path.\n\n`direction` specifies if data should be PULLED or PUSHED from the remote system.\n\n`compress` when set reduces the size of the data which is to be transmitted.\n\n`archive` when set makes rsync run recursively, preserving symlinks, permissions, modification times, group,\nand special files.\n\n`delete` when set deletes files in the destination directory which do not exist in the source directory.\n\n`preserveperm` when set preserves original file permissions.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rsynctask_create_0"
              }
            }
          }
        }
      }
    },
    "/rsynctask/id/{id}": {
      "delete": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Rsync Task of `id`."
      },
      "get": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Rsync Task of `id`."
      }
    },
    "/rsynctask/get_instance": {
      "post": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rsynctask_get_instance"
              }
            }
          }
        }
      }
    },
    "/rsynctask/id/{id}/run": {
      "post": {
        "tags": [
          "rsynctask"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Job to run rsync task of `id`.\n\nOutput is saved to job log excerpt (not syslog)."
      }
    },
    "/s3": {
      "get": {
        "tags": [
          "s3"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "s3"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update S3 Service Configuration.\n\n`access_key` must only contain alphanumeric characters and should be between 5 and 20 characters.\n\n`secret_key` must only contain alphanumeric characters and should be between 8 and 40 characters.\n\n`browser` when set, enables the web user interface for the S3 Service.\n\n`certificate` is a valid certificate id which exists in the system. This is used to enable secure\nS3 connections.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/s3_update_0"
              }
            }
          }
        }
      }
    },
    "/s3/bindip_choices": {
      "get": {
        "tags": [
          "s3"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return ip choices for S3 service to use."
      }
    },
    "/sensor/query": {
      "get": {
        "tags": [
          "sensor"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/service": {
      "get": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all system services with `query-filters` and `query-options`.\n\nSupports the following extra options:\n`include_state` - performance optimization to avoid getting service state.\ndefaults to True.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/service/id/{id}": {
      "get": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Query all system services with `query-filters` and `query-options`.\n\nSupports the following extra options:\n`include_state` - performance optimization to avoid getting service state.\ndefaults to True.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update service entry of `id_or_name`.\n\nCurrently it only accepts `enable` option which means whether the\nservice should start on boot."
      }
    },
    "/service/get_instance": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_get_instance"
              }
            }
          }
        }
      }
    },
    "/service/reload": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Reload the service specified by `service`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_reload"
              }
            }
          }
        }
      }
    },
    "/service/restart": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restart the service specified by `service`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_restart"
              }
            }
          }
        }
      }
    },
    "/service/start": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Start the service specified by `service`.\n\nIf `silent` is `true` then in case of service startup failure, `false` will be returned. If `silent` is `false`\nthen in case of service startup failure, an exception will be raised.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_start"
              }
            }
          }
        }
      }
    },
    "/service/started": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Test if service specified by `service` has been started.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_started_0"
              }
            }
          }
        }
      }
    },
    "/service/started_or_enabled": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Test if service specified by `service` is started or enabled to start automatically.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_started_or_enabled_0"
              }
            }
          }
        }
      }
    },
    "/service/stop": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Stop the service specified by `service`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_stop"
              }
            }
          }
        }
      }
    },
    "/service/terminate_process": {
      "post": {
        "tags": [
          "service"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Terminate process by `pid`.\n\nFirst send `TERM` signal, then, if was not terminated in `timeout` seconds, send `KILL` signal.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/service_terminate_process"
              }
            }
          }
        }
      }
    },
    "/sharing/nfs": {
      "get": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a NFS Share.\n\n`path` local path to be exported.\n\n`aliases` IGNORED, for now.\n\n`networks` is a list of authorized networks that are allowed to access the share having format\n\"network/mask\" CIDR notation. If empty, all networks are allowed.\n\n`hosts` is a list of IP's/hostnames which are allowed to access the share. If empty, all IP's/hostnames are\nallowed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_nfs_create_0"
              }
            }
          }
        }
      }
    },
    "/sharing/nfs/id/{id}": {
      "delete": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete NFS Share of `id`."
      },
      "get": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update NFS Share of `id`."
      }
    },
    "/sharing/nfs/get_instance": {
      "post": {
        "tags": [
          "sharing.nfs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_nfs_get_instance"
              }
            }
          }
        }
      }
    },
    "/sharing/smb": {
      "get": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query shares with filters. In clustered environments, local datastore query\nis bypassed in favor of clustered registry.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a SMB Share.\n\n`purpose` applies common configuration presets depending on intended purpose.\n\n`path` path to export over the SMB protocol. If server is clustered, then this path will be\nrelative to the `cluster_volname`.\n\n`timemachine` when set, enables Time Machine backups for this share.\n\n`ro` when enabled, prohibits write access to the share.\n\n`guestok` when enabled, allows access to this share without a password.\n\n`hostsallow` is a list of hostnames / IP addresses which have access to this share.\n\n`hostsdeny` is a list of hostnames / IP addresses which are not allowed access to this share. If a handful\nof hostnames are to be only allowed access, `hostsdeny` can be passed \"ALL\" which means that it will deny\naccess to ALL hostnames except for the ones which have been listed in `hostsallow`.\n\n`acl` enables support for storing the SMB Security Descriptor as a Filesystem ACL.\n\n`streams` enables support for storing alternate datastreams as filesystem extended attributes.\n\n`fsrvp` enables support for the filesystem remote VSS protocol. This allows clients to create\nZFS snapshots through RPC.\n\n`shadowcopy` enables support for the volume shadow copy service.\n\n`auxsmbconf` is a string of additional smb4.conf parameters not covered by the system's API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_smb_create_0"
              }
            }
          }
        }
      }
    },
    "/sharing/smb/id/{id}": {
      "delete": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete SMB Share of `id`. This will forcibly disconnect SMB clients\nthat are accessing the share."
      },
      "get": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Query shares with filters. In clustered environments, local datastore query\nis bypassed in favor of clustered registry.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update SMB Share of `id`."
      }
    },
    "/sharing/smb/get_instance": {
      "post": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_smb_get_instance"
              }
            }
          }
        }
      }
    },
    "/sharing/smb/presets": {
      "get": {
        "tags": [
          "sharing.smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve pre-defined configuration sets for specific use-cases. These parameter\ncombinations are often non-obvious, but beneficial in these scenarios."
      }
    },
    "/sharing/webdav": {
      "get": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Webdav Share.\n\n`ro` when enabled prohibits users from writing to this share.\n\n`perm` when enabled automatically recursively changes the ownership of this share to\nwebdav ( user and group both ).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_webdav_create_0"
              }
            }
          }
        }
      }
    },
    "/sharing/webdav/id/{id}": {
      "delete": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Webdav Share of `id`."
      },
      "get": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Webdav Share of `id`."
      }
    },
    "/sharing/webdav/get_instance": {
      "post": {
        "tags": [
          "sharing.webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sharing_webdav_get_instance"
              }
            }
          }
        }
      }
    },
    "/smart": {
      "get": {
        "tags": [
          "smart"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "smart"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update SMART Service Configuration.\n\n`interval` is an integer value in minutes which defines how often smartd activates to check if any tests\nare configured to run.\n\n`critical`, `informational` and `difference` are integer values on which alerts for SMART are configured if\nthe disks temperature crosses the assigned threshold for each respective attribute. They default to 0 which\nindicates they are disabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_update_0"
              }
            }
          }
        }
      }
    },
    "/smart/test": {
      "get": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a SMART Test Task.\n\n`disks` is a list of valid disks which should be monitored in this task.\n\n`type` is specified to represent the type of SMART test to be executed.\n\n`all_disks` when enabled sets the task to cover all disks in which case `disks` is not required.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_test_create_0"
              }
            }
          }
        }
      }
    },
    "/smart/test/id/{id}": {
      "delete": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete SMART Test Task of `id`."
      },
      "get": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update SMART Test Task of `id`."
      }
    },
    "/smart/test/disk_choices": {
      "post": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns disk choices for S.M.A.R.T. test.\n\n`full_disk` will return full disk objects instead of just names.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_test_disk_choices_0"
              }
            }
          }
        }
      }
    },
    "/smart/test/get_instance": {
      "post": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_test_get_instance"
              }
            }
          }
        }
      }
    },
    "/smart/test/manual_test": {
      "post": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Run manual SMART tests for `disks`.\n\n`type` indicates what type of SMART test will be ran and must be specified.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_test_manual_test_0"
              }
            }
          }
        }
      }
    },
    "/smart/test/query_for_disk": {
      "post": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Query S.M.A.R.T. tests for the specified disk.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smart_test_query_for_disk_0"
              }
            }
          }
        }
      }
    },
    "/smart/test/results": {
      "get": {
        "tags": [
          "smart.test"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get disk(s) S.M.A.R.T. test(s) results.\n\n`options.extra.tests_filter` is an optional filter for tests results.\n\n\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/smb": {
      "get": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update SMB Service Configuration.\n\n`netbiosname` defaults to the original hostname of the system.\n\n`netbiosalias` a list of netbios aliases. If Server is joined to an AD domain, additional Kerberos\nService Principal Names will be generated for these aliases.\n\n`workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be\nautomatically set to the correct value during the process of joining an AD domain.\nNOTE: `workgroup` and `netbiosname` should have different values.\n\n`enable_smb1` allows legacy SMB clients to connect to the server when enabled.\n\n`aapl_extensions` enables support for SMB2 protocol extensions for MacOS clients. This is not a\nrequirement for MacOS support, but is currently a requirement for time machine support.\n\n`localmaster` when set, determines if the system participates in a browser election.\n\n`guest` attribute is specified to select the account to be used for guest access. It defaults to \"nobody\".\n\nThe group specified as the SMB `admin_group` will be automatically added as a foreign group member\nof S-1-5-32-544 (builtin\u0007dmins). This will afford the group all privileges granted to a local admin.\nAny SMB group may be selected (including AD groups).\n\n`ntlmv1_auth` enables a legacy and insecure authentication method, which may be required for legacy or\npoorly-implemented SMB clients.\n\n`smb_options` smb.conf parameters that are not covered by the above supported configuration options may be\nadded as an smb_option. Not all options are tested or supported, and behavior of smb_options may change\nbetween releases. Stability of smb.conf options is not guaranteed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_update_0"
              }
            }
          }
        }
      }
    },
    "/smb/bindip_choices": {
      "get": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List of valid choices for IP addresses to which to bind the SMB service.\nAddresses assigned by DHCP are excluded from the results."
      }
    },
    "/smb/client_count": {
      "get": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return currently connected clients count."
      }
    },
    "/smb/domain_choices": {
      "get": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "List of domains visible to winbindd. Returns empty list if winbindd is\nstopped."
      }
    },
    "/smb/get_remote_acl": {
      "post": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieves an ACL from a remote SMB server.\n\n`server` IP Address or hostname of the remote server\n\n`share` Share name\n\n`path` path on the remote SMB server. Use \"\" to separate path components\n\n`username` username to use for authentication\n\n`password` password to use for authentication\n\n`use_kerberos` use credentials to get a kerberos ticket for authentication.\nAD only.\n\n`output_format` format for resulting ACL data. Choices are either 'SMB',\nwhich will present the information as a Windows SD or 'LOCAL', which formats\nthe ACL information according local filesystem of the TrueNAS server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_get_remote_acl_0"
              }
            }
          }
        }
      }
    },
    "/smb/status": {
      "post": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns SMB server status (sessions, open files, locks, notifications).\n\n`info_level` type of information requests. Defaults to ALL.\n\n`status_options` additional options to filter query results. Supported\nvalues are as follows: `verbose` gives more verbose status output\n`fast` causes smbstatus to not check if the status data is valid by\nchecking if the processes that the status data refer to all still\nexist. This speeds up execution on busy systems and clusters but\nmight display stale data of processes that died without cleaning up\nproperly. `restrict_user` specifies the limits results to the specified\nuser.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_status"
              }
            }
          }
        }
      }
    },
    "/smb/unixcharset_choices": {
      "get": {
        "tags": [
          "smb"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      }
    },
    "/smb/sharesec": {
      "get": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Use query-filters to search the SMB share ACLs present on server.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update the ACL on a given SMB share. Will write changes to both\n/var/db/system/samba4/share_info.tdb and the configuration file.\nSince an SMB share will _always_ have an ACL present, there is little\ndistinction between the `create` and `update` methods apart from arguments.\n\n`share_name` - name of SMB share.\n\n`share_acl` a list of ACL entries (dictionaries) with the following keys:\n\n`ae_who_sid` who the ACL entry applies to expressed as a Windows SID\n\n`ae_who_name` who the ACL entry applies to expressed as a name. `ae_who_name` is\na dictionary containing the following keys: `domain` that the user is a member of,\n`name` username in the domain. The domain for local users is the netbios name of\nthe FreeNAS server.\n\n`ae_perm` string representation of the permissions granted to the user or group.\n`FULL` grants read, write, execute, delete, write acl, and change owner.\n`CHANGE` grants read, write, execute, and delete.\n`READ` grants read and execute.\n\n`ae_type` can be ALLOWED or DENIED.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_sharesec_create_0"
              }
            }
          }
        }
      }
    },
    "/smb/sharesec/id/{id}": {
      "delete": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Replace share ACL for the specified SMB share with the samba default ACL of S-1-1-0/FULL\n(Everyone - Full Control). In this case, access will be fully determined\nby the underlying filesystem ACLs and smb4.conf parameters governing access control\nand permissions.\nShare can be deleted by name or numerical by numerical index."
      },
      "get": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Use query-filters to search the SMB share ACLs present on server.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update the ACL on the share specified by the numerical index `id`. Will write changes\nto both /var/db/system/samba4/share_info.tdb and the configuration file."
      }
    },
    "/smb/sharesec/get_instance": {
      "post": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_sharesec_get_instance"
              }
            }
          }
        }
      }
    },
    "/smb/sharesec/getacl": {
      "post": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "View the ACL information for `share_name`. The share ACL is distinct from filesystem\nACLs which can be viewed by calling `filesystem.getacl`. `ae_who_name` will appear\nas `None` if the SMB service is stopped or if winbind is unable  to resolve the SID\nto a name.\n\nIf the `option` `resolve_sids` is set to `False` then the returned ACL will not\ncontain names.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/smb_sharesec_getacl"
              }
            }
          }
        }
      }
    },
    "/smb/sharesec/synchronize_acls": {
      "get": {
        "tags": [
          "smb.sharesec"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Synchronize the share ACL stored in the config database with Samba's running\nconfiguration as reflected in the share_info.tdb file.\n\nThe only situation in which the configuration stored in the database will\noverwrite samba's running configuration is if share_info.tdb is empty. Samba\nfakes a single S-1-1-0:ALLOW/0x0/FULL entry in the absence of an entry for a\nshare in share_info.tdb."
      }
    },
    "/snmp": {
      "get": {
        "tags": [
          "snmp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "snmp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update SNMP Service Configuration.\n\n`v3` when set enables SNMP version 3.\n\n`v3_username`, `v3_authtype`, `v3_password`, `v3_privproto` and `v3_privpassphrase` are only used when `v3`\nis enabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snmp_update_0"
              }
            }
          }
        }
      }
    },
    "/ssh": {
      "get": {
        "tags": [
          "ssh"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "ssh"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update settings of SSH daemon service.\n\nIf `bindiface` is empty it will listen for all available addresses.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ssh_update_0"
              }
            }
          }
        }
      }
    },
    "/ssh/bindiface_choices": {
      "get": {
        "tags": [
          "ssh"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for the bindiface attribute of SSH service."
      }
    },
    "/staticroute": {
      "get": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Static Route.\n\nAddress families of `gateway` and `destination` should match when creating a static route.\n\n`description` is an optional attribute for any notes regarding the static route.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/staticroute_create_0"
              }
            }
          }
        }
      }
    },
    "/staticroute/id/{id}": {
      "delete": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Static Route of `id`."
      },
      "get": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Static Route of `id`."
      }
    },
    "/staticroute/get_instance": {
      "post": {
        "tags": [
          "staticroute"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/staticroute_get_instance"
              }
            }
          }
        }
      }
    },
    "/stats/get_data": {
      "post": {
        "tags": [
          "stats"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get data points from rrd files.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stats_get_data"
              }
            }
          }
        }
      }
    },
    "/stats/get_dataset_info": {
      "post": {
        "tags": [
          "stats"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns info about a given dataset from some source.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stats_get_dataset_info"
              }
            }
          }
        }
      }
    },
    "/stats/get_sources": {
      "get": {
        "tags": [
          "stats"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns an object with all available sources tried with metric datasets."
      }
    },
    "/support": {
      "get": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Proactive Support settings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_update_0"
              }
            }
          }
        }
      }
    },
    "/support/attach_ticket": {
      "post": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Method to attach a file to a existing ticket.\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_attach_ticket_0"
              }
            }
          }
        }
      }
    },
    "/support/attach_ticket_max_size": {
      "get": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns maximum uploaded file size for `support.attach_ticket`"
      }
    },
    "/support/fetch_categories": {
      "post": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Fetch issue categories using access token `token`.\nReturns a dict with the category name as a key and id as value.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_fetch_categories_0"
              }
            }
          }
        }
      }
    },
    "/support/fields": {
      "get": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns list of pairs of field names and field titles for Proactive Support."
      }
    },
    "/support/is_available": {
      "get": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether Proactive Support is available for this product type and current license."
      }
    },
    "/support/is_available_and_enabled": {
      "get": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether Proactive Support is available and enabled."
      }
    },
    "/support/new_ticket": {
      "post": {
        "tags": [
          "support"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Creates a new ticket for support.\nThis is done using the support proxy API.\nFor TrueNAS SCALE it will be created on JIRA and for TrueNAS SCALE Enterprise on Salesforce.\n\nFor SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.\nFor SCALE Enterprise `token` and `type` attributes are not required.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_new_ticket_0"
              }
            }
          }
        }
      }
    },
    "/system/boot_id": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns an unique boot identifier.\n\nIt is supposed to be unique every system boot."
      }
    },
    "/system/debug": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Download a debug file.\n\nA file will be downloaded from this endpoint."
      }
    },
    "/system/environment": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return environment in which product is running. Possible values:\n- DEFAULT\n- EC2"
      }
    },
    "/system/feature_enabled": {
      "post": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether the `feature` is enabled or not",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_feature_enabled_0"
              }
            }
          }
        }
      }
    },
    "/system/host_id": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve a hex string that is generated based\non the contents of the `/etc/hostid` file. This\nis a permanent value that persists across\nreboots/upgrades and can be used as a unique\nidentifier for the machine."
      }
    },
    "/system/info": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns basic system information."
      }
    },
    "/system/is_freenas": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "FreeNAS is now TrueNAS CORE.\n\nDEPRECATED: Use `system.product_type`"
      }
    },
    "/system/is_stable": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether software version of the system is stable."
      }
    },
    "/system/license_update": {
      "post": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update license file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_license_update_0"
              }
            }
          }
        }
      }
    },
    "/system/product_name": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns name of the product we are using."
      }
    },
    "/system/product_type": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the type of the product.\n\nSCALE - TrueNAS SCALE, community version\nSCALE_ENTERPRISE - TrueNAS SCALE Enterprise, appliance version"
      }
    },
    "/system/ready": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether the system completed boot and is ready to use"
      }
    },
    "/system/reboot": {
      "post": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Reboots the operating system.\n\nEmits an \"added\" event of name \"system\" and id \"reboot\".",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_reboot_0"
              }
            }
          }
        }
      }
    },
    "/system/shutdown": {
      "post": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Shuts down the operating system.\n\nAn \"added\" event of name \"system\" and id \"shutdown\" is emitted when shutdown is initiated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_shutdown_0"
              }
            }
          }
        }
      }
    },
    "/system/state": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns system state:\n\"BOOTING\" - System is booting\n\"READY\" - System completed boot and is ready to use\n\"SHUTTING_DOWN\" - System is shutting down"
      }
    },
    "/system/version": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the full name of the software version of the system."
      }
    },
    "/system/version_short": {
      "get": {
        "tags": [
          "system"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the short name of the software version of the system."
      }
    },
    "/system/advanced": {
      "get": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update System Advanced Service Configuration.\n\n`consolemenu` should be disabled if the menu at console is not desired. It will default to standard login\nin the console if disabled.\n\n`autotune` when enabled executes autotune script which attempts to optimize the system based on the installed\nhardware.\n\nWhen `syslogserver` is defined, logs of `sysloglevel` or above are sent.\n\n`consolemsg` is a deprecated attribute and will be removed in further releases. Please, use `consolemsg`\nattribute in the `system.general` plugin.\n\n`isolated_gpu_pci_ids` is a list of PCI ids which are isolated from host system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_advanced_update_0"
              }
            }
          }
        }
      }
    },
    "/system/advanced/sed_global_password": {
      "get": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns configured global SED password."
      }
    },
    "/system/advanced/serial_port_choices": {
      "get": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get available choices for `serialport`."
      }
    },
    "/system/advanced/syslog_certificate_authority_choices": {
      "get": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return choices of certificate authorities which can be used for `syslog_tls_certificate_authority`."
      }
    },
    "/system/advanced/syslog_certificate_choices": {
      "get": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return choices of certificates which can be used for `syslog_tls_certificate`."
      }
    },
    "/system/advanced/update_gpu_pci_ids": {
      "post": {
        "tags": [
          "system.advanced"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "`isolated_gpu_pci_ids` is a list of PCI ids which are isolated from host system.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_advanced_update_gpu_pci_ids_0"
              }
            }
          }
        }
      }
    },
    "/system/general": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update System General Service Configuration.\n\n`ui_certificate` is used to enable HTTPS access to the system. If `ui_certificate` is not configured on boot,\nit is automatically created by the system.\n\n`ui_httpsredirect` when set, makes sure that all HTTP requests are converted to HTTPS requests to better\nenhance security.\n\n`ui_address` and `ui_v6address` are a list of valid ipv4/ipv6 addresses respectively which the system will\nlisten on.\n\n`ui_allowlist` is a list of IP addresses and networks that are allow to use API and UI. If this list is empty,\nthen all IP addresses are allowed to use API and UI.\n\n`ds_auth` controls whether configured Directory Service users that are granted with Privileges are allowed to\nlog in to the Web UI or use TrueNAS API.\n\nUI configuration is not applied automatically. Call `system.general.ui_restart` to apply new UI settings (all\nHTTP connections will be aborted) or specify `ui_restart_delay` (in seconds) to automatically apply them after\nsome small amount of time necessary you might need to receive the response for your settings update request.\n\nIf incorrect UI configuration is applied, you might loss API connectivity and won't be able to fix the settings.\nTo avoid that, specify `rollback_timeout` (in seconds). It will automatically roll back UI configuration to the\npreviously working settings after `rollback_timeout` passes unless you call `system.general.checkin` in case\nthe new settings were correct and no rollback is necessary.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_general_update_0"
              }
            }
          }
        }
      }
    },
    "/system/general/checkin": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "After UI settings are saved with `rollback_timeout` this method needs to be called within that timeout limit\nto prevent reverting the changes.\n\nThis is to ensure user verifies the changes went as planned and its working."
      }
    },
    "/system/general/checkin_waiting": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Determines whether or not we are waiting user to check-in the applied UI settings changes before they are rolled\nback. Returns a number of seconds before the automatic rollback or null if there are no changes pending."
      }
    },
    "/system/general/country_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns country choices."
      }
    },
    "/system/general/kbdmap_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns kbdmap choices."
      }
    },
    "/system/general/language_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns language choices."
      }
    },
    "/system/general/local_url": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns configured local url in the format of protocol://host:port"
      }
    },
    "/system/general/timezone_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns time zone choices."
      }
    },
    "/system/general/ui_address_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns UI ipv4 address choices."
      }
    },
    "/system/general/ui_certificate_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return choices of certificates which can be used for `ui_certificate`."
      }
    },
    "/system/general/ui_httpsprotocols_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns available HTTPS protocols."
      }
    },
    "/system/general/ui_restart": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restart HTTP server to use latest UI settings.\n\nHTTP server will be restarted after `delay` seconds.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_general_ui_restart_0"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Restart HTTP server to use latest UI settings.\n\nHTTP server will be restarted after `delay` seconds.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_general_ui_restart_0"
              }
            }
          }
        }
      }
    },
    "/system/general/ui_v6address_choices": {
      "get": {
        "tags": [
          "system.general"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns UI ipv6 address choices."
      }
    },
    "/system/ntpserver": {
      "get": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Add an NTP Server.\n\n`address` specifies the hostname/IP address of the NTP server.\n\n`burst` when enabled makes sure that if server is reachable, sends a burst of eight packets instead of one.\nThis is designed to improve timekeeping quality with the server command.\n\n`iburst` when enabled speeds up the initial synchronization, taking seconds rather than minutes.\n\n`prefer` marks the specified server as preferred. When all other things are equal, this host is chosen\nfor synchronization acquisition with the server command. It is recommended that they be used for servers with\ntime monitoring hardware.\n\n`minpoll` is minimum polling time in seconds. It must be a power of 2 and less than `maxpoll`.\n\n`maxpoll` is maximum polling time in seconds. It must be a power of 2 and greater than `minpoll`.\n\n`force` when enabled forces the addition of NTP server even if it is currently unreachable.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_ntpserver_create_0"
              }
            }
          }
        }
      }
    },
    "/system/ntpserver/id/{id}": {
      "delete": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete NTP server of `id`."
      },
      "get": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update NTP server of `id`."
      }
    },
    "/system/ntpserver/get_instance": {
      "post": {
        "tags": [
          "system.ntpserver"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_ntpserver_get_instance"
              }
            }
          }
        }
      }
    },
    "/systemdataset": {
      "get": {
        "tags": [
          "systemdataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "systemdataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update System Dataset Service Configuration.\n\n`pool` is the name of a valid pool configured in the system which will be used to host the system dataset.\n\n`pool_exclude` can be specified to make sure that we don't place the system dataset on that pool if `pool`\nis not provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemdataset_update_0"
              }
            }
          }
        }
      }
    },
    "/systemdataset/pool_choices": {
      "post": {
        "tags": [
          "systemdataset"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve pool choices which can be used for configuring system dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/systemdataset_pool_choices_0"
              }
            }
          }
        }
      }
    },
    "/tftp": {
      "get": {
        "tags": [
          "tftp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "tftp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update TFTP Service Configuration.\n\n`newfiles` when set enables network devices to send files to the system.\n\n`username` sets the user account which will be used to access `directory`. It should be ensured `username`\nhas access to `directory`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tftp_update_0"
              }
            }
          }
        }
      }
    },
    "/tftp/host_choices": {
      "get": {
        "tags": [
          "tftp"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return host choices for TFTP service to use."
      }
    },
    "/truecommand": {
      "get": {
        "tags": [
          "truecommand"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "truecommand"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Truecommand service settings.\n\n`api_key` is a valid API key generated by iX Portal.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/truecommand_update_0"
              }
            }
          }
        }
      }
    },
    "/truenas/accept_eula": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Accept TrueNAS EULA."
      }
    },
    "/truenas/get_chassis_hardware": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns what type of hardware this is, detected from dmidecode."
      }
    },
    "/truenas/get_customer_information": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns stored customer information."
      }
    },
    "/truenas/get_eula": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns the TrueNAS End-User License Agreement (EULA)."
      }
    },
    "/truenas/is_eula_accepted": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns whether the EULA is accepted or not."
      }
    },
    "/truenas/is_production": {
      "get": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns if system is marked as production."
      }
    },
    "/truenas/set_production": {
      "post": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sets system production state and optionally sends initial debug.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/truenas_set_production"
              }
            }
          }
        }
      }
    },
    "/truenas/update_customer_information": {
      "post": {
        "tags": [
          "truenas"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Updates customer information.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/truenas_update_customer_information_0"
              }
            }
          }
        }
      }
    },
    "/tunable": {
      "get": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a tunable.\n\nIf `type` is `SYSCTL` then `var` is a sysctl name (e.g. `kernel.watchdog`) and `value` is its corresponding\nvalue (e.g. `0`).\n\nIf `type` is `UDEV` then `var` is an udev rules file name (e.g. `10-disable-usb`, `.rules` suffix will be\nappended automatically) and `value` is its contents (e.g. `BUS==\"usb\", OPTIONS+=\"ignore_device\"`).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tunable_create_0"
              }
            }
          }
        }
      }
    },
    "/tunable/id/{id}": {
      "delete": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete Tunable of `id`."
      },
      "get": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update Tunable of `id`."
      }
    },
    "/tunable/get_instance": {
      "post": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tunable_get_instance"
              }
            }
          }
        }
      }
    },
    "/tunable/tunable_type_choices": {
      "get": {
        "tags": [
          "tunable"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve the supported tunable types that can be changed."
      }
    },
    "/update/check_available": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Checks if there is an update available from update server.\n\nstatus:\n  - REBOOT_REQUIRED: an update has already been applied\n  - AVAILABLE: an update is available\n  - UNAVAILABLE: no update available\n  - HA_UNAVAILABLE: HA is non-functional\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_check_available_0"
              }
            }
          }
        }
      }
    },
    "/update/download": {
      "get": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Download updates using selected train."
      }
    },
    "/update/file": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Updates the system using the uploaded .tar file.\n\nUse null `destination` to create a temporary location.\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_file_0"
              }
            }
          }
        }
      }
    },
    "/update/get_auto_download": {
      "get": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns if update auto-download is enabled."
      }
    },
    "/update/get_pending": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Gets a list of packages already downloaded and ready to be applied.\nEach entry of the lists consists of type of operation and name of it, e.g.\n\n  {\n    \"operation\": \"upgrade\",\n    \"name\": \"baseos-11.0 -> baseos-11.1\"\n  }",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_get_pending_0"
              }
            }
          }
        }
      }
    },
    "/update/get_trains": {
      "get": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns available trains dict and the currently configured train as well as the\ntrain of currently booted environment."
      }
    },
    "/update/manual": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update the system using a manual update file.\n\n`path` must be the absolute path to the update file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_manual"
              }
            }
          }
        }
      }
    },
    "/update/set_auto_download": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Sets if update auto-download is enabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_set_auto_download_0"
              }
            }
          }
        }
      }
    },
    "/update/set_train": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Set an update train to be used by default in updates.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_set_train_0"
              }
            }
          }
        }
      }
    },
    "/update/update": {
      "post": {
        "tags": [
          "update"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Downloads (if not already in cache) and apply an update.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_update_0"
              }
            }
          }
        }
      }
    },
    "/ups": {
      "get": {
        "tags": [
          "ups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "ups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update UPS Service Configuration.\n\n`powerdown` when enabled, sets UPS to power off after shutting down the system.\n\n`nocommwarntime` is a value in seconds which makes UPS Service wait the specified seconds before alerting that\nthe Service cannot reach configured UPS.\n\n`shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before\ninitiating a shutdown. This only applies when `shutdown` is set to \"BATT\".\n\n`shutdowncmd` is the command which is executed to initiate a shutdown. It defaults to \"poweroff\".",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ups_update_0"
              }
            }
          }
        }
      }
    },
    "/ups/driver_choices": {
      "get": {
        "tags": [
          "ups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns choices of UPS drivers supported by the system."
      }
    },
    "/ups/port_choices": {
      "get": {
        "tags": [
          "ups"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query users with `query-filters` and `query-options`. As a performance optimization, only local users\nwill be queried by default.\n\nExpanded information may be requested by specifying the extra option\n`\"extra\": {\"additional_information\": []}`.\n\nThe following `additional_information` options are supported:\n`SMB` - include Windows SID and NT Name for user. If this option is not specified, then these\n    keys will have `null` value.\n`DS` - include users from Directory Service (LDAP or Active Directory) in results\n\n`\"extra\": {\"search_dscache\": true}` is a legacy method of querying for directory services users.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new user.\n\nIf `uid` is not provided it is automatically filled with the next one available.\n\n`group` is required if `group_create` is false.\n\n`password` is required if `password_disabled` is false.\n\nAvailable choices for `shell` can be retrieved with `user.shell_choices`.\n\n`attributes` is a general-purpose object for storing arbitrary user information.\n\n`smb` specifies whether the user should be allowed access to SMB shares. User\nwill also automatically be added to the `builtin_users` group.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_create_0"
              }
            }
          }
        }
      }
    },
    "/user/id/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete user `id`.\n\nThe `delete_group` option deletes the user primary group if it is not being used by\nany other user."
      },
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Query users with `query-filters` and `query-options`. As a performance optimization, only local users\nwill be queried by default.\n\nExpanded information may be requested by specifying the extra option\n`\"extra\": {\"additional_information\": []}`.\n\nThe following `additional_information` options are supported:\n`SMB` - include Windows SID and NT Name for user. If this option is not specified, then these\n    keys will have `null` value.\n`DS` - include users from Directory Service (LDAP or Active Directory) in results\n\n`\"extra\": {\"search_dscache\": true}` is a legacy method of querying for directory services users.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update attributes of an existing user."
      }
    },
    "/user/get_instance": {
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_get_instance"
              }
            }
          }
        }
      }
    },
    "/user/get_next_uid": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the next available/free uid."
      }
    },
    "/user/get_user_obj": {
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns dictionary containing information from struct passwd for the user specified by either\nthe username or uid. Bypasses user cache.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_get_user_obj_0"
              }
            }
          }
        }
      }
    },
    "/user/has_local_administrator_set_up": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return whether a local administrator with a valid password exists.\n\nThis is used when the system is installed without a password and must be set on\nfirst use/login."
      }
    },
    "/user/has_root_password": {
      "get": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Deprecated method. Use `user.has_local_administrator_set_up`"
      }
    },
    "/user/id/{id}/pop_attribute": {
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Remove user general purpose `attributes` dictionary `key`."
      }
    },
    "/user/id/{id}/set_attribute": {
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Set user general purpose `attributes` dictionary `key` to `value`.\n\ne.g. Setting key=\"foo\" value=\"var\" will result in {\"attributes\": {\"foo\": \"bar\"}}"
      }
    },
    "/user/shell_choices": {
      "post": {
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Return the available shell choices to be used in `user.create` and `user.update`.\n\n`user_id`: deprecated and ignored",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_shell_choices_0"
              }
            }
          }
        }
      }
    },
    "/vm": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a Virtual Machine (VM).\n\nMaximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a\nseparate package. Multiple cores can be configured per CPU by specifying `cores` attributes.\n`vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads`\nspecifies number of threads per core.\n\n`ensure_display_device` when set ( the default ) will ensure that the guest always has access to a video device.\nFor headless installations like ubuntu server this is required for the guest to operate properly. However\nfor cases where consumer would like to use GPU passthrough and does not want a display device added should set\nthis to `false`.\n\n`arch_type` refers to architecture type and can be specified for the guest. By default the value is `null` and\nsystem in this case will choose a reasonable default based on host.\n\n`machine_type` refers to machine type of the guest based on the architecture type selected with `arch_type`.\nBy default the value is `null` and system in this case will choose a reasonable default based on `arch_type`\nconfiguration.\n\n`shutdown_timeout` indicates the time in seconds the system waits for the VM to cleanly shutdown. During system\nshutdown, if the VM hasn't exited after a hardware shutdown signal has been sent by the system within\n`shutdown_timeout` seconds, system initiates poweroff for the VM to stop it.\n\n`hide_from_msr` is a boolean which when set will hide the KVM hypervisor from standard MSR based discovery and\nis useful to enable when doing GPU passthrough.\n\n`hyperv_enlightenments` can be used to enable subset of predefined Hyper-V enlightenments for Windows guests.\nThese enlightenments improve performance and enable otherwise missing features.\n\n`suspend_on_snapshot` is a boolean attribute which when enabled will automatically pause/suspend VMs when\na snapshot is being taken for periodic snapshot tasks. For manual snapshots, if user has specified vms to\nbe paused, they will be in that case.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_create_0"
              }
            }
          }
        }
      }
    },
    "/vm/id/{id}": {
      "delete": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a VM."
      },
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update all information of a specific VM.\n\n`devices` is a list of virtualized hardware to attach to the virtual machine. If `devices` is not present,\nno change is made to devices. If either the device list order or data stored by the device changes when the\nattribute is passed, these actions are taken:\n\n1) If there is no device in the `devices` list which was previously attached to the VM, that device is\n   removed from the virtual machine.\n2) Devices are updated in the `devices` list when they contain a valid `id` attribute that corresponds to\n   an existing device.\n3) Devices that do not have an `id` attribute are created and attached to `id` VM."
      }
    },
    "/vm/bootloader_options": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Supported motherboard firmware options."
      }
    },
    "/vm/bootloader_ovmf_choices": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve bootloader ovmf choices"
      }
    },
    "/vm/id/{id}/clone": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Clone the VM `id`.\n\n`name` is an optional parameter for the cloned VM.\nIf not provided it will append the next number available to the VM name."
      }
    },
    "/vm/cpu_model_choices": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve CPU Model choices which can be used with a VM guest to emulate the CPU in the guest."
      }
    },
    "/vm/flags": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns a dictionary with CPU flags for the hypervisor."
      }
    },
    "/vm/get_available_memory": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the current maximum amount of available memory to be allocated for VMs.\n\nIn case of `overcommit` being `true`, calculations are done in the following manner:\n1. If a VM has requested 10G but is only consuming 5G, only 5G will be counted\n2. System will consider shrinkable ZFS ARC as free memory ( shrinkable ZFS ARC is current ZFS ARC\n   minus ZFS ARC minimum )\n\nIn case of `overcommit` being `false`, calculations are done in the following manner:\n1. Complete VM requested memory will be taken into account regardless of how much actual physical\n   memory the VM is consuming\n2. System will not consider shrinkable ZFS ARC as free memory\n\nMemory is of course a very \"volatile\" resource, values may change abruptly between a\nsecond but I deem it good enough to give the user a clue about how much memory is\navailable at the current moment and if a VM should be allowed to be launched.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_available_memory_0"
              }
            }
          }
        }
      }
    },
    "/vm/get_console": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the console device from a given guest.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_console_0"
              }
            }
          }
        }
      }
    },
    "/vm/get_display_devices": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get the display devices from a given guest. If a display device has password configured,\n`attributes.password_configured` will be set to `true`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_display_devices_0"
              }
            }
          }
        }
      }
    },
    "/vm/get_instance": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_instance"
              }
            }
          }
        }
      }
    },
    "/vm/get_memory_usage": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_memory_usage_0"
              }
            }
          }
        }
      }
    },
    "/vm/get_vm_memory_info": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns memory information for `vm_id` VM if it is going to be started.\n\nAll memory attributes are expressed in bytes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_get_vm_memory_info_0"
              }
            }
          }
        }
      }
    },
    "/vm/get_vmemory_in_use": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "The total amount of virtual memory in MB used by guests\n\n    Returns a dict with the following information:\n        RNP - Running but not provisioned\n        PRD - Provisioned but not running\n        RPRD - Running and provisioned"
      }
    },
    "/vm/guest_architecture_and_machine_choices": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve choices for supported guest architecture types and machine choices.\n\nKeys in the response would be supported guest architecture(s) on the host and their respective values would\nbe supported machine type(s) for the specific architecture on the host."
      }
    },
    "/vm/log_file_path": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve log file path of `id` VM.\n\nIt will return path of the log file if it exists and `null` otherwise.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_log_file_path_0"
              }
            }
          }
        }
      }
    },
    "/vm/maximum_supported_vcpus": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns maximum supported VCPU's"
      }
    },
    "/vm/port_wizard": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "It returns the next available Display Server Port and Web Port.\n\nReturns a dict with two keys `port` and `web`."
      }
    },
    "/vm/id/{id}/poweroff": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Poweroff a VM."
      }
    },
    "/vm/random_mac": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a random mac address.\n\nReturns:\n    str: with six groups of two hexadecimal digits"
      }
    },
    "/vm/resolution_choices": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve supported resolution choices for VM Display devices."
      }
    },
    "/vm/id/{id}/restart": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Restart a VM."
      }
    },
    "/vm/id/{id}/resume": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Resume suspended `id` VM."
      }
    },
    "/vm/id/{id}/start": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Start a VM.\n\noptions.overcommit defaults to false, meaning VMs are not allowed to\nstart if there is not enough available memory to hold all configured VMs.\nIf true, VM starts even if there is not enough memory for all configured VMs.\n\nError codes:\n\n    ENOMEM(12): not enough free memory to run the VM without overcommit"
      }
    },
    "/vm/id/{id}/status": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Get the status of `id` VM.\n\nReturns a dict:\n    - state, RUNNING / STOPPED / SUSPENDED\n    - pid, process id if RUNNING"
      }
    },
    "/vm/id/{id}/stop": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Stops a VM.\n\nFor unresponsive guests who have exceeded the `shutdown_timeout` defined by the user and have become\nunresponsive, they required to be powered down using `vm.poweroff`. `vm.stop` is only going to send a\nshutdown signal to the guest and wait the desired `shutdown_timeout` value before tearing down guest vmemory.\n\n`force_after_timeout` when supplied, it will initiate poweroff for the VM forcing it to exit if it has\nnot already stopped within the specified `shutdown_timeout`."
      }
    },
    "/vm/supports_virtualization": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns \"true\" if system supports virtualization, \"false\" otherwise"
      }
    },
    "/vm/id/{id}/suspend": {
      "post": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Suspend `id` VM."
      }
    },
    "/vm/virtualization_details": {
      "get": {
        "tags": [
          "vm"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve details if virtualization is supported on the system and in case why it's not supported if it isn't."
      }
    },
    "/vm/device": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new device for the VM of id `vm`.\n\nIf `dtype` is the `RAW` type and a new raw file is to be created, `attributes.exists` will be passed as false.\nThis means the API handles creating the raw file and raises the appropriate exception if file creation fails.\n\nIf `dtype` is of `DISK` type and a new Zvol is to be created, `attributes.create_zvol` will be passed as\ntrue with valid `attributes.zvol_name` and `attributes.zvol_volsize` values.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_device_create_0"
              }
            }
          }
        }
      }
    },
    "/vm/device/id/{id}": {
      "delete": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete a VM device of `id`."
      },
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update a VM device of `id`.\n\nPass `attributes.size` to resize a `dtype` `RAW` device. The raw file will be resized."
      }
    },
    "/vm/device/bind_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for Bind attribute."
      }
    },
    "/vm/device/disk_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns disk choices for device type \"DISK\"."
      }
    },
    "/vm/device/get_instance": {
      "post": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_device_get_instance"
              }
            }
          }
        }
      }
    },
    "/vm/device/iommu_enabled": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns \"true\" if iommu is enabled, \"false\" otherwise"
      }
    },
    "/vm/device/iotype_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "IO-type choices for storage devices."
      }
    },
    "/vm/device/nic_attach_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for NIC Attach attribute."
      }
    },
    "/vm/device/passthrough_device": {
      "post": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve details about `device` PCI device.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_device_passthrough_device_0"
              }
            }
          }
        }
      }
    },
    "/vm/device/passthrough_device_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for PCI passthru devices."
      }
    },
    "/vm/device/pptdev_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for PCI passthru device."
      }
    },
    "/vm/device/usb_controller_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve USB controller type choices"
      }
    },
    "/vm/device/usb_passthrough_choices": {
      "get": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Available choices for USB passthrough devices."
      }
    },
    "/vm/device/usb_passthrough_device": {
      "post": {
        "tags": [
          "vm.device"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Retrieve details about `device` USB device.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vm_device_usb_passthrough_device_0"
              }
            }
          }
        }
      }
    },
    "/vmware": {
      "get": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create VMWare snapshot.\n\n`hostname` is a valid IP address / hostname of a VMWare host. When clustering, this is the vCenter server for\nthe cluster.\n\n`username` and `password` are the credentials used to authorize access to the VMWare host.\n\n`datastore` is a valid datastore name which exists on the VMWare host.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_create_0"
              }
            }
          }
        }
      }
    },
    "/vmware/id/{id}": {
      "delete": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Delete VMWare snapshot of `id`."
      },
      "get": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Update VMWare snapshot of `id`."
      }
    },
    "/vmware/dataset_has_vms": {
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns \"true\" if `dataset` is configured with a VMWare snapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_dataset_has_vms"
              }
            }
          }
        }
      }
    },
    "/vmware/get_datastores": {
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Get datastores from VMWare.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_get_datastores_0"
              }
            }
          }
        }
      }
    },
    "/vmware/get_instance": {
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_get_instance"
              }
            }
          }
        }
      }
    },
    "/vmware/get_virtual_machines": {
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns Virtual Machines on the VMWare host identified by `pk`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_get_virtual_machines_0"
              }
            }
          }
        }
      }
    },
    "/vmware/match_datastores_with_datasets": {
      "post": {
        "tags": [
          "vmware"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Requests datastores from vCenter server and tries to match them with local filesystems.\n\nReturns a list of datastores, a list of local filesystems and guessed relationship between them.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vmware_match_datastores_with_datasets_0"
              }
            }
          }
        }
      }
    },
    "/webdav": {
      "get": {
        "tags": [
          "webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": ""
      },
      "put": {
        "tags": [
          "webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Update Webdav Service Configuration.\n\n`protocol` specifies which protocol should be used for connecting to Webdav Serivce. Value of \"HTTPHTTPS\"\nallows both HTTP and HTTPS connections to the share.\n\n`certssl` is a valid id of a certificate configured in the system. This is required if HTTPS connection is\ndesired with Webdave Service.\n\nThere are 3 types of Authentication supported with Webdav:\n1) NONE      -   No authentication is required\n2) BASIC     -   Password is sent over the network as plaintext\n3) DIGEST    -   Hash of the password is sent over the network\n\n`htauth` should be one of the valid types described above.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webdav_update_0"
              }
            }
          }
        }
      }
    },
    "/webdav/cert_choices": {
      "get": {
        "tags": [
          "webdav"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Permitted certificate choices for webdav service."
      }
    },
    "/webui/image": {
      "get": {
        "tags": [
          "webui.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "webui.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Create a new database entry with identifier as the tag, all entries are\nlowercased\n\nThen puts the file in the /var/db/system/webui/images directory\n\nA file must be uploaded to this endpoint. To upload a file, please send a multipart request with two parts. The first, named `data`, should contain a JSON-encoded payload, and the second, named `file`, should contain an uploaded file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webui_image_create_0"
              }
            }
          }
        }
      }
    },
    "/webui/image/id/{id}": {
      "delete": {
        "tags": [
          "webui.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "Remove the database entry, and then the item if it exists"
      },
      "get": {
        "tags": [
          "webui.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      }
    },
    "/webui/image/get_instance": {
      "post": {
        "tags": [
          "webui.image"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webui_image_get_instance"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot": {
      "get": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all ZFS Snapshots with `query-filters` and `query-options`.\n\n`query-options.extra.holds` specifies whether hold tags for snapshots should be retrieved (false by default)\n\n`query-options.extra.min_txg` can be specified to limit snapshot retrieval based on minimum transaction group.\n\n`query-options.extra.max_txg` can be specified to limit snapshot retrieval based on maximum transaction group.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Take a snapshot from a given dataset.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_create_0"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/id/{id}": {
      "delete": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete snapshot of name `id`.\n\n`options.defer` will defer the deletion of snapshot."
      },
      "get": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Query all ZFS Snapshots with `query-filters` and `query-options`.\n\n`query-options.extra.holds` specifies whether hold tags for snapshots should be retrieved (false by default)\n\n`query-options.extra.min_txg` can be specified to limit snapshot retrieval based on minimum transaction group.\n\n`query-options.extra.max_txg` can be specified to limit snapshot retrieval based on maximum transaction group.\n\n`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint."
      },
      "put": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": ""
      }
    },
    "/zfs/snapshot/clone": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Clone a given snapshot to a new dataset.\n\nReturns:\n    bool: True if succeed otherwise False.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_clone_0"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/get_instance": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised.\n\nPlease see `query` method documentation for `options`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_get_instance"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/hold": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Holds snapshot `id`.\n\n`truenas` tag will be added to the snapshot's tag namespace.\n\n`options.recursive` will hold snapshots recursively.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_hold"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/release": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Release held snapshot `id`.\n\nWill remove all hold tags from the specified snapshot.\n\n`options.recursive` will release snapshots recursively. Please note that only the tags that are present on the\nparent snapshot will be removed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_release"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/remove": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Remove a snapshot from a given dataset.\n\nReturns:\n    bool: True if succeed otherwise False.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_remove_0"
              }
            }
          }
        }
      }
    },
    "/zfs/snapshot/rollback": {
      "post": {
        "tags": [
          "zfs.snapshot"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        },
        "parameters": [],
        "description": "Rollback to a given snapshot `id`.\n\n`options.recursive` will destroy any snapshots and bookmarks more recent than the one\nspecified.\n\n`options.recursive_clones` is just like `recursive` but will also destroy any clones.\n\n`options.force` will force unmount of any clones.\n\n`options.recursive_rollback` will do a complete recursive rollback of each child snapshots for `id`. If\nany child does not have specified snapshot, this operation will fail.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/zfs_snapshot_rollback"
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://192.168.40.2/api/v2.0"
    }
  ],
  "components": {
    "schemas": {
      "core_bulk_0": {
        "_name_": "method",
        "title": "method",
        "type": "string",
        "description": "Will sequentially call `method` with arguments from the `params` list. For example, running"
      },
      "core_bulk_1": {
        "_name_": "params",
        "title": "params",
        "default": [],
        "type": "array",
        "items": {},
        "description": "Will sequentially call `method` with arguments from the `params` list. For example, running"
      },
      "core_bulk_2": {
        "_name_": "description",
        "title": "description",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "core_bulk": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/core_bulk_0"
          },
          "params": {
            "$ref": "#/components/schemas/core_bulk_1"
          },
          "description": {
            "$ref": "#/components/schemas/core_bulk_2"
          }
        }
      },
      "core_debug_0": {
        "_name_": "engine",
        "title": "engine",
        "type": "string",
        "enum": [
          "PTVS",
          "PYDEV",
          "REMOTE_PDB"
        ]
      },
      "core_debug_1": {
        "type": "object",
        "properties": {
          "secret": {
            "_name_": "secret",
            "title": "secret",
            "type": "string"
          },
          "bind_address": {
            "_name_": "bind_address",
            "title": "bind_address",
            "default": "0.0.0.0",
            "type": "string"
          },
          "bind_port": {
            "type": "integer",
            "_name_": "bind_port",
            "title": "bind_port",
            "default": 3000
          },
          "host": {
            "_name_": "host",
            "title": "host",
            "type": "string"
          },
          "wait_attach": {
            "type": "boolean",
            "_name_": "wait_attach",
            "title": "wait_attach",
            "default": false
          },
          "local_path": {
            "_name_": "local_path",
            "title": "local_path",
            "type": "string"
          },
          "threaded": {
            "type": "boolean",
            "_name_": "threaded",
            "title": "threaded",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "secret",
          "bind_address",
          "bind_port",
          "host",
          "wait_attach",
          "local_path",
          "threaded"
        ]
      },
      "core_debug": {
        "type": "object",
        "properties": {
          "engine": {
            "$ref": "#/components/schemas/core_debug_0"
          },
          "options": {
            "$ref": "#/components/schemas/core_debug_1"
          }
        }
      },
      "core_download_0": {
        "_name_": "method",
        "title": "method",
        "type": "string"
      },
      "core_download_1": {
        "_name_": "args",
        "title": "args",
        "default": [],
        "type": "array",
        "items": {}
      },
      "core_download_2": {
        "_name_": "filename",
        "title": "filename",
        "type": "string"
      },
      "core_download_3": {
        "type": "boolean",
        "_name_": "buffered",
        "title": "buffered",
        "default": false,
        "description": "Non-`buffered` downloads will allow job to write to pipe as soon as download URL is requested, job will stay\nblocked meanwhile. `buffered` downloads must wait for job to complete before requesting download URL, job's\npipe output will be buffered to ramfs."
      },
      "core_download": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/core_download_0"
          },
          "args": {
            "$ref": "#/components/schemas/core_download_1"
          },
          "filename": {
            "$ref": "#/components/schemas/core_download_2"
          },
          "buffered": {
            "$ref": "#/components/schemas/core_download_3"
          }
        }
      },
      "core_job_abort_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "core_job_update_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "core_job_update_1": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "progress",
            "title": "progress",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "job-update",
        "title": "job-update",
        "default": {},
        "_attrs_order_": [
          "progress"
        ]
      },
      "core_job_update": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/core_job_update_0"
          },
          "job-update": {
            "$ref": "#/components/schemas/core_job_update_1"
          }
        }
      },
      "core_job_wait_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "core_ping_remote_0": {
        "type": "object",
        "properties": {
          "type": {
            "_name_": "type",
            "title": "type",
            "default": "ICMP",
            "type": "string",
            "enum": [
              "ICMP",
              "ICMPV4",
              "ICMPV6"
            ]
          },
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string"
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 4
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "type",
          "hostname",
          "timeout"
        ]
      },
      "core_resize_shell_0": {
        "_name_": "id",
        "title": "id",
        "type": "string"
      },
      "core_resize_shell_1": {
        "type": "integer",
        "_name_": "cols",
        "title": "cols"
      },
      "core_resize_shell_2": {
        "type": "integer",
        "_name_": "rows",
        "title": "rows"
      },
      "core_resize_shell": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/core_resize_shell_0"
          },
          "cols": {
            "$ref": "#/components/schemas/core_resize_shell_1"
          },
          "rows": {
            "$ref": "#/components/schemas/core_resize_shell_2"
          }
        }
      },
      "core_set_debug_mode_0": {
        "type": "boolean",
        "_name_": "debug_mode",
        "title": "debug_mode"
      },
      "acme_dns_authenticator_create_0": {
        "type": "object",
        "properties": {
          "authenticator": {
            "_name_": "authenticator",
            "title": "authenticator",
            "type": "string",
            "enum": [
              "cloudflare",
              "route53",
              "shell"
            ]
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "description": "Specific attributes of each `authenticator`",
            "default": {},
            "_attrs_order_": []
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "description": "User defined name of authenticator",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "acme_dns_authenticator_create",
        "title": "acme_dns_authenticator_entry",
        "default": {},
        "_attrs_order_": [
          "authenticator",
          "attributes",
          "name"
        ]
      },
      "acme_dns_authenticator_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "acme_dns_authenticator_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "acme_dns_authenticator_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/acme_dns_authenticator_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/acme_dns_authenticator_get_instance_1"
          }
        }
      },
      "activedirectory_update_0": {
        "type": "object",
        "properties": {
          "domainname": {
            "_name_": "domainname",
            "title": "domainname",
            "type": "string",
            "description": "`domainname` full DNS domain name of the Active Directory domain."
          },
          "bindname": {
            "_name_": "bindname",
            "title": "bindname",
            "type": "string",
            "description": "`bindname` username used to perform the intial domain join."
          },
          "bindpw": {
            "_name_": "bindpw",
            "title": "bindpw",
            "type": "string",
            "description": "`bindpw` password used to perform the initial domain join. User-\nprovided credentials are used to obtain a kerberos ticket, which\nis used to perform the actual domain join."
          },
          "verbose_logging": {
            "type": "boolean",
            "_name_": "verbose_logging",
            "title": "verbose_logging",
            "description": "`verbose_logging` increase logging during the domain join process."
          },
          "use_default_domain": {
            "type": "boolean",
            "_name_": "use_default_domain",
            "title": "use_default_domain",
            "description": "`use_default_domain` controls whether domain users and groups have\nthe pre-windows 2000 domain name prepended to the user account. When\nenabled, the user appears as \"administrator\" rather than\n\"EXAMPLE\u0007dministrator\""
          },
          "allow_trusted_doms": {
            "type": "boolean",
            "_name_": "allow_trusted_doms",
            "title": "allow_trusted_doms",
            "description": "`allow_trusted_doms` enable support for trusted domains. If this\nparameter is enabled, then separate idmap backends _must_ be configured\nfor each trusted domain, and the idmap cache should be cleared."
          },
          "allow_dns_updates": {
            "type": "boolean",
            "_name_": "allow_dns_updates",
            "title": "allow_dns_updates",
            "description": "`allow_dns_updates` during the domain join process, automatically\ngenerate DNS entries in the AD domain for the NAS. If this is disabled,\nthen a domain administrator must manually add appropriate DNS entries\nfor the NAS. This parameter is recommended for TrueNAS HA servers."
          },
          "disable_freenas_cache": {
            "type": "boolean",
            "_name_": "disable_freenas_cache",
            "title": "disable_freenas_cache",
            "description": "`disable_freenas_cache` disables active caching of AD users and groups.\nWhen disabled, only users cached in winbind's internal cache are\nvisible in GUI dropdowns. Disabling active caching is recommended\nin environments with a large amount of users."
          },
          "restrict_pam": {
            "type": "boolean",
            "_name_": "restrict_pam",
            "title": "restrict_pam",
            "default": false
          },
          "site": {
            "_name_": "site",
            "title": "site",
            "type": "string",
            "description": "`site` AD site of which the NAS is a member. This parameter is auto-\ndetected during the domain join process. If no AD site is configured\nfor the subnet in which the NAS is configured, then this parameter\nappears as 'Default-First-Site-Name'. Auto-detection is only performed\nduring the initial domain join.",
            "nullable": true
          },
          "kerberos_realm": {
            "type": "integer",
            "_name_": "kerberos_realm",
            "title": "kerberos_realm",
            "description": "`kerberos_realm` in which the server is located. This parameter is\nautomatically populated during the initial domain join. If the NAS has\nan AD site configured and that site has multiple kerberos servers, then\nthe kerberos realm is automatically updated with a site-specific\nconfiguration to use those servers. Auto-detection is only performed\nduring initial domain join.",
            "nullable": true
          },
          "kerberos_principal": {
            "_name_": "kerberos_principal",
            "title": "kerberos_principal",
            "type": "string",
            "description": "`kerberos_principal` kerberos principal to use for AD-related\noperations outside of Samba. After intial domain join, this field is\nupdated with the kerberos principal associated with the AD machine\naccount for the NAS.",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 60,
            "description": "`timeout` timeout value for winbind-related operations. This value may\nneed to be increased in  environments with high latencies for\ncommunications with domain controllers or a large number of domain\ncontrollers. Lowering the value may cause status checks to fail."
          },
          "dns_timeout": {
            "type": "integer",
            "_name_": "dns_timeout",
            "title": "dns_timeout",
            "default": 10,
            "description": "`dns_timeout` timeout value for DNS queries during the initial domain\njoin. This value is also set as the NETWORK_TIMEOUT in the ldap config\nfile."
          },
          "nss_info": {
            "_name_": "nss_info",
            "title": "nss_info",
            "default": "",
            "type": "string",
            "enum": [
              "SFU",
              "SFU20",
              "RFC2307"
            ],
            "description": "`nss_info` controls how Winbind retrieves Name Service Information to\nconstruct a user's home directory and login shell. This parameter\nis only effective if the Active Directory Domain Controller supports\nthe Microsoft Services for Unix (SFU) LDAP schema.",
            "nullable": true
          },
          "createcomputer": {
            "_name_": "createcomputer",
            "title": "createcomputer",
            "type": "string",
            "description": "`createcomputer` Active Directory Organizational Unit in which new\ncomputer accounts are created."
          },
          "netbiosname": {
            "_name_": "netbiosname",
            "title": "netbiosname",
            "type": "string"
          },
          "netbiosname_b": {
            "_name_": "netbiosname_b",
            "title": "netbiosname_b",
            "type": "string"
          },
          "netbiosalias": {
            "_name_": "netbiosalias",
            "title": "netbiosalias",
            "default": [],
            "type": "array",
            "items": {}
          },
          "enable": {
            "type": "boolean",
            "_name_": "enable",
            "title": "enable",
            "description": "The Active Directory service is started after a configuration\nupdate if the service was initially disabled, and the updated\nconfiguration sets `enable` to `True`. The Active Directory\nservice is stopped if `enable` is changed to `False`. If the\nconfiguration is updated, but the initial `enable` state is `True`, and\nremains unchanged, then the samba server is only restarted."
          }
        },
        "additionalProperties": false,
        "_name_": "activedirectory_update",
        "title": "activedirectory_update",
        "default": {},
        "_attrs_order_": [
          "domainname",
          "bindname",
          "bindpw",
          "verbose_logging",
          "use_default_domain",
          "allow_trusted_doms",
          "allow_dns_updates",
          "disable_freenas_cache",
          "restrict_pam",
          "site",
          "kerberos_realm",
          "kerberos_principal",
          "timeout",
          "dns_timeout",
          "nss_info",
          "createcomputer",
          "netbiosname",
          "netbiosname_b",
          "netbiosalias",
          "enable"
        ]
      },
      "activedirectory_domain_info_0": {
        "_name_": "domain",
        "title": "domain",
        "default": "",
        "type": "string"
      },
      "activedirectory_leave_0": {
        "type": "object",
        "properties": {
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "kerberos_username_password",
        "title": "kerberos_username_password",
        "default": {},
        "_attrs_order_": [
          "username",
          "password"
        ]
      },
      "alert_dismiss_0": {
        "_name_": "uuid",
        "title": "uuid",
        "type": "string"
      },
      "alert_restore_0": {
        "_name_": "uuid",
        "title": "uuid",
        "type": "string"
      },
      "alertclasses_update_0": {
        "type": "object",
        "properties": {
          "classes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "classes",
            "title": "classes",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "alertclasses_update",
        "title": "alertclasses_entry",
        "default": {},
        "_attrs_order_": [
          "classes"
        ]
      },
      "alertservice_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "description": "Create an Alert Service of specified `type`.\nIf `enabled`, it sends alerts to the configured `type` of Alert Service."
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          },
          "level": {
            "_name_": "level",
            "title": "level",
            "type": "string",
            "enum": [
              "INFO",
              "NOTICE",
              "WARNING",
              "ERROR",
              "CRITICAL",
              "ALERT",
              "EMERGENCY"
            ]
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true,
            "description": "If `enabled`, it sends alerts to the configured `type` of Alert Service."
          }
        },
        "additionalProperties": false,
        "_name_": "alert_service_create",
        "title": "alert_service_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "type",
          "attributes",
          "level",
          "enabled"
        ]
      },
      "alertservice_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "alertservice_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "alertservice_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/alertservice_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/alertservice_get_instance_1"
          }
        }
      },
      "alertservice_test_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "description": "Send a test alert using `type` of Alert Service."
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          },
          "level": {
            "_name_": "level",
            "title": "level",
            "type": "string",
            "enum": [
              "INFO",
              "NOTICE",
              "WARNING",
              "ERROR",
              "CRITICAL",
              "ALERT",
              "EMERGENCY"
            ]
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "alert_service_create",
        "title": "alert_service_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "type",
          "attributes",
          "level",
          "enabled"
        ]
      },
      "api_key_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "allowlist": {
            "_name_": "allowlist",
            "title": "allowlist",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "method": {
                  "_name_": "method",
                  "title": "method",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "CALL",
                    "SUBSCRIBE",
                    "*"
                  ]
                },
                "resource": {
                  "_name_": "resource",
                  "title": "resource",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "allowlist_item",
              "title": "allowlist_item",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "method",
                "resource"
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "api_key_create",
        "title": "api_key_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "allowlist"
        ]
      },
      "api_key_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "api_key_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "api_key_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/api_key_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/api_key_get_instance_1"
          }
        }
      },
      "auth_check_password_0": {
        "_name_": "username",
        "title": "username",
        "type": "string"
      },
      "auth_check_password_1": {
        "_name_": "password",
        "title": "password",
        "type": "string"
      },
      "auth_check_password": {
        "type": "object",
        "properties": {
          "username": {
            "$ref": "#/components/schemas/auth_check_password_0"
          },
          "password": {
            "$ref": "#/components/schemas/auth_check_password_1"
          }
        }
      },
      "auth_check_user_0": {
        "_name_": "username",
        "title": "username",
        "type": "string"
      },
      "auth_check_user_1": {
        "_name_": "password",
        "title": "password",
        "type": "string"
      },
      "auth_check_user": {
        "type": "object",
        "properties": {
          "username": {
            "$ref": "#/components/schemas/auth_check_user_0"
          },
          "password": {
            "$ref": "#/components/schemas/auth_check_user_1"
          }
        }
      },
      "auth_generate_token_0": {
        "type": "integer",
        "_name_": "ttl",
        "title": "ttl",
        "default": 600,
        "description": "`ttl` stands for Time To Live, in seconds. The token will be invalidated if the connection\nhas been inactive for a time greater than this.",
        "nullable": true
      },
      "auth_generate_token_1": {
        "type": "object",
        "properties": {},
        "additionalProperties": true,
        "_name_": "attrs",
        "title": "attrs",
        "default": {},
        "_attrs_order_": [],
        "description": "`attrs` is a general purpose object/dictionary to hold information about the token."
      },
      "auth_generate_token_2": {
        "type": "boolean",
        "_name_": "match_origin",
        "title": "match_origin",
        "default": false
      },
      "auth_generate_token": {
        "type": "object",
        "properties": {
          "ttl": {
            "$ref": "#/components/schemas/auth_generate_token_0"
          },
          "attrs": {
            "$ref": "#/components/schemas/auth_generate_token_1"
          },
          "match_origin": {
            "$ref": "#/components/schemas/auth_generate_token_2"
          }
        }
      },
      "auth_terminate_session_0": {
        "_name_": "id",
        "title": "id",
        "type": "string"
      },
      "auth_twofactor_update_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled"
          },
          "otp_digits": {
            "type": "integer",
            "_name_": "otp_digits",
            "title": "otp_digits",
            "description": "`otp_digits` represents number of allowed digits in the OTP."
          },
          "window": {
            "type": "integer",
            "_name_": "window",
            "title": "window",
            "description": "`window` extends the validity to `window` many counter ticks before and after the current one."
          },
          "interval": {
            "type": "integer",
            "_name_": "interval",
            "title": "interval"
          },
          "services": {
            "type": "object",
            "properties": {
              "ssh": {
                "type": "boolean",
                "_name_": "ssh",
                "title": "ssh",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "services",
            "title": "services",
            "default": {},
            "_attrs_order_": [
              "ssh"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "auth_twofactor_update",
        "title": "auth_twofactor_entry",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "otp_digits",
          "window",
          "interval",
          "services"
        ]
      },
      "auth_twofactor_verify_0": {
        "_name_": "token",
        "title": "token",
        "type": "string",
        "nullable": true
      },
      "boot_attach_0": {
        "_name_": "dev",
        "title": "dev",
        "type": "string"
      },
      "boot_attach_1": {
        "type": "object",
        "properties": {
          "expand": {
            "type": "boolean",
            "_name_": "expand",
            "title": "expand",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "expand"
        ]
      },
      "boot_attach": {
        "type": "object",
        "properties": {
          "dev": {
            "$ref": "#/components/schemas/boot_attach_0"
          },
          "options": {
            "$ref": "#/components/schemas/boot_attach_1"
          }
        }
      },
      "boot_detach_0": {
        "_name_": "dev",
        "title": "dev",
        "type": "string"
      },
      "boot_replace_0": {
        "_name_": "label",
        "title": "label",
        "type": "string"
      },
      "boot_replace_1": {
        "_name_": "dev",
        "title": "dev",
        "type": "string"
      },
      "boot_replace": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/boot_replace_0"
          },
          "dev": {
            "$ref": "#/components/schemas/boot_replace_1"
          }
        }
      },
      "boot_set_scrub_interval_0": {
        "type": "integer",
        "_name_": "interval",
        "title": "interval"
      },
      "bootenv_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "Create a new boot environment using `name`.\nIf a new boot environment is desired which is a clone of another boot environment, `source` can be passed.\nThen, a new boot environment of `name` is created using boot environment `source` by cloning it."
          },
          "source": {
            "_name_": "source",
            "title": "source",
            "type": "string",
            "description": "If a new boot environment is desired which is a clone of another boot environment, `source` can be passed.\nThen, a new boot environment of `name` is created using boot environment `source` by cloning it."
          }
        },
        "additionalProperties": false,
        "_name_": "bootenv_create",
        "title": "bootenv_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "source"
        ]
      },
      "bootenv_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "bootenv_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "bootenv_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/bootenv_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/bootenv_get_instance_1"
          }
        }
      },
      "catalog_create_0": {
        "type": "object",
        "properties": {
          "label": {
            "_name_": "label",
            "title": "label",
            "type": "string"
          },
          "repository": {
            "_name_": "repository",
            "title": "repository",
            "type": "string"
          },
          "branch": {
            "_name_": "branch",
            "title": "branch",
            "type": "string"
          },
          "preferred_trains": {
            "_name_": "preferred_trains",
            "title": "preferred_trains",
            "default": [],
            "type": "array",
            "items": {}
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "catalog_create",
        "title": "catalog_entry",
        "default": {},
        "_attrs_order_": [
          "label",
          "repository",
          "branch",
          "preferred_trains",
          "force"
        ]
      },
      "catalog_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "catalog_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "catalog_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/catalog_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/catalog_get_instance_1"
          }
        }
      },
      "catalog_get_item_details_0": {
        "_name_": "item_name",
        "title": "item_name",
        "type": "string"
      },
      "catalog_get_item_details_1": {
        "type": "object",
        "properties": {
          "cache": {
            "type": "boolean",
            "_name_": "cache",
            "title": "cache"
          },
          "catalog": {
            "_name_": "catalog",
            "title": "catalog",
            "type": "string"
          },
          "train": {
            "_name_": "train",
            "title": "train",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "item_version_details",
        "title": "item_version_details",
        "default": {},
        "_attrs_order_": [
          "cache",
          "catalog",
          "train"
        ]
      },
      "catalog_get_item_details": {
        "type": "object",
        "properties": {
          "item_name": {
            "$ref": "#/components/schemas/catalog_get_item_details_0"
          },
          "item_version_details": {
            "$ref": "#/components/schemas/catalog_get_item_details_1"
          }
        }
      },
      "catalog_items_0": {
        "_name_": "label",
        "title": "label",
        "type": "string",
        "description": "Retrieve item details for `label` catalog.\n`options.cache` is a boolean which when set will try to get items details for `label` catalog from cache\nif available."
      },
      "catalog_items_1": {
        "type": "object",
        "properties": {
          "cache": {
            "type": "boolean",
            "_name_": "cache",
            "title": "cache",
            "default": true
          },
          "cache_only": {
            "type": "boolean",
            "_name_": "cache_only",
            "title": "cache_only",
            "default": false
          },
          "retrieve_all_trains": {
            "type": "boolean",
            "_name_": "retrieve_all_trains",
            "title": "retrieve_all_trains",
            "default": true
          },
          "trains": {
            "_name_": "trains",
            "title": "trains",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "train_name",
              "title": "train_name",
              "_required_": false,
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "cache",
          "cache_only",
          "retrieve_all_trains",
          "trains"
        ]
      },
      "catalog_items": {
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/catalog_items_0"
          },
          "options": {
            "$ref": "#/components/schemas/catalog_items_1"
          }
        }
      },
      "catalog_sync_0": {
        "_name_": "label",
        "title": "label",
        "type": "string"
      },
      "catalog_validate_0": {
        "_name_": "label",
        "title": "label",
        "type": "string",
        "description": "Validates `label` catalog format which includes validating trains and applications with their versions."
      },
      "certificate_create_0": {
        "type": "object",
        "properties": {
          "tos": {
            "type": "boolean",
            "_name_": "tos",
            "title": "tos"
          },
          "dns_mapping": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "dns_mapping",
            "title": "dns_mapping",
            "default": {},
            "_attrs_order_": []
          },
          "csr_id": {
            "type": "integer",
            "_name_": "csr_id",
            "title": "csr_id"
          },
          "signedby": {
            "type": "integer",
            "_name_": "signedby",
            "title": "signedby"
          },
          "key_length": {
            "type": "integer",
            "_name_": "key_length",
            "title": "key_length"
          },
          "renew_days": {
            "type": "integer",
            "_name_": "renew_days",
            "title": "renew_days"
          },
          "type": {
            "type": "integer",
            "_name_": "type",
            "title": "type"
          },
          "lifetime": {
            "type": "integer",
            "_name_": "lifetime",
            "title": "lifetime"
          },
          "serial": {
            "type": "integer",
            "_name_": "serial",
            "title": "serial"
          },
          "acme_directory_uri": {
            "_name_": "acme_directory_uri",
            "title": "acme_directory_uri",
            "type": "string"
          },
          "certificate": {
            "_name_": "certificate",
            "title": "certificate",
            "type": "string"
          },
          "city": {
            "_name_": "city",
            "title": "city",
            "type": "string"
          },
          "common": {
            "_name_": "common",
            "title": "common",
            "type": "string",
            "nullable": true
          },
          "country": {
            "_name_": "country",
            "title": "country",
            "type": "string"
          },
          "CSR": {
            "_name_": "CSR",
            "title": "CSR",
            "type": "string"
          },
          "ec_curve": {
            "_name_": "ec_curve",
            "title": "ec_curve",
            "default": "SECP384R1",
            "type": "string",
            "enum": [
              "BrainpoolP512R1",
              "BrainpoolP384R1",
              "BrainpoolP256R1",
              "SECP256K1",
              "SECP384R1",
              "SECP521R1",
              "ed25519"
            ],
            "description": "`key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, then default to\nusing \"BrainpoolP384R1\" curve."
          },
          "email": {
            "_name_": "email",
            "title": "email",
            "type": "string"
          },
          "key_type": {
            "_name_": "key_type",
            "title": "key_type",
            "default": "RSA",
            "type": "string",
            "enum": [
              "RSA",
              "EC"
            ],
            "description": "`key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, then default to\nusing \"BrainpoolP384R1\" curve."
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "organization": {
            "_name_": "organization",
            "title": "organization",
            "type": "string"
          },
          "organizational_unit": {
            "_name_": "organizational_unit",
            "title": "organizational_unit",
            "type": "string"
          },
          "passphrase": {
            "_name_": "passphrase",
            "title": "passphrase",
            "type": "string"
          },
          "privatekey": {
            "_name_": "privatekey",
            "title": "privatekey",
            "type": "string"
          },
          "state": {
            "_name_": "state",
            "title": "state",
            "type": "string"
          },
          "create_type": {
            "_name_": "create_type",
            "title": "create_type",
            "type": "string",
            "enum": [
              "CERTIFICATE_CREATE_INTERNAL",
              "CERTIFICATE_CREATE_IMPORTED",
              "CERTIFICATE_CREATE_CSR",
              "CERTIFICATE_CREATE_IMPORTED_CSR",
              "CERTIFICATE_CREATE_ACME"
            ],
            "description": "Certificates are classified under following types and the necessary keywords to be passed\nfor `create_type` attribute to create the respective type of certificate\nA type is selected by the Certificate Service based on `create_type`. The rest of the values in `data` are\nvalidated accordingly and finally a certificate is made based on the selected type."
          },
          "digest_algorithm": {
            "_name_": "digest_algorithm",
            "title": "digest_algorithm",
            "type": "string",
            "enum": [
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512"
            ]
          },
          "san": {
            "_name_": "san",
            "title": "san",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "san",
              "title": "san",
              "_required_": false,
              "type": "string"
            }
          },
          "cert_extensions": {
            "type": "object",
            "properties": {
              "BasicConstraints": {
                "type": "object",
                "properties": {
                  "ca": {
                    "type": "boolean",
                    "_name_": "ca",
                    "title": "ca",
                    "default": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "path_length": {
                    "type": "integer",
                    "_name_": "path_length",
                    "title": "path_length",
                    "default": null,
                    "nullable": true
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "BasicConstraints",
                "title": "BasicConstraints",
                "default": {},
                "_attrs_order_": [
                  "ca",
                  "enabled",
                  "path_length",
                  "extension_critical"
                ]
              },
              "AuthorityKeyIdentifier": {
                "type": "object",
                "properties": {
                  "authority_cert_issuer": {
                    "type": "boolean",
                    "_name_": "authority_cert_issuer",
                    "title": "authority_cert_issuer",
                    "default": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "AuthorityKeyIdentifier",
                "title": "AuthorityKeyIdentifier",
                "default": {},
                "_attrs_order_": [
                  "authority_cert_issuer",
                  "enabled",
                  "extension_critical"
                ]
              },
              "ExtendedKeyUsage": {
                "type": "object",
                "properties": {
                  "usages": {
                    "_name_": "usages",
                    "title": "usages",
                    "default": [],
                    "type": "array",
                    "items": {
                      "_name_": "usage",
                      "title": "usage",
                      "_required_": false,
                      "type": "string",
                      "enum": [
                        "ANY_EXTENDED_KEY_USAGE",
                        "CLIENT_AUTH",
                        "CODE_SIGNING",
                        "EMAIL_PROTECTION",
                        "OCSP_SIGNING",
                        "SERVER_AUTH",
                        "TIME_STAMPING"
                      ]
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "ExtendedKeyUsage",
                "title": "ExtendedKeyUsage",
                "default": {},
                "_attrs_order_": [
                  "usages",
                  "enabled",
                  "extension_critical"
                ]
              },
              "KeyUsage": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "digital_signature": {
                    "type": "boolean",
                    "_name_": "digital_signature",
                    "title": "digital_signature",
                    "default": false
                  },
                  "content_commitment": {
                    "type": "boolean",
                    "_name_": "content_commitment",
                    "title": "content_commitment",
                    "default": false
                  },
                  "key_encipherment": {
                    "type": "boolean",
                    "_name_": "key_encipherment",
                    "title": "key_encipherment",
                    "default": false
                  },
                  "data_encipherment": {
                    "type": "boolean",
                    "_name_": "data_encipherment",
                    "title": "data_encipherment",
                    "default": false
                  },
                  "key_agreement": {
                    "type": "boolean",
                    "_name_": "key_agreement",
                    "title": "key_agreement",
                    "default": false
                  },
                  "key_cert_sign": {
                    "type": "boolean",
                    "_name_": "key_cert_sign",
                    "title": "key_cert_sign",
                    "default": false
                  },
                  "crl_sign": {
                    "type": "boolean",
                    "_name_": "crl_sign",
                    "title": "crl_sign",
                    "default": false
                  },
                  "encipher_only": {
                    "type": "boolean",
                    "_name_": "encipher_only",
                    "title": "encipher_only",
                    "default": false
                  },
                  "decipher_only": {
                    "type": "boolean",
                    "_name_": "decipher_only",
                    "title": "decipher_only",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "KeyUsage",
                "title": "KeyUsage",
                "default": {},
                "_attrs_order_": [
                  "enabled",
                  "digital_signature",
                  "content_commitment",
                  "key_encipherment",
                  "data_encipherment",
                  "key_agreement",
                  "key_cert_sign",
                  "crl_sign",
                  "encipher_only",
                  "decipher_only",
                  "extension_critical"
                ]
              }
            },
            "additionalProperties": false,
            "_name_": "cert_extensions",
            "title": "cert_extensions",
            "default": {},
            "_attrs_order_": [
              "BasicConstraints",
              "AuthorityKeyIdentifier",
              "ExtendedKeyUsage",
              "KeyUsage"
            ],
            "description": "`cert_extensions` can be specified to set X509v3 extensions."
          }
        },
        "additionalProperties": false,
        "_name_": "certificate_create",
        "title": "certificate_create",
        "default": {},
        "_attrs_order_": [
          "tos",
          "dns_mapping",
          "csr_id",
          "signedby",
          "key_length",
          "renew_days",
          "type",
          "lifetime",
          "serial",
          "acme_directory_uri",
          "certificate",
          "city",
          "common",
          "country",
          "CSR",
          "ec_curve",
          "email",
          "key_type",
          "name",
          "organization",
          "organizational_unit",
          "passphrase",
          "privatekey",
          "state",
          "create_type",
          "digest_algorithm",
          "san",
          "cert_extensions"
        ]
      },
      "certificate_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "certificate_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "certificate_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/certificate_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/certificate_get_instance_1"
          }
        }
      },
      "certificateauthority_create_0": {
        "type": "object",
        "properties": {
          "tos": {
            "type": "boolean",
            "_name_": "tos",
            "title": "tos"
          },
          "csr_id": {
            "type": "integer",
            "_name_": "csr_id",
            "title": "csr_id"
          },
          "signedby": {
            "type": "integer",
            "_name_": "signedby",
            "title": "signedby"
          },
          "key_length": {
            "type": "integer",
            "_name_": "key_length",
            "title": "key_length"
          },
          "renew_days": {
            "type": "integer",
            "_name_": "renew_days",
            "title": "renew_days"
          },
          "type": {
            "type": "integer",
            "_name_": "type",
            "title": "type"
          },
          "lifetime": {
            "type": "integer",
            "_name_": "lifetime",
            "title": "lifetime"
          },
          "serial": {
            "type": "integer",
            "_name_": "serial",
            "title": "serial"
          },
          "acme_directory_uri": {
            "_name_": "acme_directory_uri",
            "title": "acme_directory_uri",
            "type": "string"
          },
          "certificate": {
            "_name_": "certificate",
            "title": "certificate",
            "type": "string"
          },
          "city": {
            "_name_": "city",
            "title": "city",
            "type": "string"
          },
          "common": {
            "_name_": "common",
            "title": "common",
            "type": "string",
            "nullable": true
          },
          "country": {
            "_name_": "country",
            "title": "country",
            "type": "string"
          },
          "CSR": {
            "_name_": "CSR",
            "title": "CSR",
            "type": "string"
          },
          "ec_curve": {
            "_name_": "ec_curve",
            "title": "ec_curve",
            "default": "SECP384R1",
            "type": "string",
            "enum": [
              "BrainpoolP512R1",
              "BrainpoolP384R1",
              "BrainpoolP256R1",
              "SECP256K1",
              "SECP384R1",
              "SECP521R1",
              "ed25519"
            ],
            "description": "Created certificate authorities use RSA keys by default. If an Elliptic Curve Key is desired, then it can be\nspecified with the `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic\nCurve Key, default to using \"BrainpoolP384R1\" curve."
          },
          "email": {
            "_name_": "email",
            "title": "email",
            "type": "string"
          },
          "key_type": {
            "_name_": "key_type",
            "title": "key_type",
            "default": "RSA",
            "type": "string",
            "enum": [
              "RSA",
              "EC"
            ],
            "description": "Created certificate authorities use RSA keys by default. If an Elliptic Curve Key is desired, then it can be\nspecified with the `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic\nCurve Key, default to using \"BrainpoolP384R1\" curve."
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "organization": {
            "_name_": "organization",
            "title": "organization",
            "type": "string"
          },
          "organizational_unit": {
            "_name_": "organizational_unit",
            "title": "organizational_unit",
            "type": "string"
          },
          "passphrase": {
            "_name_": "passphrase",
            "title": "passphrase",
            "type": "string"
          },
          "privatekey": {
            "_name_": "privatekey",
            "title": "privatekey",
            "type": "string"
          },
          "state": {
            "_name_": "state",
            "title": "state",
            "type": "string"
          },
          "create_type": {
            "_name_": "create_type",
            "title": "create_type",
            "type": "string",
            "enum": [
              "CA_CREATE_INTERNAL",
              "CA_CREATE_IMPORTED",
              "CA_CREATE_INTERMEDIATE"
            ],
            "description": "Certificate Authorities are classified under following types with the necessary keywords to be passed\nfor `create_type` attribute to create the respective type of certificate authority\nA type is selected by the Certificate Authority Service based on `create_type`. The rest of the values\nare validated accordingly and finally a certificate is made based on the selected type."
          },
          "digest_algorithm": {
            "_name_": "digest_algorithm",
            "title": "digest_algorithm",
            "type": "string",
            "enum": [
              "SHA224",
              "SHA256",
              "SHA384",
              "SHA512"
            ]
          },
          "san": {
            "_name_": "san",
            "title": "san",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "san",
              "title": "san",
              "_required_": false,
              "type": "string"
            }
          },
          "cert_extensions": {
            "type": "object",
            "properties": {
              "BasicConstraints": {
                "type": "object",
                "properties": {
                  "ca": {
                    "type": "boolean",
                    "_name_": "ca",
                    "title": "ca",
                    "default": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": true
                  },
                  "path_length": {
                    "type": "integer",
                    "_name_": "path_length",
                    "title": "path_length",
                    "default": null,
                    "nullable": true
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": true
                  }
                },
                "additionalProperties": false,
                "_name_": "BasicConstraints",
                "title": "BasicConstraints",
                "default": {},
                "_attrs_order_": [
                  "ca",
                  "enabled",
                  "path_length",
                  "extension_critical"
                ]
              },
              "AuthorityKeyIdentifier": {
                "type": "object",
                "properties": {
                  "authority_cert_issuer": {
                    "type": "boolean",
                    "_name_": "authority_cert_issuer",
                    "title": "authority_cert_issuer",
                    "default": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "AuthorityKeyIdentifier",
                "title": "AuthorityKeyIdentifier",
                "default": {},
                "_attrs_order_": [
                  "authority_cert_issuer",
                  "enabled",
                  "extension_critical"
                ]
              },
              "ExtendedKeyUsage": {
                "type": "object",
                "properties": {
                  "usages": {
                    "_name_": "usages",
                    "title": "usages",
                    "default": [
                      "SERVER_AUTH"
                    ],
                    "type": "array",
                    "items": {
                      "_name_": "usage",
                      "title": "usage",
                      "_required_": false,
                      "type": "string",
                      "enum": [
                        "ANY_EXTENDED_KEY_USAGE",
                        "CLIENT_AUTH",
                        "CODE_SIGNING",
                        "EMAIL_PROTECTION",
                        "OCSP_SIGNING",
                        "SERVER_AUTH",
                        "TIME_STAMPING"
                      ]
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": true
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "ExtendedKeyUsage",
                "title": "ExtendedKeyUsage",
                "default": {},
                "_attrs_order_": [
                  "usages",
                  "enabled",
                  "extension_critical"
                ]
              },
              "KeyUsage": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": true
                  },
                  "digital_signature": {
                    "type": "boolean",
                    "_name_": "digital_signature",
                    "title": "digital_signature",
                    "default": false
                  },
                  "content_commitment": {
                    "type": "boolean",
                    "_name_": "content_commitment",
                    "title": "content_commitment",
                    "default": false
                  },
                  "key_encipherment": {
                    "type": "boolean",
                    "_name_": "key_encipherment",
                    "title": "key_encipherment",
                    "default": false
                  },
                  "data_encipherment": {
                    "type": "boolean",
                    "_name_": "data_encipherment",
                    "title": "data_encipherment",
                    "default": false
                  },
                  "key_agreement": {
                    "type": "boolean",
                    "_name_": "key_agreement",
                    "title": "key_agreement",
                    "default": false
                  },
                  "key_cert_sign": {
                    "type": "boolean",
                    "_name_": "key_cert_sign",
                    "title": "key_cert_sign",
                    "default": true
                  },
                  "crl_sign": {
                    "type": "boolean",
                    "_name_": "crl_sign",
                    "title": "crl_sign",
                    "default": true
                  },
                  "encipher_only": {
                    "type": "boolean",
                    "_name_": "encipher_only",
                    "title": "encipher_only",
                    "default": false
                  },
                  "decipher_only": {
                    "type": "boolean",
                    "_name_": "decipher_only",
                    "title": "decipher_only",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": true
                  }
                },
                "additionalProperties": false,
                "_name_": "KeyUsage",
                "title": "KeyUsage",
                "default": {},
                "_attrs_order_": [
                  "enabled",
                  "digital_signature",
                  "content_commitment",
                  "key_encipherment",
                  "data_encipherment",
                  "key_agreement",
                  "key_cert_sign",
                  "crl_sign",
                  "encipher_only",
                  "decipher_only",
                  "extension_critical"
                ]
              }
            },
            "additionalProperties": false,
            "_name_": "cert_extensions",
            "title": "cert_extensions",
            "default": {},
            "_attrs_order_": [
              "BasicConstraints",
              "AuthorityKeyIdentifier",
              "ExtendedKeyUsage",
              "KeyUsage"
            ],
            "description": "`cert_extensions` can be specified to set X509v3 extensions."
          },
          "add_to_trusted_store": {
            "type": "boolean",
            "_name_": "add_to_trusted_store",
            "title": "add_to_trusted_store",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "ca_create",
        "title": "certificate_create",
        "default": {},
        "_attrs_order_": [
          "tos",
          "csr_id",
          "signedby",
          "key_length",
          "renew_days",
          "type",
          "lifetime",
          "serial",
          "acme_directory_uri",
          "certificate",
          "city",
          "common",
          "country",
          "CSR",
          "ec_curve",
          "email",
          "key_type",
          "name",
          "organization",
          "organizational_unit",
          "passphrase",
          "privatekey",
          "state",
          "create_type",
          "digest_algorithm",
          "san",
          "cert_extensions",
          "add_to_trusted_store"
        ]
      },
      "certificateauthority_ca_sign_csr_0": {
        "type": "object",
        "properties": {
          "ca_id": {
            "type": "integer",
            "_name_": "ca_id",
            "title": "ca_id",
            "description": "Sign CSR by Certificate Authority of `ca_id`\nSign CSR's and generate a certificate from it. `ca_id` provides which CA is to be used for signing\na CSR of `csr_cert_id` which exists in the system"
          },
          "csr_cert_id": {
            "type": "integer",
            "_name_": "csr_cert_id",
            "title": "csr_cert_id",
            "description": "Sign CSR's and generate a certificate from it. `ca_id` provides which CA is to be used for signing\na CSR of `csr_cert_id` which exists in the system"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "cert_extensions": {
            "type": "object",
            "properties": {
              "BasicConstraints": {
                "type": "object",
                "properties": {
                  "ca": {
                    "type": "boolean",
                    "_name_": "ca",
                    "title": "ca",
                    "default": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "path_length": {
                    "type": "integer",
                    "_name_": "path_length",
                    "title": "path_length",
                    "default": null,
                    "nullable": true
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "BasicConstraints",
                "title": "BasicConstraints",
                "default": {},
                "_attrs_order_": [
                  "ca",
                  "enabled",
                  "path_length",
                  "extension_critical"
                ]
              },
              "AuthorityKeyIdentifier": {
                "type": "object",
                "properties": {
                  "authority_cert_issuer": {
                    "type": "boolean",
                    "_name_": "authority_cert_issuer",
                    "title": "authority_cert_issuer",
                    "default": false
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "AuthorityKeyIdentifier",
                "title": "AuthorityKeyIdentifier",
                "default": {},
                "_attrs_order_": [
                  "authority_cert_issuer",
                  "enabled",
                  "extension_critical"
                ]
              },
              "ExtendedKeyUsage": {
                "type": "object",
                "properties": {
                  "usages": {
                    "_name_": "usages",
                    "title": "usages",
                    "default": [],
                    "type": "array",
                    "items": {
                      "_name_": "usage",
                      "title": "usage",
                      "_required_": false,
                      "type": "string",
                      "enum": [
                        "ANY_EXTENDED_KEY_USAGE",
                        "CLIENT_AUTH",
                        "CODE_SIGNING",
                        "EMAIL_PROTECTION",
                        "OCSP_SIGNING",
                        "SERVER_AUTH",
                        "TIME_STAMPING"
                      ]
                    }
                  },
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "ExtendedKeyUsage",
                "title": "ExtendedKeyUsage",
                "default": {},
                "_attrs_order_": [
                  "usages",
                  "enabled",
                  "extension_critical"
                ]
              },
              "KeyUsage": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "_name_": "enabled",
                    "title": "enabled",
                    "default": false
                  },
                  "digital_signature": {
                    "type": "boolean",
                    "_name_": "digital_signature",
                    "title": "digital_signature",
                    "default": false
                  },
                  "content_commitment": {
                    "type": "boolean",
                    "_name_": "content_commitment",
                    "title": "content_commitment",
                    "default": false
                  },
                  "key_encipherment": {
                    "type": "boolean",
                    "_name_": "key_encipherment",
                    "title": "key_encipherment",
                    "default": false
                  },
                  "data_encipherment": {
                    "type": "boolean",
                    "_name_": "data_encipherment",
                    "title": "data_encipherment",
                    "default": false
                  },
                  "key_agreement": {
                    "type": "boolean",
                    "_name_": "key_agreement",
                    "title": "key_agreement",
                    "default": false
                  },
                  "key_cert_sign": {
                    "type": "boolean",
                    "_name_": "key_cert_sign",
                    "title": "key_cert_sign",
                    "default": false
                  },
                  "crl_sign": {
                    "type": "boolean",
                    "_name_": "crl_sign",
                    "title": "crl_sign",
                    "default": false
                  },
                  "encipher_only": {
                    "type": "boolean",
                    "_name_": "encipher_only",
                    "title": "encipher_only",
                    "default": false
                  },
                  "decipher_only": {
                    "type": "boolean",
                    "_name_": "decipher_only",
                    "title": "decipher_only",
                    "default": false
                  },
                  "extension_critical": {
                    "type": "boolean",
                    "_name_": "extension_critical",
                    "title": "extension_critical",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "_name_": "KeyUsage",
                "title": "KeyUsage",
                "default": {},
                "_attrs_order_": [
                  "enabled",
                  "digital_signature",
                  "content_commitment",
                  "key_encipherment",
                  "data_encipherment",
                  "key_agreement",
                  "key_cert_sign",
                  "crl_sign",
                  "encipher_only",
                  "decipher_only",
                  "extension_critical"
                ]
              }
            },
            "additionalProperties": false,
            "_name_": "cert_extensions",
            "title": "cert_extensions",
            "default": {},
            "_attrs_order_": [
              "BasicConstraints",
              "AuthorityKeyIdentifier",
              "ExtendedKeyUsage",
              "KeyUsage"
            ],
            "description": "`cert_extensions` can be specified if specific extensions are to be set in the newly signed certificate."
          }
        },
        "additionalProperties": false,
        "_name_": "ca_sign_csr",
        "title": "ca_sign_csr",
        "default": {},
        "_attrs_order_": [
          "ca_id",
          "csr_cert_id",
          "name",
          "cert_extensions"
        ]
      },
      "certificateauthority_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "certificateauthority_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "certificateauthority_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/certificateauthority_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/certificateauthority_get_instance_1"
          }
        }
      },
      "chart_release_create_0": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "values",
            "title": "values",
            "default": {},
            "_attrs_order_": []
          },
          "catalog": {
            "_name_": "catalog",
            "title": "catalog",
            "type": "string",
            "description": "`catalog` is a valid catalog id where system will look for catalog `item` details.\n`train` is which train to look for under `catalog` i.e stable / testing etc."
          },
          "item": {
            "_name_": "item",
            "title": "item",
            "type": "string",
            "description": "`catalog` is a valid catalog id where system will look for catalog `item` details.\n`version` specifies the catalog `item` version."
          },
          "release_name": {
            "_name_": "release_name",
            "title": "release_name",
            "type": "string",
            "description": "`release_name` is the name which will be used to identify the created chart release."
          },
          "train": {
            "_name_": "train",
            "title": "train",
            "default": "charts",
            "type": "string",
            "description": "`train` is which train to look for under `catalog` i.e stable / testing etc."
          },
          "version": {
            "_name_": "version",
            "title": "version",
            "default": "latest",
            "type": "string",
            "description": "`version` specifies the catalog `item` version."
          }
        },
        "additionalProperties": false,
        "_name_": "chart_release_create",
        "title": "chart_release_create",
        "default": {},
        "_attrs_order_": [
          "values",
          "catalog",
          "item",
          "release_name",
          "train",
          "version"
        ]
      },
      "chart_release_events_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_get_chart_releases_using_chart_release_images_0": {
        "_name_": "chart_release_name",
        "title": "chart_release_name",
        "type": "string"
      },
      "chart_release_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "chart_release_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "chart_release_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/chart_release_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/chart_release_get_instance_1"
          }
        }
      },
      "chart_release_pod_console_choices_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_pod_logs_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string",
        "description": "Export logs of `options.container_name` container in `options.pod_name` pod in `release_name` chart release."
      },
      "chart_release_pod_logs_1": {
        "type": "object",
        "properties": {
          "limit_bytes": {
            "type": "integer",
            "_name_": "limit_bytes",
            "title": "limit_bytes",
            "default": null,
            "nullable": true
          },
          "tail_lines": {
            "type": "integer",
            "_name_": "tail_lines",
            "title": "tail_lines",
            "default": 500,
            "nullable": true
          },
          "pod_name": {
            "_name_": "pod_name",
            "title": "pod_name",
            "type": "string"
          },
          "container_name": {
            "_name_": "container_name",
            "title": "container_name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "limit_bytes",
          "tail_lines",
          "pod_name",
          "container_name"
        ]
      },
      "chart_release_pod_logs": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_pod_logs_0"
          },
          "options": {
            "$ref": "#/components/schemas/chart_release_pod_logs_1"
          }
        }
      },
      "chart_release_pod_logs_choices_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_pod_status_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_pull_container_images_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string",
        "description": "Update container images being used by `release_name` chart release."
      },
      "chart_release_pull_container_images_1": {
        "type": "object",
        "properties": {
          "redeploy": {
            "type": "boolean",
            "_name_": "redeploy",
            "title": "redeploy",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "pull_container_images_options",
        "title": "pull_container_images_options",
        "default": {},
        "_attrs_order_": [
          "redeploy"
        ]
      },
      "chart_release_pull_container_images": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_pull_container_images_0"
          },
          "pull_container_images_options": {
            "$ref": "#/components/schemas/chart_release_pull_container_images_1"
          }
        }
      },
      "chart_release_redeploy_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_remove_ix_volume_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_remove_ix_volume_1": {
        "_name_": "volume_name",
        "title": "volume_name",
        "type": "string"
      },
      "chart_release_remove_ix_volume": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_remove_ix_volume_0"
          },
          "volume_name": {
            "$ref": "#/components/schemas/chart_release_remove_ix_volume_1"
          }
        }
      },
      "chart_release_rollback_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_rollback_1": {
        "type": "object",
        "properties": {
          "force_rollback": {
            "type": "boolean",
            "_name_": "force_rollback",
            "title": "force_rollback",
            "default": false,
            "description": "`force_rollback` is a boolean which when set will force rollback operation to move forward even if no\nsnapshots are found. This is only useful when `rollback_snapshot` is set."
          },
          "recreate_resources": {
            "type": "boolean",
            "_name_": "recreate_resources",
            "title": "recreate_resources",
            "default": false,
            "description": "`recreate_resources` is a boolean which will delete and then create the kubernetes resources on rollback\nof chart release. This should be used with caution as if chart release is consuming immutable objects like\na PVC, the rollback operation can't be performed and will fail as helm tries to do a 3 way patch for rollback."
          },
          "rollback_snapshot": {
            "type": "boolean",
            "_name_": "rollback_snapshot",
            "title": "rollback_snapshot",
            "default": true,
            "description": "`rollback_snapshot` is a boolean value which when set will rollback snapshots of any PVC's or ix volumes being\nconsumed by the chart release.\n`force_rollback` is a boolean which when set will force rollback operation to move forward even if no\nsnapshots are found. This is only useful when `rollback_snapshot` is set."
          },
          "item_version": {
            "_name_": "item_version",
            "title": "item_version",
            "type": "string",
            "description": "`item_version` is version which we want to rollback a chart release to."
          }
        },
        "additionalProperties": false,
        "_name_": "rollback_options",
        "title": "rollback_options",
        "default": {},
        "_attrs_order_": [
          "force_rollback",
          "recreate_resources",
          "rollback_snapshot",
          "item_version"
        ]
      },
      "chart_release_rollback": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_rollback_0"
          },
          "rollback_options": {
            "$ref": "#/components/schemas/chart_release_rollback_1"
          }
        }
      },
      "chart_release_scale_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string",
        "description": "Scale a `release_name` chart release to `scale_options.replica_count` specified."
      },
      "chart_release_scale_1": {
        "type": "object",
        "properties": {
          "replica_count": {
            "type": "integer",
            "_name_": "replica_count",
            "title": "replica_count"
          }
        },
        "additionalProperties": false,
        "_name_": "scale_options",
        "title": "scale_options",
        "default": {},
        "_attrs_order_": [
          "replica_count"
        ]
      },
      "chart_release_scale": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_scale_0"
          },
          "scale_options": {
            "$ref": "#/components/schemas/chart_release_scale_1"
          }
        }
      },
      "chart_release_scale_workloads_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string"
      },
      "chart_release_scale_workloads_1": {
        "_name_": "workloads",
        "title": "workloads",
        "default": [],
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "replica_count": {
              "type": "integer",
              "_name_": "replica_count",
              "title": "replica_count",
              "_required_": true
            },
            "type": {
              "_name_": "type",
              "title": "type",
              "_required_": true,
              "type": "string",
              "enum": [
                "DEPLOYMENT",
                "STATEFULSET"
              ]
            },
            "name": {
              "_name_": "name",
              "title": "name",
              "_required_": true,
              "type": "string"
            }
          },
          "additionalProperties": false,
          "_name_": "scale_workload",
          "title": "scale_workload",
          "default": {},
          "_required_": false,
          "_attrs_order_": [
            "replica_count",
            "type",
            "name"
          ]
        }
      },
      "chart_release_scale_workloads": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_scale_workloads_0"
          },
          "workloads": {
            "$ref": "#/components/schemas/chart_release_scale_workloads_1"
          }
        }
      },
      "chart_release_upgrade_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string",
        "description": "Upgrade `release_name` chart release.\nSystem will update container images being used by `release_name` chart release as a chart release\nupgrade is not considered complete until the images in use have also been updated to latest versions."
      },
      "chart_release_upgrade_1": {
        "type": "object",
        "properties": {
          "values": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "values",
            "title": "values",
            "default": {},
            "_attrs_order_": []
          },
          "item_version": {
            "_name_": "item_version",
            "title": "item_version",
            "default": "latest",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "upgrade_options",
        "title": "upgrade_options",
        "default": {},
        "_attrs_order_": [
          "values",
          "item_version"
        ]
      },
      "chart_release_upgrade": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_upgrade_0"
          },
          "upgrade_options": {
            "$ref": "#/components/schemas/chart_release_upgrade_1"
          }
        }
      },
      "chart_release_upgrade_summary_0": {
        "_name_": "release_name",
        "title": "release_name",
        "type": "string",
        "description": "Retrieve upgrade summary for `release_name` which will include which container images will be updated\nand changelog for `options.item_version` chart version specified if applicable. If only container images\nneed to be updated, changelog will be `null`."
      },
      "chart_release_upgrade_summary_1": {
        "type": "object",
        "properties": {
          "item_version": {
            "_name_": "item_version",
            "title": "item_version",
            "default": "latest",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "item_version"
        ]
      },
      "chart_release_upgrade_summary": {
        "type": "object",
        "properties": {
          "release_name": {
            "$ref": "#/components/schemas/chart_release_upgrade_summary_0"
          },
          "options": {
            "$ref": "#/components/schemas/chart_release_upgrade_summary_1"
          }
        }
      },
      "cloudsync_create_0": {
        "type": "object",
        "properties": {
          "description": {
            "_name_": "description",
            "title": "description",
            "default": "",
            "type": "string"
          },
          "direction": {
            "_name_": "direction",
            "title": "direction",
            "type": "string",
            "enum": [
              "PUSH",
              "PULL"
            ]
          },
          "transfer_mode": {
            "_name_": "transfer_mode",
            "title": "transfer_mode",
            "type": "string",
            "enum": [
              "SYNC",
              "COPY",
              "MOVE"
            ]
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string"
          },
          "credentials": {
            "type": "integer",
            "_name_": "credentials",
            "title": "credentials"
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false
          },
          "filename_encryption": {
            "type": "boolean",
            "_name_": "filename_encryption",
            "title": "filename_encryption",
            "default": false
          },
          "encryption_password": {
            "_name_": "encryption_password",
            "title": "encryption_password",
            "default": "",
            "type": "string"
          },
          "encryption_salt": {
            "_name_": "encryption_salt",
            "title": "encryption_salt",
            "default": "",
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "create_empty_src_dirs": {
            "type": "boolean",
            "_name_": "create_empty_src_dirs",
            "title": "create_empty_src_dirs",
            "default": false
          },
          "follow_symlinks": {
            "type": "boolean",
            "_name_": "follow_symlinks",
            "title": "follow_symlinks",
            "default": false
          },
          "transfers": {
            "type": "integer",
            "_name_": "transfers",
            "title": "transfers",
            "default": null,
            "nullable": true
          },
          "bwlimit": {
            "_name_": "bwlimit",
            "title": "bwlimit",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "time": {
                  "_name_": "time",
                  "title": "time",
                  "_required_": false,
                  "type": "string"
                },
                "bandwidth": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "_name_": "bandwidth",
                  "title": "bandwidth",
                  "_required_": false
                }
              },
              "additionalProperties": false,
              "_name_": "cloud_sync_bwlimit",
              "title": "cloud_sync_bwlimit",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "time",
                "bandwidth"
              ]
            }
          },
          "include": {
            "_name_": "include",
            "title": "include",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "path",
              "title": "path",
              "_required_": false,
              "type": "string"
            }
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "path",
              "title": "path",
              "_required_": false,
              "type": "string"
            }
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          },
          "snapshot": {
            "type": "boolean",
            "_name_": "snapshot",
            "title": "snapshot",
            "default": false
          },
          "pre_script": {
            "_name_": "pre_script",
            "title": "pre_script",
            "default": "",
            "type": "string"
          },
          "post_script": {
            "_name_": "post_script",
            "title": "post_script",
            "default": "",
            "type": "string"
          },
          "args": {
            "_name_": "args",
            "title": "args",
            "default": "",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_create",
        "title": "cloud_sync_create",
        "default": {},
        "_attrs_order_": [
          "description",
          "direction",
          "transfer_mode",
          "path",
          "credentials",
          "encryption",
          "filename_encryption",
          "encryption_password",
          "encryption_salt",
          "schedule",
          "create_empty_src_dirs",
          "follow_symlinks",
          "transfers",
          "bwlimit",
          "include",
          "exclude",
          "attributes",
          "snapshot",
          "pre_script",
          "post_script",
          "args",
          "enabled"
        ]
      },
      "cloudsync_create_bucket_0": {
        "type": "integer",
        "_name_": "credentials_id",
        "title": "credentials_id"
      },
      "cloudsync_create_bucket_1": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "cloudsync_create_bucket": {
        "type": "object",
        "properties": {
          "credentials_id": {
            "$ref": "#/components/schemas/cloudsync_create_bucket_0"
          },
          "name": {
            "$ref": "#/components/schemas/cloudsync_create_bucket_1"
          }
        }
      },
      "cloudsync_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "cloudsync_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "cloudsync_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/cloudsync_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/cloudsync_get_instance_1"
          }
        }
      },
      "cloudsync_list_buckets_0": {
        "type": "integer",
        "_name_": "credentials_id",
        "title": "credentials_id"
      },
      "cloudsync_list_directory_0": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "integer",
            "_name_": "credentials",
            "title": "credentials"
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false
          },
          "filename_encryption": {
            "type": "boolean",
            "_name_": "filename_encryption",
            "title": "filename_encryption",
            "default": false
          },
          "encryption_password": {
            "_name_": "encryption_password",
            "title": "encryption_password",
            "default": "",
            "type": "string"
          },
          "encryption_salt": {
            "_name_": "encryption_salt",
            "title": "encryption_salt",
            "default": "",
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": [],
            "description": "If remote supports buckets, path is constructed by two keys \"bucket\"/\"folder\" in `attributes`.\nIf remote does not support buckets, path is constructed using \"folder\" key only in `attributes`.\n\"folder\" is directory name and \"bucket\" is bucket name for remote."
          },
          "args": {
            "_name_": "args",
            "title": "args",
            "default": "",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_ls",
        "title": "cloud_sync_ls",
        "default": {},
        "_attrs_order_": [
          "credentials",
          "encryption",
          "filename_encryption",
          "encryption_password",
          "encryption_salt",
          "attributes",
          "args"
        ]
      },
      "cloudsync_onedrive_list_drives_0": {
        "type": "object",
        "properties": {
          "client_id": {
            "_name_": "client_id",
            "title": "client_id",
            "default": "",
            "type": "string"
          },
          "client_secret": {
            "_name_": "client_secret",
            "title": "client_secret",
            "default": "",
            "type": "string"
          },
          "token": {
            "_name_": "token",
            "title": "token",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "onedrive_list_drives",
        "title": "onedrive_list_drives",
        "default": {},
        "_attrs_order_": [
          "client_id",
          "client_secret",
          "token"
        ]
      },
      "cloudsync_sync_onetime_0": {
        "type": "object",
        "properties": {
          "description": {
            "_name_": "description",
            "title": "description",
            "default": "",
            "type": "string"
          },
          "direction": {
            "_name_": "direction",
            "title": "direction",
            "type": "string",
            "enum": [
              "PUSH",
              "PULL"
            ]
          },
          "transfer_mode": {
            "_name_": "transfer_mode",
            "title": "transfer_mode",
            "type": "string",
            "enum": [
              "SYNC",
              "COPY",
              "MOVE"
            ]
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string"
          },
          "credentials": {
            "type": "integer",
            "_name_": "credentials",
            "title": "credentials"
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false
          },
          "filename_encryption": {
            "type": "boolean",
            "_name_": "filename_encryption",
            "title": "filename_encryption",
            "default": false
          },
          "encryption_password": {
            "_name_": "encryption_password",
            "title": "encryption_password",
            "default": "",
            "type": "string"
          },
          "encryption_salt": {
            "_name_": "encryption_salt",
            "title": "encryption_salt",
            "default": "",
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "create_empty_src_dirs": {
            "type": "boolean",
            "_name_": "create_empty_src_dirs",
            "title": "create_empty_src_dirs",
            "default": false
          },
          "follow_symlinks": {
            "type": "boolean",
            "_name_": "follow_symlinks",
            "title": "follow_symlinks",
            "default": false
          },
          "transfers": {
            "type": "integer",
            "_name_": "transfers",
            "title": "transfers",
            "default": null,
            "nullable": true
          },
          "bwlimit": {
            "_name_": "bwlimit",
            "title": "bwlimit",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "time": {
                  "_name_": "time",
                  "title": "time",
                  "_required_": false,
                  "type": "string"
                },
                "bandwidth": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "_name_": "bandwidth",
                  "title": "bandwidth",
                  "_required_": false
                }
              },
              "additionalProperties": false,
              "_name_": "cloud_sync_bwlimit",
              "title": "cloud_sync_bwlimit",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "time",
                "bandwidth"
              ]
            }
          },
          "include": {
            "_name_": "include",
            "title": "include",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "path",
              "title": "path",
              "_required_": false,
              "type": "string"
            }
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "path",
              "title": "path",
              "_required_": false,
              "type": "string"
            }
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          },
          "snapshot": {
            "type": "boolean",
            "_name_": "snapshot",
            "title": "snapshot",
            "default": false
          },
          "pre_script": {
            "_name_": "pre_script",
            "title": "pre_script",
            "default": "",
            "type": "string"
          },
          "post_script": {
            "_name_": "post_script",
            "title": "post_script",
            "default": "",
            "type": "string"
          },
          "args": {
            "_name_": "args",
            "title": "args",
            "default": "",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_sync_onetime",
        "title": "cloud_sync_create",
        "default": {},
        "_attrs_order_": [
          "description",
          "direction",
          "transfer_mode",
          "path",
          "credentials",
          "encryption",
          "filename_encryption",
          "encryption_password",
          "encryption_salt",
          "schedule",
          "create_empty_src_dirs",
          "follow_symlinks",
          "transfers",
          "bwlimit",
          "include",
          "exclude",
          "attributes",
          "snapshot",
          "pre_script",
          "post_script",
          "args",
          "enabled"
        ]
      },
      "cloudsync_sync_onetime_1": {
        "type": "object",
        "properties": {
          "dry_run": {
            "type": "boolean",
            "_name_": "dry_run",
            "title": "dry_run",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_sync_onetime_options",
        "title": "cloud_sync_sync_options",
        "default": {},
        "_attrs_order_": [
          "dry_run"
        ]
      },
      "cloudsync_sync_onetime": {
        "type": "object",
        "properties": {
          "cloud_sync_create": {
            "$ref": "#/components/schemas/cloudsync_sync_onetime_0"
          },
          "cloud_sync_sync_options": {
            "$ref": "#/components/schemas/cloudsync_sync_onetime_1"
          }
        }
      },
      "cloudsync_credentials_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "provider": {
            "_name_": "provider",
            "title": "provider",
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_credentials_create",
        "title": "cloud_sync_credentials_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "provider",
          "attributes"
        ]
      },
      "cloudsync_credentials_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "cloudsync_credentials_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "cloudsync_credentials_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/cloudsync_credentials_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/cloudsync_credentials_get_instance_1"
          }
        }
      },
      "cloudsync_credentials_verify_0": {
        "type": "object",
        "properties": {
          "provider": {
            "_name_": "provider",
            "title": "provider",
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "cloud_sync_credentials_verify",
        "title": "cloud_sync_credentials_verify",
        "default": {},
        "_attrs_order_": [
          "provider",
          "attributes"
        ]
      },
      "config_reset_0": {
        "type": "object",
        "properties": {
          "reboot": {
            "type": "boolean",
            "_name_": "reboot",
            "title": "reboot",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "reboot"
        ]
      },
      "config_save_0": {
        "type": "object",
        "properties": {
          "secretseed": {
            "type": "boolean",
            "_name_": "secretseed",
            "title": "secretseed",
            "default": false,
            "description": "`secretseed` bool: When true, include password secret seed."
          },
          "pool_keys": {
            "type": "boolean",
            "_name_": "pool_keys",
            "title": "pool_keys",
            "default": false,
            "description": "`pool_keys` bool: IGNORED and DEPRECATED as it does not apply on SCALE systems."
          },
          "root_authorized_keys": {
            "type": "boolean",
            "_name_": "root_authorized_keys",
            "title": "root_authorized_keys",
            "default": false,
            "description": "`root_authorized_keys` bool: When true, include \"/root/.ssh/authorized_keys\" file for the root user."
          },
          "gluster_config": {
            "type": "boolean",
            "_name_": "gluster_config",
            "title": "gluster_config",
            "default": false,
            "description": "`gluster_config` bool: When true, include the directory that stores the gluster configuration files."
          }
        },
        "additionalProperties": false,
        "_name_": "configsave",
        "title": "configsave",
        "default": {},
        "_attrs_order_": [
          "secretseed",
          "pool_keys",
          "root_authorized_keys",
          "gluster_config"
        ]
      },
      "container_update_0": {
        "type": "object",
        "properties": {
          "enable_image_updates": {
            "type": "boolean",
            "_name_": "enable_image_updates",
            "title": "enable_image_updates"
          }
        },
        "additionalProperties": false,
        "_name_": "container_update",
        "title": "container_entry",
        "default": {},
        "_attrs_order_": [
          "enable_image_updates"
        ]
      },
      "container_prune_0": {
        "type": "object",
        "properties": {
          "remove_unused_images": {
            "type": "boolean",
            "_name_": "remove_unused_images",
            "title": "remove_unused_images",
            "default": false
          },
          "remove_stopped_containers": {
            "type": "boolean",
            "_name_": "remove_stopped_containers",
            "title": "remove_stopped_containers",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "prune_options",
        "title": "prune_options",
        "default": {},
        "_attrs_order_": [
          "remove_unused_images",
          "remove_stopped_containers"
        ]
      },
      "container_image_get_chart_releases_consuming_image_0": {
        "_name_": "image_tags",
        "title": "image_tags",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "image_tag",
          "title": "image_tag",
          "_required_": false,
          "type": "string"
        }
      },
      "container_image_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "container_image_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "container_image_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/container_image_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/container_image_get_instance_1"
          }
        }
      },
      "container_image_pull_0": {
        "type": "object",
        "properties": {
          "docker_authentication": {
            "type": "object",
            "properties": {
              "username": {
                "_name_": "username",
                "title": "username",
                "type": "string"
              },
              "password": {
                "_name_": "password",
                "title": "password",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "docker_authentication",
            "title": "docker_authentication",
            "default": null,
            "_attrs_order_": [
              "username",
              "password"
            ]
          },
          "from_image": {
            "_name_": "from_image",
            "title": "from_image",
            "type": "string",
            "description": "`from_image` is the name of the image to pull. Format for the name is \"registry/repo/image\" where\nregistry may be omitted and it will default to docker registry in this case."
          },
          "tag": {
            "_name_": "tag",
            "title": "tag",
            "default": null,
            "type": "string",
            "description": "`tag` specifies tag of the image and defaults to `null`. In case of `null` it will retrieve all the tags\nof the image.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "image_pull",
        "title": "image_pull",
        "default": {},
        "_attrs_order_": [
          "docker_authentication",
          "from_image",
          "tag"
        ]
      },
      "cronjob_create_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled"
          },
          "stderr": {
            "type": "boolean",
            "_name_": "stderr",
            "title": "stderr",
            "default": false,
            "description": "`stderr` and `stdout` are boolean values which if `true`, represent that we would like to suppress\nstandard error / standard output respectively."
          },
          "stdout": {
            "type": "boolean",
            "_name_": "stdout",
            "title": "stdout",
            "default": true,
            "description": "`stderr` and `stdout` are boolean values which if `true`, represent that we would like to suppress\nstandard error / standard output respectively."
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "command": {
            "_name_": "command",
            "title": "command",
            "type": "string"
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "type": "string"
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "cron_job_create",
        "title": "cron_job_create",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "stderr",
          "stdout",
          "schedule",
          "command",
          "description",
          "user"
        ]
      },
      "cronjob_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "cronjob_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "cronjob_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/cronjob_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/cronjob_get_instance_1"
          }
        }
      },
      "cronjob_run_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "cronjob_run_1": {
        "type": "boolean",
        "_name_": "skip_disabled",
        "title": "skip_disabled",
        "default": false
      },
      "cronjob_run": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/cronjob_run_0"
          },
          "skip_disabled": {
            "$ref": "#/components/schemas/cronjob_run_1"
          }
        }
      },
      "ctdb_general_ips_0": {
        "type": "object",
        "properties": {
          "all_nodes": {
            "type": "boolean",
            "_name_": "all_nodes",
            "title": "all_nodes",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "ctdb_ips",
        "title": "ctdb_ips",
        "default": {},
        "_attrs_order_": [
          "all_nodes"
        ]
      },
      "ctdb_general_status_0": {
        "type": "object",
        "properties": {
          "all_nodes": {
            "type": "boolean",
            "_name_": "all_nodes",
            "title": "all_nodes",
            "default": true,
            "description": "`all_nodes`: Boolean if True, return status\n    for all nodes in the cluster else return\n    status of this node."
          }
        },
        "additionalProperties": false,
        "_name_": "ctdb_status",
        "title": "ctdb_status",
        "default": {},
        "_attrs_order_": [
          "all_nodes"
        ]
      },
      "ctdb_private_ips_create_0": {
        "type": "object",
        "properties": {
          "ip": {
            "_name_": "ip",
            "title": "ip",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "private_create",
        "title": "private_create",
        "default": {},
        "_attrs_order_": [
          "ip"
        ]
      },
      "ctdb_private_ips_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "ctdb_private_ips_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "ctdb_private_ips_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ctdb_private_ips_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/ctdb_private_ips_get_instance_1"
          }
        }
      },
      "ctdb_public_ips_create_0": {
        "type": "object",
        "properties": {
          "pnn": {
            "type": "integer",
            "_name_": "pnn",
            "title": "pnn",
            "description": "`pnn` node number of record to adjust"
          },
          "ip": {
            "_name_": "ip",
            "title": "ip",
            "type": "string",
            "description": "`ip` string representing an IP v4/v6 address"
          },
          "netmask": {
            "type": "integer",
            "_name_": "netmask",
            "title": "netmask",
            "description": "`netmask` integer representing a cidr notated netmask (i.e. 16/24/48/64 etc)"
          },
          "interface": {
            "_name_": "interface",
            "title": "interface",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "public_create",
        "title": "public_create",
        "default": {},
        "_attrs_order_": [
          "pnn",
          "ip",
          "netmask",
          "interface"
        ]
      },
      "ctdb_public_ips_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "ctdb_public_ips_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "ctdb_public_ips_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ctdb_public_ips_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/ctdb_public_ips_get_instance_1"
          }
        }
      },
      "ctdb_public_ips_interface_choices_0": {
        "_name_": "exclude_ifaces",
        "title": "exclude_ifaces",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "exclude_iface",
          "title": "exclude_iface",
          "_required_": false,
          "type": "string"
        }
      },
      "device_get_info_0": {
        "_name_": "type",
        "title": "type",
        "type": "string",
        "enum": [
          "SERIAL",
          "DISK",
          "GPU"
        ]
      },
      "disk_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "disk_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "disk_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/disk_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/disk_get_instance_1"
          }
        }
      },
      "disk_get_unused_0": {
        "type": "boolean",
        "_name_": "join_partitions",
        "title": "join_partitions",
        "default": false
      },
      "disk_resize_0": {
        "_name_": "disks",
        "title": "disks",
        "default": [],
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "_name_": "name",
              "title": "name",
              "_required_": true,
              "type": "string"
            },
            "size": {
              "type": "integer",
              "_name_": "size",
              "title": "size",
              "default": null,
              "_required_": false
            }
          },
          "additionalProperties": false,
          "_name_": "",
          "default": {},
          "_required_": false,
          "_attrs_order_": [
            "name",
            "size"
          ]
        }
      },
      "disk_resize_1": {
        "type": "boolean",
        "_name_": "sync",
        "title": "sync",
        "default": true,
        "description": "`sync`: boolean, when true (default) will synchronize the new size of the disk(s)\n    with the database cache."
      },
      "disk_resize_2": {
        "type": "boolean",
        "_name_": "raise_error",
        "title": "raise_error",
        "default": false,
        "description": "`raise_error`: boolean\n    when true, will raise a `CallError` if any failures occur\n    when false, will will log the errors if any failures occur"
      },
      "disk_resize": {
        "type": "object",
        "properties": {
          "disks": {
            "$ref": "#/components/schemas/disk_resize_0"
          },
          "sync": {
            "$ref": "#/components/schemas/disk_resize_1"
          },
          "raise_error": {
            "$ref": "#/components/schemas/disk_resize_2"
          }
        }
      },
      "disk_retaste_0": {
        "_name_": "disks",
        "title": "disks",
        "default": null,
        "type": "array",
        "items": {
          "_name_": "name",
          "title": "name",
          "_required_": true,
          "type": "string"
        }
      },
      "disk_smart_attributes_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "disk_temperature_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "disk_temperature_1": {
        "type": "object",
        "properties": {
          "cache": {
            "type": "integer",
            "_name_": "cache",
            "title": "cache",
            "default": null,
            "nullable": true
          },
          "powermode": {
            "_name_": "powermode",
            "title": "powermode",
            "default": "NEVER",
            "type": "string",
            "enum": [
              "NEVER",
              "SLEEP",
              "STANDBY",
              "IDLE"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "cache",
          "powermode"
        ]
      },
      "disk_temperature": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/disk_temperature_0"
          },
          "options": {
            "$ref": "#/components/schemas/disk_temperature_1"
          }
        }
      },
      "disk_temperature_agg_0": {
        "_name_": "names",
        "title": "names",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "name",
          "title": "name",
          "_required_": false,
          "type": "string"
        }
      },
      "disk_temperature_agg_1": {
        "type": "integer",
        "_name_": "days",
        "title": "days"
      },
      "disk_temperature_agg": {
        "type": "object",
        "properties": {
          "names": {
            "$ref": "#/components/schemas/disk_temperature_agg_0"
          },
          "days": {
            "$ref": "#/components/schemas/disk_temperature_agg_1"
          }
        }
      },
      "disk_temperature_alerts_0": {
        "_name_": "names",
        "title": "names",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "name",
          "title": "name",
          "_required_": false,
          "type": "string"
        }
      },
      "disk_temperatures_0": {
        "_name_": "names",
        "title": "names",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "name",
          "title": "name",
          "_required_": false,
          "type": "string"
        }
      },
      "disk_temperatures_1": {
        "type": "object",
        "properties": {
          "cache": {
            "type": "integer",
            "_name_": "cache",
            "title": "cache",
            "default": 290,
            "nullable": true
          },
          "only_cached": {
            "type": "boolean",
            "_name_": "only_cached",
            "title": "only_cached",
            "default": false
          },
          "powermode": {
            "_name_": "powermode",
            "title": "powermode",
            "default": "NEVER",
            "type": "string",
            "enum": [
              "NEVER",
              "SLEEP",
              "STANDBY",
              "IDLE"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "cache",
          "only_cached",
          "powermode"
        ]
      },
      "disk_temperatures": {
        "type": "object",
        "properties": {
          "names": {
            "$ref": "#/components/schemas/disk_temperatures_0"
          },
          "options": {
            "$ref": "#/components/schemas/disk_temperatures_1"
          }
        }
      },
      "disk_wipe_0": {
        "_name_": "dev",
        "title": "dev",
        "type": "string"
      },
      "disk_wipe_1": {
        "_name_": "mode",
        "title": "mode",
        "type": "string",
        "enum": [
          "QUICK",
          "FULL",
          "FULL_RANDOM"
        ]
      },
      "disk_wipe_2": {
        "type": "boolean",
        "_name_": "synccache",
        "title": "synccache",
        "default": true
      },
      "disk_wipe_3": {
        "type": "object",
        "properties": {
          "configure_swap": {
            "type": "boolean",
            "_name_": "configure_swap",
            "title": "configure_swap",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "swap_removal_options",
        "title": "swap_removal_options",
        "default": {},
        "_attrs_order_": [
          "configure_swap"
        ]
      },
      "disk_wipe": {
        "type": "object",
        "properties": {
          "dev": {
            "$ref": "#/components/schemas/disk_wipe_0"
          },
          "mode": {
            "$ref": "#/components/schemas/disk_wipe_1"
          },
          "synccache": {
            "$ref": "#/components/schemas/disk_wipe_2"
          },
          "swap_removal_options": {
            "$ref": "#/components/schemas/disk_wipe_3"
          }
        }
      },
      "dyndns_update_0": {
        "type": "object",
        "properties": {
          "provider": {
            "_name_": "provider",
            "title": "provider",
            "type": "string"
          },
          "checkip_ssl": {
            "type": "boolean",
            "_name_": "checkip_ssl",
            "title": "checkip_ssl"
          },
          "checkip_server": {
            "_name_": "checkip_server",
            "title": "checkip_server",
            "type": "string"
          },
          "checkip_path": {
            "_name_": "checkip_path",
            "title": "checkip_path",
            "type": "string"
          },
          "ssl": {
            "type": "boolean",
            "_name_": "ssl",
            "title": "ssl"
          },
          "custom_ddns_server": {
            "_name_": "custom_ddns_server",
            "title": "custom_ddns_server",
            "type": "string"
          },
          "custom_ddns_path": {
            "_name_": "custom_ddns_path",
            "title": "custom_ddns_path",
            "type": "string"
          },
          "domain": {
            "_name_": "domain",
            "title": "domain",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "domain",
              "title": "domain",
              "_required_": false,
              "type": "string"
            }
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          },
          "period": {
            "type": "integer",
            "_name_": "period",
            "title": "period",
            "description": "`period` indicates how often the IP is checked in seconds."
          }
        },
        "additionalProperties": false,
        "_name_": "dyndns_update",
        "title": "dyndns_entry",
        "default": {},
        "_attrs_order_": [
          "provider",
          "checkip_ssl",
          "checkip_server",
          "checkip_path",
          "ssl",
          "custom_ddns_server",
          "custom_ddns_path",
          "domain",
          "username",
          "password",
          "period"
        ]
      },
      "enclosure_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "enclosure_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "enclosure_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/enclosure_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/enclosure_get_instance_1"
          }
        }
      },
      "enclosure_set_slot_status_0": {
        "_name_": "enclosure_id",
        "title": "enclosure_id",
        "type": "string"
      },
      "enclosure_set_slot_status_1": {
        "type": "integer",
        "_name_": "slot",
        "title": "slot"
      },
      "enclosure_set_slot_status_2": {
        "_name_": "status",
        "title": "status",
        "type": "string",
        "enum": [
          "CLEAR",
          "FAULT",
          "IDENTIFY"
        ]
      },
      "enclosure_set_slot_status": {
        "type": "object",
        "properties": {
          "enclosure_id": {
            "$ref": "#/components/schemas/enclosure_set_slot_status_0"
          },
          "slot": {
            "$ref": "#/components/schemas/enclosure_set_slot_status_1"
          },
          "status": {
            "$ref": "#/components/schemas/enclosure_set_slot_status_2"
          }
        }
      },
      "failover_update_0": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean",
            "_name_": "disabled",
            "title": "disabled",
            "description": "`disabled` When true indicates that HA will be disabled."
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "description": "`timeout` is the time to WAIT until a failover occurs when a network\n    event occurs on an interface that is marked critical for failover AND\n    HA is enabled and working appropriately."
          },
          "master": {
            "type": "boolean",
            "_name_": "master",
            "title": "master",
            "description": "`master`  Marks the particular node in the chassis as the master node.\n            The standby node will have the opposite value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "failover_update",
        "title": "failover_entry",
        "default": {},
        "_attrs_order_": [
          "disabled",
          "timeout",
          "master"
        ]
      },
      "failover_call_remote_0": {
        "_name_": "method",
        "title": "method",
        "type": "string",
        "description": "`method` name of the method to be called\n`args` list of arguments to be passed to `method`"
      },
      "failover_call_remote_1": {
        "_name_": "args",
        "title": "args",
        "default": [],
        "type": "array",
        "items": {},
        "description": "`method` name of the method to be called\n`args` list of arguments to be passed to `method`"
      },
      "failover_call_remote_2": {
        "type": "object",
        "properties": {
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 60
          },
          "job": {
            "type": "boolean",
            "_name_": "job",
            "title": "job",
            "default": false
          },
          "job_return": {
            "type": "boolean",
            "_name_": "job_return",
            "title": "job_return",
            "default": null,
            "nullable": true
          },
          "callback": {
            "nullable": true,
            "_name_": "callback",
            "title": "callback",
            "default": null
          },
          "connect_timeout": {
            "type": "float",
            "_name_": "connect_timeout",
            "title": "connect_timeout",
            "default": 2.0
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "timeout",
          "job",
          "job_return",
          "callback",
          "connect_timeout"
        ]
      },
      "failover_call_remote": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/failover_call_remote_0"
          },
          "args": {
            "$ref": "#/components/schemas/failover_call_remote_1"
          },
          "options": {
            "$ref": "#/components/schemas/failover_call_remote_2"
          }
        }
      },
      "failover_control_0": {
        "_name_": "action",
        "title": "action",
        "type": "string",
        "enum": [
          "ENABLE",
          "DISABLE"
        ]
      },
      "failover_control_1": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "_name_": "active",
            "title": "active"
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "active"
        ]
      },
      "failover_control": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/failover_control_0"
          },
          "options": {
            "$ref": "#/components/schemas/failover_control_1"
          }
        }
      },
      "failover_sync_to_peer_0": {
        "type": "object",
        "properties": {
          "reboot": {
            "type": "boolean",
            "_name_": "reboot",
            "title": "reboot",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "reboot"
        ]
      },
      "failover_unlock_0": {
        "type": "object",
        "properties": {
          "pools": {
            "_name_": "pools",
            "title": "pools",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "_name_": "name",
                  "title": "name",
                  "_required_": true,
                  "type": "string"
                },
                "passphrase": {
                  "_name_": "passphrase",
                  "title": "passphrase",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "pool_keys",
              "title": "pool_keys",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "name",
                "passphrase"
              ]
            }
          },
          "datasets": {
            "_name_": "datasets",
            "title": "datasets",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "_name_": "name",
                  "title": "name",
                  "_required_": true,
                  "type": "string"
                },
                "passphrase": {
                  "_name_": "passphrase",
                  "title": "passphrase",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "dataset_keys",
              "title": "dataset_keys",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "name",
                "passphrase"
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "pools",
          "datasets"
        ]
      },
      "failover_upgrade_0": {
        "type": "object",
        "properties": {
          "train": {
            "_name_": "train",
            "title": "train",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "failover_upgrade",
        "title": "failover_upgrade",
        "default": {},
        "_attrs_order_": [
          "train"
        ]
      },
      "filesystem_acl_is_trivial_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_can_access_as_user_0": {
        "_name_": "username",
        "title": "username",
        "type": "string"
      },
      "filesystem_can_access_as_user_1": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_can_access_as_user_2": {
        "type": "object",
        "properties": {
          "read": {
            "type": "boolean",
            "_name_": "read",
            "title": "read",
            "default": null,
            "nullable": true
          },
          "write": {
            "type": "boolean",
            "_name_": "write",
            "title": "write",
            "default": null,
            "nullable": true
          },
          "execute": {
            "type": "boolean",
            "_name_": "execute",
            "title": "execute",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "permissions",
        "title": "permissions",
        "default": {},
        "_attrs_order_": [
          "read",
          "write",
          "execute"
        ]
      },
      "filesystem_can_access_as_user": {
        "type": "object",
        "properties": {
          "username": {
            "$ref": "#/components/schemas/filesystem_can_access_as_user_0"
          },
          "path": {
            "$ref": "#/components/schemas/filesystem_can_access_as_user_1"
          },
          "permissions": {
            "$ref": "#/components/schemas/filesystem_can_access_as_user_2"
          }
        }
      },
      "filesystem_chown_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "Change owner or group of file at `path`."
          },
          "uid": {
            "type": "integer",
            "_name_": "uid",
            "title": "uid",
            "default": null,
            "description": "`uid` and `gid` specify new owner of the file. If either\nkey is absent or None, then existing value on the file is not\nchanged.",
            "nullable": true
          },
          "gid": {
            "type": "integer",
            "_name_": "gid",
            "title": "gid",
            "default": null,
            "description": "`uid` and `gid` specify new owner of the file. If either\nkey is absent or None, then existing value on the file is not\nchanged.",
            "nullable": true
          },
          "options": {
            "type": "object",
            "properties": {
              "recursive": {
                "type": "boolean",
                "_name_": "recursive",
                "title": "recursive",
                "default": false
              },
              "traverse": {
                "type": "boolean",
                "_name_": "traverse",
                "title": "traverse",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "options",
            "title": "options",
            "default": {},
            "_attrs_order_": [
              "recursive",
              "traverse"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "filesystem_ownership",
        "title": "filesystem_ownership",
        "default": {},
        "_attrs_order_": [
          "path",
          "uid",
          "gid",
          "options"
        ]
      },
      "filesystem_default_acl_choices_0": {
        "_name_": "path",
        "title": "path",
        "default": "",
        "type": "string"
      },
      "filesystem_get_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_get_default_acl_0": {
        "_name_": "acl_type",
        "title": "acl_type",
        "default": "POSIX_OPEN",
        "type": "string"
      },
      "filesystem_get_default_acl_1": {
        "_name_": "share_type",
        "title": "share_type",
        "default": "NONE",
        "type": "string",
        "enum": [
          "NONE",
          "SMB",
          "NFS"
        ]
      },
      "filesystem_get_default_acl": {
        "type": "object",
        "properties": {
          "acl_type": {
            "$ref": "#/components/schemas/filesystem_get_default_acl_0"
          },
          "share_type": {
            "$ref": "#/components/schemas/filesystem_get_default_acl_1"
          }
        }
      },
      "filesystem_get_dosmode_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_getacl_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_getacl_1": {
        "type": "boolean",
        "_name_": "simplified",
        "title": "simplified",
        "default": true,
        "description": "`simplified` - effect of this depends on ACL type on underlying filesystem. In the case of\nNFSv4 ACLs simplified permissions and flags are returned for ACL entries where applicable.\nNFSv4 errata below. In the case of POSIX1E ACls, this setting has no impact on returned ACL.\n`simplified` returns a shortened form of the ACL permset and flags where applicable. If permissions\nhave been simplified, then the `perms` object will contain only a single `BASIC` key with a string\ndescribing the underlying permissions set."
      },
      "filesystem_getacl_2": {
        "type": "boolean",
        "_name_": "resolve_ids",
        "title": "resolve_ids",
        "default": false,
        "description": "`resolve_ids` - adds additional `who` key to each ACL entry, that converts the numeric id to\na user name or group name. In the case of owner@ and group@ (NFSv4) or USER_OBJ and GROUP_OBJ\n(POSIX1E), st_uid or st_gid will be converted from stat() return for file. In the case of\nMASK (POSIX1E), OTHER (POSIX1E), everyone@ (NFSv4), key `who` will be included, but set to null.\nIn case of failure to resolve the id to a name, `who` will be set to null. This option should\nonly be used if resolving ids to names is required."
      },
      "filesystem_getacl": {
        "type": "object",
        "properties": {
          "path": {
            "$ref": "#/components/schemas/filesystem_getacl_0"
          },
          "simplified": {
            "$ref": "#/components/schemas/filesystem_getacl_1"
          },
          "resolve_ids": {
            "$ref": "#/components/schemas/filesystem_getacl_2"
          }
        }
      },
      "filesystem_is_immutable_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_listdir_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_listdir_1": {
        "_name_": "query-filters",
        "title": "query-filters",
        "default": [],
        "type": "array",
        "items": {}
      },
      "filesystem_listdir_2": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "query-options",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "filesystem_listdir": {
        "type": "object",
        "properties": {
          "path": {
            "$ref": "#/components/schemas/filesystem_listdir_0"
          },
          "query-filters": {
            "$ref": "#/components/schemas/filesystem_listdir_1"
          },
          "query-options": {
            "$ref": "#/components/schemas/filesystem_listdir_2"
          }
        }
      },
      "filesystem_mkdir_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_put_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_put_1": {
        "type": "object",
        "properties": {
          "append": {
            "type": "boolean",
            "_name_": "append",
            "title": "append",
            "default": false
          },
          "mode": {
            "type": "integer",
            "_name_": "mode",
            "title": "mode"
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "append",
          "mode"
        ]
      },
      "filesystem_put": {
        "type": "object",
        "properties": {
          "path": {
            "$ref": "#/components/schemas/filesystem_put_0"
          },
          "options": {
            "$ref": "#/components/schemas/filesystem_put_1"
          }
        }
      },
      "filesystem_set_dosmode_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string"
          },
          "dosmode": {
            "type": "object",
            "properties": {
              "readonly": {
                "type": "boolean",
                "_name_": "readonly",
                "title": "readonly"
              },
              "hidden": {
                "type": "boolean",
                "_name_": "hidden",
                "title": "hidden"
              },
              "system": {
                "type": "boolean",
                "_name_": "system",
                "title": "system"
              },
              "archive": {
                "type": "boolean",
                "_name_": "archive",
                "title": "archive"
              },
              "reparse": {
                "type": "boolean",
                "_name_": "reparse",
                "title": "reparse"
              },
              "offline": {
                "type": "boolean",
                "_name_": "offline",
                "title": "offline"
              },
              "sparse": {
                "type": "boolean",
                "_name_": "sparse",
                "title": "sparse"
              }
            },
            "additionalProperties": false,
            "_name_": "dosmode",
            "title": "dosmode",
            "default": {},
            "_attrs_order_": [
              "readonly",
              "hidden",
              "system",
              "archive",
              "reparse",
              "offline",
              "sparse"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "set_dosmode",
        "title": "set_dosmode",
        "default": {},
        "_attrs_order_": [
          "path",
          "dosmode"
        ]
      },
      "filesystem_set_immutable_0": {
        "type": "boolean",
        "_name_": "set_flag",
        "title": "set_flag"
      },
      "filesystem_set_immutable_1": {
        "_name_": "path",
        "title": "path",
        "type": "string",
        "description": "Set/Unset immutable flag at `path`."
      },
      "filesystem_set_immutable": {
        "type": "object",
        "properties": {
          "set_flag": {
            "$ref": "#/components/schemas/filesystem_set_immutable_0"
          },
          "path": {
            "$ref": "#/components/schemas/filesystem_set_immutable_1"
          }
        }
      },
      "filesystem_setacl_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "`path` full path to directory or file."
          },
          "uid": {
            "type": "integer",
            "_name_": "uid",
            "title": "uid",
            "default": null,
            "description": "`uid` the desired UID of the file user. If set to None (the default), then user is not changed.",
            "nullable": true
          },
          "gid": {
            "type": "integer",
            "_name_": "gid",
            "title": "gid",
            "default": null,
            "description": "`gid` the desired GID of the file group. If set to None (the default), then group is not changed.",
            "nullable": true
          },
          "dacl": {
            "anyOf": [
              {
                "_name_": "nfs4_acl",
                "title": "nfs4_acl",
                "default": [],
                "_required_": false,
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "_name_": "tag",
                        "title": "tag",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "owner@",
                          "group@",
                          "everyone@",
                          "USER",
                          "GROUP"
                        ]
                      },
                      "id": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "_name_": "id",
                        "title": "id",
                        "_required_": false
                      },
                      "type": {
                        "_name_": "type",
                        "title": "type",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "ALLOW",
                          "DENY"
                        ]
                      },
                      "perms": {
                        "type": "object",
                        "properties": {
                          "READ_DATA": {
                            "type": "boolean",
                            "_name_": "READ_DATA",
                            "title": "READ_DATA",
                            "_required_": false
                          },
                          "WRITE_DATA": {
                            "type": "boolean",
                            "_name_": "WRITE_DATA",
                            "title": "WRITE_DATA",
                            "_required_": false
                          },
                          "APPEND_DATA": {
                            "type": "boolean",
                            "_name_": "APPEND_DATA",
                            "title": "APPEND_DATA",
                            "_required_": false
                          },
                          "READ_NAMED_ATTRS": {
                            "type": "boolean",
                            "_name_": "READ_NAMED_ATTRS",
                            "title": "READ_NAMED_ATTRS",
                            "_required_": false
                          },
                          "WRITE_NAMED_ATTRS": {
                            "type": "boolean",
                            "_name_": "WRITE_NAMED_ATTRS",
                            "title": "WRITE_NAMED_ATTRS",
                            "_required_": false
                          },
                          "EXECUTE": {
                            "type": "boolean",
                            "_name_": "EXECUTE",
                            "title": "EXECUTE",
                            "_required_": false
                          },
                          "DELETE_CHILD": {
                            "type": "boolean",
                            "_name_": "DELETE_CHILD",
                            "title": "DELETE_CHILD",
                            "_required_": false
                          },
                          "READ_ATTRIBUTES": {
                            "type": "boolean",
                            "_name_": "READ_ATTRIBUTES",
                            "title": "READ_ATTRIBUTES",
                            "_required_": false
                          },
                          "WRITE_ATTRIBUTES": {
                            "type": "boolean",
                            "_name_": "WRITE_ATTRIBUTES",
                            "title": "WRITE_ATTRIBUTES",
                            "_required_": false
                          },
                          "DELETE": {
                            "type": "boolean",
                            "_name_": "DELETE",
                            "title": "DELETE",
                            "_required_": false
                          },
                          "READ_ACL": {
                            "type": "boolean",
                            "_name_": "READ_ACL",
                            "title": "READ_ACL",
                            "_required_": false
                          },
                          "WRITE_ACL": {
                            "type": "boolean",
                            "_name_": "WRITE_ACL",
                            "title": "WRITE_ACL",
                            "_required_": false
                          },
                          "WRITE_OWNER": {
                            "type": "boolean",
                            "_name_": "WRITE_OWNER",
                            "title": "WRITE_OWNER",
                            "_required_": false
                          },
                          "SYNCHRONIZE": {
                            "type": "boolean",
                            "_name_": "SYNCHRONIZE",
                            "title": "SYNCHRONIZE",
                            "_required_": false
                          },
                          "BASIC": {
                            "_name_": "BASIC",
                            "title": "BASIC",
                            "_required_": false,
                            "type": "string",
                            "enum": [
                              "FULL_CONTROL",
                              "MODIFY",
                              "READ",
                              "TRAVERSE"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "perms",
                        "title": "perms",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "READ_DATA",
                          "WRITE_DATA",
                          "APPEND_DATA",
                          "READ_NAMED_ATTRS",
                          "WRITE_NAMED_ATTRS",
                          "EXECUTE",
                          "DELETE_CHILD",
                          "READ_ATTRIBUTES",
                          "WRITE_ATTRIBUTES",
                          "DELETE",
                          "READ_ACL",
                          "WRITE_ACL",
                          "WRITE_OWNER",
                          "SYNCHRONIZE",
                          "BASIC"
                        ]
                      },
                      "flags": {
                        "type": "object",
                        "properties": {
                          "FILE_INHERIT": {
                            "type": "boolean",
                            "_name_": "FILE_INHERIT",
                            "title": "FILE_INHERIT",
                            "_required_": false
                          },
                          "DIRECTORY_INHERIT": {
                            "type": "boolean",
                            "_name_": "DIRECTORY_INHERIT",
                            "title": "DIRECTORY_INHERIT",
                            "_required_": false
                          },
                          "NO_PROPAGATE_INHERIT": {
                            "type": "boolean",
                            "_name_": "NO_PROPAGATE_INHERIT",
                            "title": "NO_PROPAGATE_INHERIT",
                            "_required_": false
                          },
                          "INHERIT_ONLY": {
                            "type": "boolean",
                            "_name_": "INHERIT_ONLY",
                            "title": "INHERIT_ONLY",
                            "_required_": false
                          },
                          "INHERITED": {
                            "type": "boolean",
                            "_name_": "INHERITED",
                            "title": "INHERITED",
                            "_required_": false
                          },
                          "BASIC": {
                            "_name_": "BASIC",
                            "title": "BASIC",
                            "_required_": false,
                            "type": "string",
                            "enum": [
                              "INHERIT",
                              "NOINHERIT"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "flags",
                        "title": "flags",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "FILE_INHERIT",
                          "DIRECTORY_INHERIT",
                          "NO_PROPAGATE_INHERIT",
                          "INHERIT_ONLY",
                          "INHERITED",
                          "BASIC"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "_name_": "nfs4_ace",
                    "title": "nfs4_ace",
                    "default": {},
                    "_required_": false,
                    "_attrs_order_": [
                      "tag",
                      "id",
                      "type",
                      "perms",
                      "flags"
                    ]
                  }
                ]
              },
              {
                "_name_": "posix1e_acl",
                "title": "posix1e_acl",
                "default": [],
                "_required_": false,
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "properties": {
                      "default": {
                        "type": "boolean",
                        "_name_": "default",
                        "title": "default",
                        "default": false,
                        "_required_": false
                      },
                      "tag": {
                        "_name_": "tag",
                        "title": "tag",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "USER_OBJ",
                          "GROUP_OBJ",
                          "USER",
                          "GROUP",
                          "OTHER",
                          "MASK"
                        ]
                      },
                      "id": {
                        "type": "integer",
                        "_name_": "id",
                        "title": "id",
                        "default": -1,
                        "_required_": false
                      },
                      "perms": {
                        "type": "object",
                        "properties": {
                          "READ": {
                            "type": "boolean",
                            "_name_": "READ",
                            "title": "READ",
                            "default": false,
                            "_required_": false
                          },
                          "WRITE": {
                            "type": "boolean",
                            "_name_": "WRITE",
                            "title": "WRITE",
                            "default": false,
                            "_required_": false
                          },
                          "EXECUTE": {
                            "type": "boolean",
                            "_name_": "EXECUTE",
                            "title": "EXECUTE",
                            "default": false,
                            "_required_": false
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "perms",
                        "title": "perms",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "READ",
                          "WRITE",
                          "EXECUTE"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "_name_": "posix1e_ace",
                    "title": "posix1e_ace",
                    "default": {},
                    "_required_": false,
                    "_attrs_order_": [
                      "default",
                      "tag",
                      "id",
                      "perms"
                    ]
                  }
                ]
              }
            ],
            "nullable": false,
            "_name_": "dacl",
            "description": "`dacl` ACL entries. Formatting depends on the underlying `acltype`. NFS4ACL requires\nNFSv4 entries. POSIX1e requires POSIX1e entries."
          },
          "nfs41_flags": {
            "type": "object",
            "properties": {
              "autoinherit": {
                "type": "boolean",
                "_name_": "autoinherit",
                "title": "autoinherit",
                "default": false
              },
              "protected": {
                "type": "boolean",
                "_name_": "protected",
                "title": "protected",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "nfs41_flags",
            "title": "nfs41_flags",
            "default": {},
            "_attrs_order_": [
              "autoinherit",
              "protected"
            ]
          },
          "acltype": {
            "_name_": "acltype",
            "title": "acltype",
            "type": "string",
            "enum": [
              "NFS4",
              "POSIX1E",
              "DISABLED"
            ],
            "description": "`dacl` ACL entries. Formatting depends on the underlying `acltype`. NFS4ACL requires\nNFSv4 entries. POSIX1e requires POSIX1e entries.",
            "nullable": true
          },
          "options": {
            "type": "object",
            "properties": {
              "stripacl": {
                "type": "boolean",
                "_name_": "stripacl",
                "title": "stripacl",
                "default": false
              },
              "recursive": {
                "type": "boolean",
                "_name_": "recursive",
                "title": "recursive",
                "default": false
              },
              "traverse": {
                "type": "boolean",
                "_name_": "traverse",
                "title": "traverse",
                "default": false
              },
              "canonicalize": {
                "type": "boolean",
                "_name_": "canonicalize",
                "title": "canonicalize",
                "default": true
              }
            },
            "additionalProperties": false,
            "_name_": "options",
            "title": "options",
            "default": {},
            "_attrs_order_": [
              "stripacl",
              "recursive",
              "traverse",
              "canonicalize"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "filesystem_acl",
        "title": "filesystem_acl",
        "default": {},
        "_attrs_order_": [
          "path",
          "uid",
          "gid",
          "dacl",
          "nfs41_flags",
          "acltype",
          "options"
        ]
      },
      "filesystem_setperm_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "Set unix permissions on given `path`.\n`stripacl` setperm will fail if an extended ACL is present on `path`,\nunless `stripacl` is set to True."
          },
          "mode": {
            "_name_": "mode",
            "title": "mode",
            "type": "string",
            "description": "If `mode` is specified then the mode will be applied to the\npath and files and subdirectories depending on which `options` are\nselected. Mode should be formatted as string representation of octal\npermissions bits.",
            "nullable": true
          },
          "uid": {
            "type": "integer",
            "_name_": "uid",
            "title": "uid",
            "default": null,
            "description": "`uid` the desired UID of the file user. If set to None (the default), then user is not changed.",
            "nullable": true
          },
          "gid": {
            "type": "integer",
            "_name_": "gid",
            "title": "gid",
            "default": null,
            "description": "`gid` the desired GID of the file group. If set to None (the default), then group is not changed.",
            "nullable": true
          },
          "options": {
            "type": "object",
            "properties": {
              "stripacl": {
                "type": "boolean",
                "_name_": "stripacl",
                "title": "stripacl",
                "default": false
              },
              "recursive": {
                "type": "boolean",
                "_name_": "recursive",
                "title": "recursive",
                "default": false
              },
              "traverse": {
                "type": "boolean",
                "_name_": "traverse",
                "title": "traverse",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "options",
            "title": "options",
            "default": {},
            "_attrs_order_": [
              "stripacl",
              "recursive",
              "traverse"
            ],
            "description": "If `mode` is specified then the mode will be applied to the\npath and files and subdirectories depending on which `options` are\nselected. Mode should be formatted as string representation of octal\npermissions bits."
          }
        },
        "additionalProperties": false,
        "_name_": "filesystem_permission",
        "title": "filesystem_permission",
        "default": {},
        "_attrs_order_": [
          "path",
          "mode",
          "uid",
          "gid",
          "options"
        ]
      },
      "filesystem_stat_0": {
        "_name_": "path",
        "title": "path",
        "type": "string",
        "description": "Return the filesystem stat(2) for a given `path`."
      },
      "filesystem_statfs_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "filesystem_acltemplate_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "acltype": {
            "_name_": "acltype",
            "title": "acltype",
            "type": "string",
            "enum": [
              "NFS4",
              "POSIX1E"
            ]
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          },
          "acl": {
            "anyOf": [
              {
                "_name_": "nfs4_acl",
                "title": "nfs4_acl",
                "default": [],
                "_required_": false,
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "_name_": "tag",
                        "title": "tag",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "owner@",
                          "group@",
                          "everyone@",
                          "USER",
                          "GROUP"
                        ]
                      },
                      "id": {
                        "type": [
                          "integer",
                          "null"
                        ],
                        "_name_": "id",
                        "title": "id",
                        "_required_": false
                      },
                      "type": {
                        "_name_": "type",
                        "title": "type",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "ALLOW",
                          "DENY"
                        ]
                      },
                      "perms": {
                        "type": "object",
                        "properties": {
                          "READ_DATA": {
                            "type": "boolean",
                            "_name_": "READ_DATA",
                            "title": "READ_DATA",
                            "_required_": false
                          },
                          "WRITE_DATA": {
                            "type": "boolean",
                            "_name_": "WRITE_DATA",
                            "title": "WRITE_DATA",
                            "_required_": false
                          },
                          "APPEND_DATA": {
                            "type": "boolean",
                            "_name_": "APPEND_DATA",
                            "title": "APPEND_DATA",
                            "_required_": false
                          },
                          "READ_NAMED_ATTRS": {
                            "type": "boolean",
                            "_name_": "READ_NAMED_ATTRS",
                            "title": "READ_NAMED_ATTRS",
                            "_required_": false
                          },
                          "WRITE_NAMED_ATTRS": {
                            "type": "boolean",
                            "_name_": "WRITE_NAMED_ATTRS",
                            "title": "WRITE_NAMED_ATTRS",
                            "_required_": false
                          },
                          "EXECUTE": {
                            "type": "boolean",
                            "_name_": "EXECUTE",
                            "title": "EXECUTE",
                            "_required_": false
                          },
                          "DELETE_CHILD": {
                            "type": "boolean",
                            "_name_": "DELETE_CHILD",
                            "title": "DELETE_CHILD",
                            "_required_": false
                          },
                          "READ_ATTRIBUTES": {
                            "type": "boolean",
                            "_name_": "READ_ATTRIBUTES",
                            "title": "READ_ATTRIBUTES",
                            "_required_": false
                          },
                          "WRITE_ATTRIBUTES": {
                            "type": "boolean",
                            "_name_": "WRITE_ATTRIBUTES",
                            "title": "WRITE_ATTRIBUTES",
                            "_required_": false
                          },
                          "DELETE": {
                            "type": "boolean",
                            "_name_": "DELETE",
                            "title": "DELETE",
                            "_required_": false
                          },
                          "READ_ACL": {
                            "type": "boolean",
                            "_name_": "READ_ACL",
                            "title": "READ_ACL",
                            "_required_": false
                          },
                          "WRITE_ACL": {
                            "type": "boolean",
                            "_name_": "WRITE_ACL",
                            "title": "WRITE_ACL",
                            "_required_": false
                          },
                          "WRITE_OWNER": {
                            "type": "boolean",
                            "_name_": "WRITE_OWNER",
                            "title": "WRITE_OWNER",
                            "_required_": false
                          },
                          "SYNCHRONIZE": {
                            "type": "boolean",
                            "_name_": "SYNCHRONIZE",
                            "title": "SYNCHRONIZE",
                            "_required_": false
                          },
                          "BASIC": {
                            "_name_": "BASIC",
                            "title": "BASIC",
                            "_required_": false,
                            "type": "string",
                            "enum": [
                              "FULL_CONTROL",
                              "MODIFY",
                              "READ",
                              "TRAVERSE"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "perms",
                        "title": "perms",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "READ_DATA",
                          "WRITE_DATA",
                          "APPEND_DATA",
                          "READ_NAMED_ATTRS",
                          "WRITE_NAMED_ATTRS",
                          "EXECUTE",
                          "DELETE_CHILD",
                          "READ_ATTRIBUTES",
                          "WRITE_ATTRIBUTES",
                          "DELETE",
                          "READ_ACL",
                          "WRITE_ACL",
                          "WRITE_OWNER",
                          "SYNCHRONIZE",
                          "BASIC"
                        ]
                      },
                      "flags": {
                        "type": "object",
                        "properties": {
                          "FILE_INHERIT": {
                            "type": "boolean",
                            "_name_": "FILE_INHERIT",
                            "title": "FILE_INHERIT",
                            "_required_": false
                          },
                          "DIRECTORY_INHERIT": {
                            "type": "boolean",
                            "_name_": "DIRECTORY_INHERIT",
                            "title": "DIRECTORY_INHERIT",
                            "_required_": false
                          },
                          "NO_PROPAGATE_INHERIT": {
                            "type": "boolean",
                            "_name_": "NO_PROPAGATE_INHERIT",
                            "title": "NO_PROPAGATE_INHERIT",
                            "_required_": false
                          },
                          "INHERIT_ONLY": {
                            "type": "boolean",
                            "_name_": "INHERIT_ONLY",
                            "title": "INHERIT_ONLY",
                            "_required_": false
                          },
                          "INHERITED": {
                            "type": "boolean",
                            "_name_": "INHERITED",
                            "title": "INHERITED",
                            "_required_": false
                          },
                          "BASIC": {
                            "_name_": "BASIC",
                            "title": "BASIC",
                            "_required_": false,
                            "type": "string",
                            "enum": [
                              "INHERIT",
                              "NOINHERIT"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "flags",
                        "title": "flags",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "FILE_INHERIT",
                          "DIRECTORY_INHERIT",
                          "NO_PROPAGATE_INHERIT",
                          "INHERIT_ONLY",
                          "INHERITED",
                          "BASIC"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "_name_": "nfs4_ace",
                    "title": "nfs4_ace",
                    "default": {},
                    "_required_": false,
                    "_attrs_order_": [
                      "tag",
                      "id",
                      "type",
                      "perms",
                      "flags"
                    ]
                  }
                ]
              },
              {
                "_name_": "posix1e_acl",
                "title": "posix1e_acl",
                "default": [],
                "_required_": false,
                "type": "array",
                "items": [
                  {
                    "type": "object",
                    "properties": {
                      "default": {
                        "type": "boolean",
                        "_name_": "default",
                        "title": "default",
                        "default": false,
                        "_required_": false
                      },
                      "tag": {
                        "_name_": "tag",
                        "title": "tag",
                        "_required_": false,
                        "type": "string",
                        "enum": [
                          "USER_OBJ",
                          "GROUP_OBJ",
                          "USER",
                          "GROUP",
                          "OTHER",
                          "MASK"
                        ]
                      },
                      "id": {
                        "type": "integer",
                        "_name_": "id",
                        "title": "id",
                        "default": -1,
                        "_required_": false
                      },
                      "perms": {
                        "type": "object",
                        "properties": {
                          "READ": {
                            "type": "boolean",
                            "_name_": "READ",
                            "title": "READ",
                            "default": false,
                            "_required_": false
                          },
                          "WRITE": {
                            "type": "boolean",
                            "_name_": "WRITE",
                            "title": "WRITE",
                            "default": false,
                            "_required_": false
                          },
                          "EXECUTE": {
                            "type": "boolean",
                            "_name_": "EXECUTE",
                            "title": "EXECUTE",
                            "default": false,
                            "_required_": false
                          }
                        },
                        "additionalProperties": false,
                        "_name_": "perms",
                        "title": "perms",
                        "default": {},
                        "_required_": false,
                        "_attrs_order_": [
                          "READ",
                          "WRITE",
                          "EXECUTE"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "_name_": "posix1e_ace",
                    "title": "posix1e_ace",
                    "default": {},
                    "_required_": false,
                    "_attrs_order_": [
                      "default",
                      "tag",
                      "id",
                      "perms"
                    ]
                  }
                ]
              }
            ],
            "nullable": false,
            "_name_": "acl",
            "description": null
          }
        },
        "additionalProperties": false,
        "_name_": "acltemplate_create",
        "title": "acltemplate_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "acltype",
          "comment",
          "acl"
        ]
      },
      "filesystem_acltemplate_by_path_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "default": "",
            "type": "string",
            "description": "Retrieve list of available ACL templates for a given `path`."
          },
          "query-filters": {
            "_name_": "query-filters",
            "title": "query-filters",
            "default": [],
            "type": "array",
            "items": {}
          },
          "query-options": {
            "type": "object",
            "properties": {
              "relationships": {
                "type": "boolean",
                "_name_": "relationships",
                "title": "relationships",
                "default": true
              },
              "extend": {
                "_name_": "extend",
                "title": "extend",
                "default": null,
                "type": "string",
                "nullable": true
              },
              "extend_context": {
                "_name_": "extend_context",
                "title": "extend_context",
                "default": null,
                "type": "string",
                "nullable": true
              },
              "prefix": {
                "_name_": "prefix",
                "title": "prefix",
                "default": null,
                "type": "string",
                "nullable": true
              },
              "extra": {
                "type": "object",
                "properties": {},
                "additionalProperties": true,
                "_name_": "extra",
                "title": "extra",
                "default": {},
                "_attrs_order_": []
              },
              "order_by": {
                "_name_": "order_by",
                "title": "order_by",
                "default": [],
                "type": "array",
                "items": {}
              },
              "select": {
                "_name_": "select",
                "title": "select",
                "default": [],
                "type": "array",
                "items": {}
              },
              "count": {
                "type": "boolean",
                "_name_": "count",
                "title": "count",
                "default": false
              },
              "get": {
                "type": "boolean",
                "_name_": "get",
                "title": "get",
                "default": false
              },
              "offset": {
                "type": "integer",
                "_name_": "offset",
                "title": "offset",
                "default": 0
              },
              "limit": {
                "type": "integer",
                "_name_": "limit",
                "title": "limit",
                "default": 0
              },
              "force_sql_filters": {
                "type": "boolean",
                "_name_": "force_sql_filters",
                "title": "force_sql_filters",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "query-options",
            "title": "query-options",
            "default": {},
            "_attrs_order_": [
              "relationships",
              "extend",
              "extend_context",
              "prefix",
              "extra",
              "order_by",
              "select",
              "count",
              "get",
              "offset",
              "limit",
              "force_sql_filters"
            ]
          },
          "format-options": {
            "type": "object",
            "properties": {
              "canonicalize": {
                "type": "boolean",
                "_name_": "canonicalize",
                "title": "canonicalize",
                "default": false
              },
              "ensure_builtins": {
                "type": "boolean",
                "_name_": "ensure_builtins",
                "title": "ensure_builtins",
                "default": false
              },
              "resolve_names": {
                "type": "boolean",
                "_name_": "resolve_names",
                "title": "resolve_names",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "format-options",
            "title": "format-options",
            "default": {},
            "_attrs_order_": [
              "canonicalize",
              "ensure_builtins",
              "resolve_names"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "acltemplate_by_path",
        "title": "acltemplate_by_path",
        "default": {},
        "_attrs_order_": [
          "path",
          "query-filters",
          "query-options",
          "format-options"
        ]
      },
      "filesystem_acltemplate_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "filesystem_acltemplate_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "filesystem_acltemplate_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/filesystem_acltemplate_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/filesystem_acltemplate_get_instance_1"
          }
        }
      },
      "ftp_update_0": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "clients": {
            "type": "integer",
            "_name_": "clients",
            "title": "clients",
            "description": "`clients` is an integer value which sets the maximum number of simultaneous clients allowed. It defaults to 32."
          },
          "ipconnections": {
            "type": "integer",
            "_name_": "ipconnections",
            "title": "ipconnections",
            "description": "`ipconnections` is an integer value which shows the maximum number of connections per IP address. It defaults\nto 0 which equals to unlimited."
          },
          "loginattempt": {
            "type": "integer",
            "_name_": "loginattempt",
            "title": "loginattempt"
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "description": "`timeout` is the maximum number of seconds that proftpd will allow clients to stay connected without receiving\nany data on either the control or data connection."
          },
          "timeout_notransfer": {
            "type": "integer",
            "_name_": "timeout_notransfer",
            "title": "timeout_notransfer",
            "description": "`timeout_notransfer` is the maximum number of seconds a client is allowed to spend connected, after\nauthentication, without issuing a command which results in creating an active or passive data connection\n(i.e. sending/receiving a file, or receiving a directory listing)."
          },
          "rootlogin": {
            "type": "boolean",
            "_name_": "rootlogin",
            "title": "rootlogin",
            "description": "`rootlogin` is a boolean value which when configured to true enables login as root. This is generally\ndiscouraged because of the security risks."
          },
          "onlyanonymous": {
            "type": "boolean",
            "_name_": "onlyanonymous",
            "title": "onlyanonymous",
            "description": "`onlyanonymous` allows anonymous FTP logins with access to the directory specified by `anonpath`."
          },
          "anonpath": {
            "_name_": "anonpath",
            "title": "anonpath",
            "type": "string",
            "description": "`onlyanonymous` allows anonymous FTP logins with access to the directory specified by `anonpath`.",
            "nullable": true
          },
          "onlylocal": {
            "type": "boolean",
            "_name_": "onlylocal",
            "title": "onlylocal"
          },
          "banner": {
            "_name_": "banner",
            "title": "banner",
            "type": "string",
            "description": "`banner` is a message displayed to local login users after they successfully authenticate. It is not displayed\nto anonymous login users."
          },
          "filemask": {
            "_name_": "filemask",
            "title": "filemask",
            "type": "string",
            "description": "`filemask` sets the default permissions for newly created files which by default are 077."
          },
          "dirmask": {
            "_name_": "dirmask",
            "title": "dirmask",
            "type": "string",
            "description": "`dirmask` sets the default permissions for newly created directories which by default are 077."
          },
          "fxp": {
            "type": "boolean",
            "_name_": "fxp",
            "title": "fxp",
            "description": "`fxp` if set to true indicates that File eXchange Protocol is enabled. Generally it is discouraged as it\nmakes the server vulnerable to FTP bounce attacks."
          },
          "resume": {
            "type": "boolean",
            "_name_": "resume",
            "title": "resume",
            "description": "`resume` if set allows FTP clients to resume interrupted transfers."
          },
          "defaultroot": {
            "type": "boolean",
            "_name_": "defaultroot",
            "title": "defaultroot",
            "description": "`defaultroot` when set ensures that for local users, home directory access is only granted if the user\nis a member of group wheel."
          },
          "ident": {
            "type": "boolean",
            "_name_": "ident",
            "title": "ident",
            "description": "`ident` is a boolean value which when set to true indicates that IDENT authentication is required. If identd\nis not running on the client, this can result in timeouts."
          },
          "reversedns": {
            "type": "boolean",
            "_name_": "reversedns",
            "title": "reversedns"
          },
          "masqaddress": {
            "_name_": "masqaddress",
            "title": "masqaddress",
            "type": "string",
            "description": "`masqaddress` is the public IP address or hostname which is set if FTP clients cannot connect through a\nNAT device."
          },
          "passiveportsmin": {
            "type": "integer",
            "_name_": "passiveportsmin",
            "title": "passiveportsmin"
          },
          "passiveportsmax": {
            "type": "integer",
            "_name_": "passiveportsmax",
            "title": "passiveportsmax"
          },
          "localuserbw": {
            "type": "integer",
            "_name_": "localuserbw",
            "title": "localuserbw",
            "description": "`localuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for local user.\nDefault of zero indicates unlimited upload bandwidth ( from the FTP server configuration )."
          },
          "localuserdlbw": {
            "type": "integer",
            "_name_": "localuserdlbw",
            "title": "localuserdlbw",
            "description": "`localuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for local user.\nDefault of zero indicates unlimited download bandwidth ( from the FTP server configuration )."
          },
          "anonuserbw": {
            "type": "integer",
            "_name_": "anonuserbw",
            "title": "anonuserbw",
            "description": "`anonuserbw` is a positive integer value which indicates maximum upload bandwidth in KB/s for anonymous user.\nDefault of zero indicates unlimited upload bandwidth ( from the FTP server configuration )."
          },
          "anonuserdlbw": {
            "type": "integer",
            "_name_": "anonuserdlbw",
            "title": "anonuserdlbw",
            "description": "`anonuserdlbw` is a positive integer value which indicates maximum download bandwidth in KB/s for anonymous\nuser. Default of zero indicates unlimited download bandwidth ( from the FTP server configuration )."
          },
          "tls": {
            "type": "boolean",
            "_name_": "tls",
            "title": "tls",
            "description": "`tls` is a boolean value which when set indicates that encrypted connections are enabled. This requires a\ncertificate to be configured first with the certificate service and the id of certificate is passed on in"
          },
          "tls_policy": {
            "_name_": "tls_policy",
            "title": "tls_policy",
            "type": "string",
            "enum": [
              "on",
              "off",
              "data",
              "!data",
              "auth",
              "ctrl",
              "ctrl+data",
              "ctrl+!data",
              "auth+data",
              "auth+!data"
            ],
            "description": "`tls_policy` defines whether the control channel, data channel, both channels, or neither channel of an FTP\nsession must occur over SSL/TLS."
          },
          "tls_opt_allow_client_renegotiations": {
            "type": "boolean",
            "_name_": "tls_opt_allow_client_renegotiations",
            "title": "tls_opt_allow_client_renegotiations"
          },
          "tls_opt_allow_dot_login": {
            "type": "boolean",
            "_name_": "tls_opt_allow_dot_login",
            "title": "tls_opt_allow_dot_login"
          },
          "tls_opt_allow_per_user": {
            "type": "boolean",
            "_name_": "tls_opt_allow_per_user",
            "title": "tls_opt_allow_per_user"
          },
          "tls_opt_common_name_required": {
            "type": "boolean",
            "_name_": "tls_opt_common_name_required",
            "title": "tls_opt_common_name_required"
          },
          "tls_opt_enable_diags": {
            "type": "boolean",
            "_name_": "tls_opt_enable_diags",
            "title": "tls_opt_enable_diags",
            "description": "`tls_opt_enable_diags` is a boolean value when set, logs verbosely. This is helpful when troubleshooting a\nconnection."
          },
          "tls_opt_export_cert_data": {
            "type": "boolean",
            "_name_": "tls_opt_export_cert_data",
            "title": "tls_opt_export_cert_data"
          },
          "tls_opt_no_cert_request": {
            "type": "boolean",
            "_name_": "tls_opt_no_cert_request",
            "title": "tls_opt_no_cert_request"
          },
          "tls_opt_no_empty_fragments": {
            "type": "boolean",
            "_name_": "tls_opt_no_empty_fragments",
            "title": "tls_opt_no_empty_fragments"
          },
          "tls_opt_no_session_reuse_required": {
            "type": "boolean",
            "_name_": "tls_opt_no_session_reuse_required",
            "title": "tls_opt_no_session_reuse_required"
          },
          "tls_opt_stdenvvars": {
            "type": "boolean",
            "_name_": "tls_opt_stdenvvars",
            "title": "tls_opt_stdenvvars"
          },
          "tls_opt_dns_name_required": {
            "type": "boolean",
            "_name_": "tls_opt_dns_name_required",
            "title": "tls_opt_dns_name_required"
          },
          "tls_opt_ip_address_required": {
            "type": "boolean",
            "_name_": "tls_opt_ip_address_required",
            "title": "tls_opt_ip_address_required"
          },
          "ssltls_certificate": {
            "type": "integer",
            "_name_": "ssltls_certificate",
            "title": "ssltls_certificate",
            "description": "`ssltls_certificate`.",
            "nullable": true
          },
          "options": {
            "_name_": "options",
            "title": "options",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "ftp_update",
        "title": "ftp_entry",
        "default": {},
        "_attrs_order_": [
          "port",
          "clients",
          "ipconnections",
          "loginattempt",
          "timeout",
          "timeout_notransfer",
          "rootlogin",
          "onlyanonymous",
          "anonpath",
          "onlylocal",
          "banner",
          "filemask",
          "dirmask",
          "fxp",
          "resume",
          "defaultroot",
          "ident",
          "reversedns",
          "masqaddress",
          "passiveportsmin",
          "passiveportsmax",
          "localuserbw",
          "localuserdlbw",
          "anonuserbw",
          "anonuserdlbw",
          "tls",
          "tls_policy",
          "tls_opt_allow_client_renegotiations",
          "tls_opt_allow_dot_login",
          "tls_opt_allow_per_user",
          "tls_opt_common_name_required",
          "tls_opt_enable_diags",
          "tls_opt_export_cert_data",
          "tls_opt_no_cert_request",
          "tls_opt_no_empty_fragments",
          "tls_opt_no_session_reuse_required",
          "tls_opt_stdenvvars",
          "tls_opt_dns_name_required",
          "tls_opt_ip_address_required",
          "ssltls_certificate",
          "options"
        ]
      },
      "gluster_eventsd_create_0": {
        "type": "object",
        "properties": {
          "url": {
            "_name_": "url",
            "title": "url",
            "type": "string",
            "description": "Add `url` webhook that will be called\nwith a JSON formatted POST request that\nwill include the event that was triggered\nalong with the relevant data.\n`url` is a http address (i.e. http://192.168.1.50/endpoint)"
          },
          "bearer_token": {
            "_name_": "bearer_token",
            "title": "bearer_token",
            "type": "string",
            "description": "`bearer_token` is a bearer token"
          },
          "secret": {
            "_name_": "secret",
            "title": "secret",
            "type": "string",
            "description": "`secret` secret to encode the JWT message"
          }
        },
        "additionalProperties": false,
        "_name_": "webhook_create",
        "title": "webhook_create",
        "default": {},
        "_attrs_order_": [
          "url",
          "bearer_token",
          "secret"
        ]
      },
      "gluster_eventsd_delete_0": {
        "type": "object",
        "properties": {
          "url": {
            "_name_": "url",
            "title": "url",
            "type": "string",
            "description": "Delete `url` webhook"
          }
        },
        "additionalProperties": false,
        "_name_": "webhook_delete",
        "title": "webhook_delete",
        "default": {},
        "_attrs_order_": [
          "url"
        ]
      },
      "gluster_fuse_is_mounted_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "glusterfuse_mounted",
        "title": "glusterfuse_mounted",
        "default": {},
        "_attrs_order_": [
          "name"
        ]
      },
      "gluster_fuse_mount_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "default": null,
            "type": "string",
            "description": "`name` String representing the name of the gluster volume"
          },
          "all": {
            "type": "boolean",
            "_name_": "all",
            "title": "all",
            "default": false,
            "description": "`all` Boolean if True locally FUSE mount all detected\n        gluster volumes"
          },
          "raise": {
            "type": "boolean",
            "_name_": "raise",
            "title": "raise",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "gluserfuse_mount",
        "title": "gluserfuse_mount",
        "default": {},
        "_attrs_order_": [
          "name",
          "all",
          "raise"
        ]
      },
      "gluster_fuse_umount_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "default": null,
            "type": "string",
            "description": "`name` String representing the name of the gluster volume"
          },
          "all": {
            "type": "boolean",
            "_name_": "all",
            "title": "all",
            "default": false,
            "description": "`all` Boolean if True umount all locally detected FUSE\n        mounted gluster volumes"
          },
          "raise": {
            "type": "boolean",
            "_name_": "raise",
            "title": "raise",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "glusterfuse_umount",
        "title": "glusterfuse_umount",
        "default": {},
        "_attrs_order_": [
          "name",
          "all",
          "raise"
        ]
      },
      "gluster_localevents_add_jwt_secret_0": {
        "type": "object",
        "properties": {
          "secret": {
            "_name_": "secret",
            "title": "secret",
            "type": "string",
            "description": "Add a `secret` key used to encode/decode\nJWT messages for sending/receiving gluster\nevents.\n`secret` String representing the key to be used\n            to encode/decode JWT messages"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false,
            "description": "`force` Boolean if set to True, will forcefully\n            wipe any existing jwt key for this\n            peer. Note, if forcefully adding a\n            new key, the other peers in the TSP\n            will also need to be sent this key."
          }
        },
        "additionalProperties": false,
        "_name_": "add_secret",
        "title": "add_secret",
        "default": {},
        "_attrs_order_": [
          "secret",
          "force"
        ]
      },
      "gluster_peer_create_0": {
        "type": "object",
        "properties": {
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "peer_create",
        "title": "peer_create",
        "default": {},
        "_attrs_order_": [
          "hostname"
        ]
      },
      "gluster_peer_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "gluster_peer_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "gluster_peer_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/gluster_peer_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/gluster_peer_get_instance_1"
          }
        }
      },
      "gluster_peer_status_0": {
        "type": "object",
        "properties": {
          "localhost": {
            "type": "boolean",
            "_name_": "localhost",
            "title": "localhost",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "peer_status",
        "title": "peer_status",
        "default": {},
        "_attrs_order_": [
          "localhost"
        ]
      },
      "gluster_volume_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name to be given to the volume"
          },
          "bricks": {
            "_name_": "bricks",
            "title": "bricks",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "peer_name": {
                  "_name_": "peer_name",
                  "title": "peer_name",
                  "_required_": true,
                  "type": "string"
                },
                "peer_path": {
                  "_name_": "peer_path",
                  "title": "peer_path",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "brick",
              "title": "brick",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "peer_name",
                "peer_path"
              ]
            },
            "description": "`bricks` List representing the brick paths\n    `peer_name` String representing IP or DNS name of the peer\n    `peer_path` String representing the full path of the brick"
          },
          "replica": {
            "type": "integer",
            "_name_": "replica",
            "title": "replica",
            "description": "`replica` Integer representing number of replica bricks"
          },
          "arbiter": {
            "type": "integer",
            "_name_": "arbiter",
            "title": "arbiter",
            "description": "`arbiter` Integer representing number of arbiter bricks"
          },
          "disperse": {
            "type": "integer",
            "_name_": "disperse",
            "title": "disperse",
            "description": "`disperse` Integer representing number of disperse bricks"
          },
          "disperse_data": {
            "type": "integer",
            "_name_": "disperse_data",
            "title": "disperse_data",
            "description": "`disperse_data` Integer representing number of disperse data bricks"
          },
          "redundancy": {
            "type": "integer",
            "_name_": "redundancy",
            "title": "redundancy",
            "description": "`redundancy` Integer representing number of redundancy bricks"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force"
          }
        },
        "additionalProperties": false,
        "_name_": "glustervolume_create",
        "title": "glustervolume_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "bricks",
          "replica",
          "arbiter",
          "disperse",
          "disperse_data",
          "redundancy",
          "force"
        ]
      },
      "gluster_volume_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "gluster_volume_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "gluster_volume_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/gluster_volume_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/gluster_volume_get_instance_1"
          }
        }
      },
      "gluster_volume_info_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "volume_info",
        "title": "volume_info",
        "default": {},
        "_attrs_order_": [
          "name"
        ]
      },
      "gluster_volume_optreset_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "opt": {
            "_name_": "opt",
            "title": "opt",
            "type": "string",
            "description": "Reset volumes options.\n    If `opt` is not provided, then all options\n    will be reset.\n`opt` String representing name of the option to reset"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force"
          }
        },
        "additionalProperties": false,
        "_name_": "volume_optreset",
        "title": "volume_optreset",
        "default": {},
        "_attrs_order_": [
          "name",
          "opt",
          "force"
        ]
      },
      "gluster_volume_optset_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "opts": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "opts",
            "title": "opts",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "volume_optset",
        "title": "volume_optset",
        "default": {},
        "_attrs_order_": [
          "name",
          "opts"
        ]
      },
      "gluster_volume_quota_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "enable": {
            "type": "boolean",
            "_name_": "enable",
            "title": "enable"
          }
        },
        "additionalProperties": false,
        "_name_": "volume_quota",
        "title": "volume_quota",
        "default": {},
        "_attrs_order_": [
          "name",
          "enable"
        ]
      },
      "gluster_volume_restart_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "volume_restart",
        "title": "volume_restart",
        "default": {},
        "_attrs_order_": [
          "name",
          "force"
        ]
      },
      "gluster_volume_start_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "volume_start",
        "title": "volume_start",
        "default": {},
        "_attrs_order_": [
          "name",
          "force"
        ]
      },
      "gluster_volume_status_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "verbose": {
            "type": "boolean",
            "_name_": "verbose",
            "title": "verbose",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "volume_status",
        "title": "volume_status",
        "default": {},
        "_attrs_order_": [
          "name",
          "verbose"
        ]
      },
      "gluster_volume_stop_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of gluster volume"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "volume_stop",
        "title": "volume_stop",
        "default": {},
        "_attrs_order_": [
          "name",
          "force"
        ]
      },
      "group_create_0": {
        "type": "object",
        "properties": {
          "gid": {
            "type": "integer",
            "_name_": "gid",
            "title": "gid",
            "description": "If `gid` is not provided it is automatically filled with the next one available."
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "smb": {
            "type": "boolean",
            "_name_": "smb",
            "title": "smb",
            "default": true
          },
          "sudo_commands": {
            "_name_": "sudo_commands",
            "title": "sudo_commands",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "command",
              "title": "command",
              "_required_": false,
              "type": "string"
            }
          },
          "sudo_commands_nopasswd": {
            "_name_": "sudo_commands_nopasswd",
            "title": "sudo_commands_nopasswd",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "command",
              "title": "command",
              "_required_": false,
              "type": "string"
            }
          },
          "allow_duplicate_gid": {
            "type": "boolean",
            "_name_": "allow_duplicate_gid",
            "title": "allow_duplicate_gid",
            "default": false,
            "description": "`allow_duplicate_gid` allows distinct group names to share the same gid."
          },
          "users": {
            "_name_": "users",
            "title": "users",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "id",
              "title": "id",
              "_required_": false
            },
            "description": "`users` is a list of user ids (`id` attribute from `user.query`)."
          }
        },
        "additionalProperties": false,
        "_name_": "group_create",
        "title": "group_create",
        "default": {},
        "_attrs_order_": [
          "gid",
          "name",
          "smb",
          "sudo_commands",
          "sudo_commands_nopasswd",
          "allow_duplicate_gid",
          "users"
        ]
      },
      "group_get_group_obj_0": {
        "type": "object",
        "properties": {
          "groupname": {
            "_name_": "groupname",
            "title": "groupname",
            "default": null,
            "type": "string"
          },
          "gid": {
            "type": "integer",
            "_name_": "gid",
            "title": "gid",
            "default": null
          }
        },
        "additionalProperties": false,
        "_name_": "get_group_obj",
        "title": "get_group_obj",
        "default": {},
        "_attrs_order_": [
          "groupname",
          "gid"
        ]
      },
      "group_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "group_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "group_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/group_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/group_get_instance_1"
          }
        }
      },
      "group_has_password_enabled_user_0": {
        "_name_": "gids",
        "title": "gids",
        "default": [],
        "type": "array",
        "items": {
          "type": "integer",
          "_name_": "gid",
          "title": "gid",
          "_required_": false
        }
      },
      "group_has_password_enabled_user_1": {
        "_name_": "exclude_user_ids",
        "title": "exclude_user_ids",
        "default": [],
        "type": "array",
        "items": {
          "type": "integer",
          "_name_": "exclude_user_id",
          "title": "exclude_user_id",
          "_required_": false
        }
      },
      "group_has_password_enabled_user": {
        "type": "object",
        "properties": {
          "gids": {
            "$ref": "#/components/schemas/group_has_password_enabled_user_0"
          },
          "exclude_user_ids": {
            "$ref": "#/components/schemas/group_has_password_enabled_user_1"
          }
        }
      },
      "idmap_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` the pre-windows 2000 domain name."
          },
          "dns_domain_name": {
            "_name_": "dns_domain_name",
            "title": "dns_domain_name",
            "type": "string"
          },
          "range_low": {
            "type": "integer",
            "_name_": "range_low",
            "title": "range_low",
            "description": "`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.\n`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative."
          },
          "range_high": {
            "type": "integer",
            "_name_": "range_high",
            "title": "range_high",
            "description": "`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.\n`range_low` and `range_high` specify the UID and GID range for which this backend is authoritative."
          },
          "idmap_backend": {
            "_name_": "idmap_backend",
            "title": "idmap_backend",
            "type": "string",
            "enum": [
              "AD",
              "AUTORID",
              "LDAP",
              "NSS",
              "RFC2307",
              "RID",
              "TDB"
            ],
            "description": "`idmap_backend` provides a plugin interface for Winbind to use varying\nbackends to store SID/uid/gid mapping tables. The correct setting\ndepends on the environment in which the NAS is deployed."
          },
          "certificate": {
            "type": "integer",
            "_name_": "certificate",
            "title": "certificate",
            "nullable": true
          },
          "options": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "schema_mode": {
                    "_name_": "schema_mode",
                    "title": "nss_info_ad",
                    "default": "SFU",
                    "_required_": false,
                    "type": "string",
                    "enum": [
                      "SFU",
                      "SFU20",
                      "RFC2307"
                    ]
                  },
                  "unix_primary_group": {
                    "type": "boolean",
                    "_name_": "unix_primary_group",
                    "title": "unix_primary_group",
                    "default": false,
                    "_required_": false
                  },
                  "unix_nss_info": {
                    "type": "boolean",
                    "_name_": "unix_nss_info",
                    "title": "unix_nss_info",
                    "default": false,
                    "_required_": false
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_ad_options",
                "title": "idmap_ad_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "schema_mode",
                  "unix_primary_group",
                  "unix_nss_info"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "rangesize": {
                    "type": "integer",
                    "_name_": "rangesize",
                    "title": "rangesize",
                    "default": 100000,
                    "_required_": false
                  },
                  "readonly": {
                    "type": "boolean",
                    "_name_": "readonly",
                    "title": "readonly",
                    "default": false,
                    "_required_": false
                  },
                  "ignore_builtin": {
                    "type": "boolean",
                    "_name_": "ignore_builtin",
                    "title": "ignore_builtin",
                    "default": false,
                    "_required_": false
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_autorid_options",
                "title": "idmap_autorid_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "rangesize",
                  "readonly",
                  "ignore_builtin"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ldap_base_dn": {
                    "_name_": "ldap_base_dn",
                    "title": "ldap_base_dn",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_user_dn": {
                    "_name_": "ldap_user_dn",
                    "title": "ldap_user_dn",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_user_dn_password": {
                    "_name_": "ldap_user_dn_password",
                    "title": "ldap_user_dn_password",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_url": {
                    "_name_": "ldap_url",
                    "title": "ldap_url",
                    "_required_": false,
                    "type": "string"
                  },
                  "readonly": {
                    "type": "boolean",
                    "_name_": "readonly",
                    "title": "readonly",
                    "default": false,
                    "_required_": false
                  },
                  "ssl": {
                    "_name_": "ssl",
                    "title": "ldap_ssl_choice",
                    "default": "ON",
                    "_required_": false,
                    "type": "string",
                    "enum": [
                      "OFF",
                      "ON",
                      "START_TLS"
                    ]
                  },
                  "validate_certificates": {
                    "type": "boolean",
                    "_name_": "validate_certificates",
                    "title": "validate_certificates",
                    "default": true,
                    "_required_": false
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_ldap_options",
                "title": "idmap_ldap_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "ldap_base_dn",
                  "ldap_user_dn",
                  "ldap_user_dn_password",
                  "ldap_url",
                  "readonly",
                  "ssl",
                  "validate_certificates"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "linked_service": {
                    "_name_": "linked_service",
                    "title": "linked_service",
                    "default": "LOCAL_ACCOUNT",
                    "_required_": false,
                    "type": "string",
                    "enum": [
                      "LOCAL_ACCOUNT",
                      "LDAP"
                    ]
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_nss_options",
                "title": "idmap_nss_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "linked_service"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ldap_server": {
                    "_name_": "ldap_server",
                    "title": "ldap_server",
                    "_required_": true,
                    "type": "string",
                    "enum": [
                      "AD",
                      "STANDALONE"
                    ]
                  },
                  "ldap_realm": {
                    "type": "boolean",
                    "_name_": "ldap_realm",
                    "title": "ldap_realm",
                    "default": false,
                    "_required_": false
                  },
                  "bind_path_user": {
                    "_name_": "bind_path_user",
                    "title": "bind_path_user",
                    "_required_": false,
                    "type": "string"
                  },
                  "bind_path_group": {
                    "_name_": "bind_path_group",
                    "title": "bind_path_group",
                    "_required_": false,
                    "type": "string"
                  },
                  "user_cn": {
                    "type": "boolean",
                    "_name_": "user_cn",
                    "title": "user_cn",
                    "default": false,
                    "_required_": false
                  },
                  "cn_realm": {
                    "_name_": "cn_realm",
                    "title": "cn_realm",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_domain": {
                    "_name_": "ldap_domain",
                    "title": "ldap_domain",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_url": {
                    "_name_": "ldap_url",
                    "title": "ldap_url",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_user_dn": {
                    "_name_": "ldap_user_dn",
                    "title": "ldap_user_dn",
                    "_required_": false,
                    "type": "string"
                  },
                  "ldap_user_dn_password": {
                    "_name_": "ldap_user_dn_password",
                    "title": "ldap_user_dn_password",
                    "_required_": false,
                    "type": "string"
                  },
                  "ssl": {
                    "_name_": "ssl",
                    "title": "ldap_ssl_choice",
                    "default": "ON",
                    "_required_": false,
                    "type": "string",
                    "enum": [
                      "OFF",
                      "ON",
                      "START_TLS"
                    ]
                  },
                  "validate_certificates": {
                    "type": "boolean",
                    "_name_": "validate_certificates",
                    "title": "validate_certificates",
                    "default": true,
                    "_required_": false
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_rfc2307_options",
                "title": "idmap_rfc2307_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "ldap_server",
                  "ldap_realm",
                  "bind_path_user",
                  "bind_path_group",
                  "user_cn",
                  "cn_realm",
                  "ldap_domain",
                  "ldap_url",
                  "ldap_user_dn",
                  "ldap_user_dn_password",
                  "ssl",
                  "validate_certificates"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "sssd_compat": {
                    "type": "boolean",
                    "_name_": "sssd_compat",
                    "title": "sssd_compat",
                    "default": false,
                    "_required_": false
                  }
                },
                "additionalProperties": false,
                "_name_": "idmap_rid_options",
                "title": "idmap_rid_options",
                "default": {},
                "_required_": false,
                "_attrs_order_": [
                  "sssd_compat"
                ]
              }
            ],
            "nullable": false,
            "_name_": "options",
            "description": "`options` are additional parameters that are backend-dependent:"
          }
        },
        "additionalProperties": false,
        "_name_": "idmap_domain_create",
        "title": "idmap_domain_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "dns_domain_name",
          "range_low",
          "range_high",
          "idmap_backend",
          "certificate",
          "options"
        ]
      },
      "idmap_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "idmap_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "idmap_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/idmap_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/idmap_get_instance_1"
          }
        }
      },
      "idmap_options_choices_0": {
        "_name_": "idmap_backend",
        "title": "idmap_backend",
        "type": "string",
        "enum": [
          "AD",
          "AUTORID",
          "LDAP",
          "NSS",
          "RFC2307",
          "RID",
          "TDB"
        ]
      },
      "initshutdownscript_create_0": {
        "type": "object",
        "properties": {
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "enum": [
              "COMMAND",
              "SCRIPT"
            ],
            "description": "`type` indicates if a command or script should be executed at `when`."
          },
          "command": {
            "_name_": "command",
            "title": "command",
            "type": "string",
            "nullable": true
          },
          "script_text": {
            "_name_": "script_text",
            "title": "script_text",
            "type": "string",
            "nullable": true
          },
          "script": {
            "_name_": "script",
            "title": "script",
            "type": "string",
            "nullable": true
          },
          "when": {
            "_name_": "when",
            "title": "when",
            "type": "string",
            "enum": [
              "PREINIT",
              "POSTINIT",
              "SHUTDOWN"
            ],
            "description": "`type` indicates if a command or script should be executed at `when`.\nThere are three choices for `when`:"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 10
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "default": "",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "init_shutdown_script_create",
        "title": "init_shutdown_script_create",
        "default": {},
        "_attrs_order_": [
          "type",
          "command",
          "script_text",
          "script",
          "when",
          "enabled",
          "timeout",
          "comment"
        ]
      },
      "initshutdownscript_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "initshutdownscript_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "initshutdownscript_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/initshutdownscript_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/initshutdownscript_get_instance_1"
          }
        }
      },
      "interface_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "default": "",
            "type": "string"
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "enum": [
              "BRIDGE",
              "LINK_AGGREGATION",
              "VLAN"
            ],
            "description": "For BRIDGE `type` the following attribute is required: bridge_members.\nFor LINK_AGGREGATION `type` the following attributes are required: lag_ports,\nlag_protocol.\nFor VLAN `type` the following attributes are required: vlan_parent_interface,\nvlan_tag and vlan_pcp."
          },
          "ipv4_dhcp": {
            "type": "boolean",
            "_name_": "ipv4_dhcp",
            "title": "ipv4_dhcp",
            "default": false
          },
          "ipv6_auto": {
            "type": "boolean",
            "_name_": "ipv6_auto",
            "title": "ipv6_auto",
            "default": false
          },
          "aliases": {
            "_name_": "aliases",
            "title": "aliases",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "_name_": "type",
                  "title": "type",
                  "default": "INET",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "INET",
                    "INET6"
                  ]
                },
                "address": {
                  "_name_": "address",
                  "title": "address",
                  "_required_": true,
                  "type": "string"
                },
                "netmask": {
                  "type": "integer",
                  "_name_": "netmask",
                  "title": "netmask",
                  "_required_": true
                }
              },
              "additionalProperties": false,
              "_name_": "interface_alias",
              "title": "interface_alias",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "type",
                "address",
                "netmask"
              ]
            }
          },
          "failover_critical": {
            "type": "boolean",
            "_name_": "failover_critical",
            "title": "failover_critical",
            "default": false
          },
          "failover_group": {
            "type": "integer",
            "_name_": "failover_group",
            "title": "failover_group",
            "nullable": true
          },
          "failover_vhid": {
            "type": "integer",
            "_name_": "failover_vhid",
            "title": "failover_vhid",
            "nullable": true
          },
          "failover_aliases": {
            "_name_": "failover_aliases",
            "title": "failover_aliases",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "_name_": "type",
                  "title": "type",
                  "default": "INET",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "INET",
                    "INET6"
                  ]
                },
                "address": {
                  "_name_": "address",
                  "title": "address",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "interface_failover_alias",
              "title": "interface_failover_alias",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "type",
                "address"
              ]
            }
          },
          "failover_virtual_aliases": {
            "_name_": "failover_virtual_aliases",
            "title": "failover_virtual_aliases",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "_name_": "type",
                  "title": "type",
                  "default": "INET",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "INET",
                    "INET6"
                  ]
                },
                "address": {
                  "_name_": "address",
                  "title": "address",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "interface_virtual_alias",
              "title": "interface_virtual_alias",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "type",
                "address"
              ]
            }
          },
          "bridge_members": {
            "_name_": "bridge_members",
            "title": "bridge_members",
            "default": [],
            "type": "array",
            "items": {}
          },
          "stp": {
            "type": "boolean",
            "_name_": "stp",
            "title": "stp",
            "default": true
          },
          "lag_protocol": {
            "_name_": "lag_protocol",
            "title": "lag_protocol",
            "type": "string",
            "enum": [
              "LACP",
              "FAILOVER",
              "LOADBALANCE",
              "ROUNDROBIN",
              "NONE"
            ]
          },
          "xmit_hash_policy": {
            "_name_": "xmit_hash_policy",
            "title": "xmit_hash_policy",
            "default": null,
            "type": "string",
            "enum": [
              "LAYER2",
              "LAYER2+3",
              "LAYER3+4"
            ],
            "nullable": true
          },
          "lacpdu_rate": {
            "_name_": "lacpdu_rate",
            "title": "lacpdu_rate",
            "default": null,
            "type": "string",
            "enum": [
              "SLOW",
              "FAST"
            ],
            "nullable": true
          },
          "lag_ports": {
            "_name_": "lag_ports",
            "title": "lag_ports",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "interface",
              "title": "interface",
              "_required_": false,
              "type": "string"
            }
          },
          "vlan_parent_interface": {
            "_name_": "vlan_parent_interface",
            "title": "vlan_parent_interface",
            "type": "string"
          },
          "vlan_tag": {
            "type": "integer",
            "_name_": "vlan_tag",
            "title": "vlan_tag"
          },
          "vlan_pcp": {
            "type": "integer",
            "_name_": "vlan_pcp",
            "title": "vlan_pcp",
            "nullable": true
          },
          "mtu": {
            "type": "integer",
            "_name_": "mtu",
            "title": "mtu",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "interface_create",
        "title": "interface_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "description",
          "type",
          "ipv4_dhcp",
          "ipv6_auto",
          "aliases",
          "failover_critical",
          "failover_group",
          "failover_vhid",
          "failover_aliases",
          "failover_virtual_aliases",
          "bridge_members",
          "stp",
          "lag_protocol",
          "xmit_hash_policy",
          "lacpdu_rate",
          "lag_ports",
          "vlan_parent_interface",
          "vlan_tag",
          "vlan_pcp",
          "mtu"
        ]
      },
      "interface_bridge_members_choices_0": {
        "_name_": "id",
        "title": "id",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "interface_choices_0": {
        "type": "object",
        "properties": {
          "bridge_members": {
            "type": "boolean",
            "_name_": "bridge_members",
            "title": "bridge_members",
            "default": false,
            "description": "`bridge_members` will include BRIDGE members."
          },
          "lag_ports": {
            "type": "boolean",
            "_name_": "lag_ports",
            "title": "lag_ports",
            "default": false,
            "description": "`lag_ports` will include LINK_AGGREGATION ports."
          },
          "vlan_parent": {
            "type": "boolean",
            "_name_": "vlan_parent",
            "title": "vlan_parent",
            "default": true,
            "description": "`vlan_parent` will include VLAN parent interface."
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [
              "epair",
              "tap",
              "vnet"
            ],
            "type": "array",
            "items": {},
            "description": "`exclude` is a list of interfaces prefix to remove."
          },
          "exclude_types": {
            "_name_": "exclude_types",
            "title": "exclude_types",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "type",
              "title": "type",
              "_required_": false,
              "type": "string",
              "enum": [
                "BRIDGE",
                "LINK_AGGREGATION",
                "PHYSICAL",
                "UNKNOWN",
                "VLAN"
              ]
            }
          },
          "include": {
            "_name_": "include",
            "title": "include",
            "default": [],
            "type": "array",
            "items": {}
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "bridge_members",
          "lag_ports",
          "vlan_parent",
          "exclude",
          "exclude_types",
          "include"
        ]
      },
      "interface_commit_0": {
        "type": "object",
        "properties": {
          "rollback": {
            "type": "boolean",
            "_name_": "rollback",
            "title": "rollback",
            "default": true,
            "description": "`rollback` as true (default) will rollback changes in case they fail to apply."
          },
          "checkin_timeout": {
            "type": "integer",
            "_name_": "checkin_timeout",
            "title": "checkin_timeout",
            "default": 60
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "rollback",
          "checkin_timeout"
        ]
      },
      "interface_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "interface_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "interface_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/interface_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/interface_get_instance_1"
          }
        }
      },
      "interface_ip_in_use_0": {
        "type": "object",
        "properties": {
          "ipv4": {
            "type": "boolean",
            "_name_": "ipv4",
            "title": "ipv4",
            "default": true
          },
          "ipv6": {
            "type": "boolean",
            "_name_": "ipv6",
            "title": "ipv6",
            "default": true
          },
          "ipv6_link_local": {
            "type": "boolean",
            "_name_": "ipv6_link_local",
            "title": "ipv6_link_local",
            "default": false
          },
          "loopback": {
            "type": "boolean",
            "_name_": "loopback",
            "title": "loopback",
            "default": false,
            "description": "`loopback` will return loopback interface addresses."
          },
          "any": {
            "type": "boolean",
            "_name_": "any",
            "title": "any",
            "default": false,
            "description": "`any` will return wildcard addresses (0.0.0.0 and ::)."
          },
          "static": {
            "type": "boolean",
            "_name_": "static",
            "title": "static",
            "default": false,
            "description": "`static` when enabled will ensure we only return static ip's configured."
          }
        },
        "additionalProperties": false,
        "_name_": "ips",
        "title": "ips",
        "default": {},
        "_attrs_order_": [
          "ipv4",
          "ipv6",
          "ipv6_link_local",
          "loopback",
          "any",
          "static"
        ]
      },
      "interface_lag_ports_choices_0": {
        "_name_": "id",
        "title": "id",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "interface_save_default_route_0": {
        "_name_": "gw",
        "title": "gw",
        "type": "string"
      },
      "interface_capabilities_get_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "interface_capabilities_set_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` String representing name of the interface\n`capabilities` List representing capabilities to be acted upon"
          },
          "capabilties": {
            "_name_": "capabilties",
            "title": "capabilties",
            "default": [],
            "type": "array",
            "items": {}
          },
          "action": {
            "_name_": "action",
            "title": "action",
            "type": "string",
            "enum": [
              "ENABLE",
              "DISABLE"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "capabilities_set",
        "title": "capabilities_set",
        "default": {},
        "_attrs_order_": [
          "name",
          "capabilties",
          "action"
        ]
      },
      "ipmi_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "ipmi_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "ipmi_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ipmi_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/ipmi_get_instance_1"
          }
        }
      },
      "ipmi_identify_0": {
        "type": "object",
        "properties": {
          "seconds": {
            "type": "integer",
            "_name_": "seconds",
            "title": "seconds",
            "default": 15,
            "description": "`seconds` is an integer representing the number of seconds to leave the chassis identify light turned on.\n    - default is 15 seconds\n    - to turn it off, specify `seconds` as 0"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "seconds",
          "force"
        ]
      },
      "iscsi_auth_create_0": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "integer",
            "_name_": "tag",
            "title": "tag",
            "description": "`tag` should be unique among all configured iSCSI Authorized Accesses."
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "type": "string"
          },
          "secret": {
            "_name_": "secret",
            "title": "secret",
            "type": "string",
            "description": "`secret` and `peersecret` should have length between 12-16 letters inclusive."
          },
          "peeruser": {
            "_name_": "peeruser",
            "title": "peeruser",
            "default": "",
            "type": "string"
          },
          "peersecret": {
            "_name_": "peersecret",
            "title": "peersecret",
            "default": "",
            "type": "string",
            "description": "`secret` and `peersecret` should have length between 12-16 letters inclusive."
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_auth_create",
        "title": "iscsi_auth_create",
        "default": {},
        "_attrs_order_": [
          "tag",
          "user",
          "secret",
          "peeruser",
          "peersecret"
        ]
      },
      "iscsi_auth_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_auth_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_auth_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_auth_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_auth_get_instance_1"
          }
        }
      },
      "iscsi_extent_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "default": "DISK",
            "type": "string",
            "enum": [
              "DISK",
              "FILE"
            ],
            "description": "When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if\nnot zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.\nWith `type` being set to DISK, a valid ZFS volume is required."
          },
          "disk": {
            "_name_": "disk",
            "title": "disk",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "serial": {
            "_name_": "serial",
            "title": "serial",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "default": null,
            "type": "string",
            "description": "When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if\nnot zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.",
            "nullable": true
          },
          "filesize": {
            "type": "integer",
            "_name_": "filesize",
            "title": "filesize",
            "default": 0,
            "description": "When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if\nnot zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE."
          },
          "blocksize": {
            "type": "integer",
            "_name_": "blocksize",
            "title": "blocksize",
            "default": 512,
            "description": "When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if\nnot zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE."
          },
          "pblocksize": {
            "type": "boolean",
            "_name_": "pblocksize",
            "title": "pblocksize"
          },
          "avail_threshold": {
            "type": "integer",
            "_name_": "avail_threshold",
            "title": "avail_threshold",
            "nullable": true
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          },
          "insecure_tpc": {
            "type": "boolean",
            "_name_": "insecure_tpc",
            "title": "insecure_tpc",
            "default": true,
            "description": "`insecure_tpc` when enabled allows an initiator to bypass normal access control and access any scannable\ntarget. This allows xcopy operations otherwise blocked by access control."
          },
          "xen": {
            "type": "boolean",
            "_name_": "xen",
            "title": "xen",
            "description": "`xen` is a boolean value which is set to true if Xen is being used as the iSCSI initiator."
          },
          "rpm": {
            "_name_": "rpm",
            "title": "rpm",
            "default": "SSD",
            "type": "string",
            "enum": [
              "UNKNOWN",
              "SSD",
              "5400",
              "7200",
              "10000",
              "15000"
            ]
          },
          "ro": {
            "type": "boolean",
            "_name_": "ro",
            "title": "ro",
            "default": false
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_extent_create",
        "title": "iscsi_extent_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "type",
          "disk",
          "serial",
          "path",
          "filesize",
          "blocksize",
          "pblocksize",
          "avail_threshold",
          "comment",
          "insecure_tpc",
          "xen",
          "rpm",
          "ro",
          "enabled"
        ]
      },
      "iscsi_extent_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_extent_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_extent_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_extent_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_extent_get_instance_1"
          }
        }
      },
      "iscsi_global_update_0": {
        "type": "object",
        "properties": {
          "basename": {
            "_name_": "basename",
            "title": "basename",
            "type": "string"
          },
          "isns_servers": {
            "_name_": "isns_servers",
            "title": "isns_servers",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "server",
              "title": "server",
              "_required_": false,
              "type": "string"
            }
          },
          "listen_port": {
            "type": "integer",
            "_name_": "listen_port",
            "title": "listen_port",
            "default": 3260
          },
          "pool_avail_threshold": {
            "type": "integer",
            "_name_": "pool_avail_threshold",
            "title": "pool_avail_threshold",
            "nullable": true
          },
          "alua": {
            "type": "boolean",
            "_name_": "alua",
            "title": "alua"
          }
        },
        "additionalProperties": false,
        "_name_": "iscsiglobal_update",
        "title": "iscsiglobal_update",
        "default": {},
        "_attrs_order_": [
          "basename",
          "isns_servers",
          "listen_port",
          "pool_avail_threshold",
          "alua"
        ]
      },
      "iscsi_host_create_0": {
        "type": "object",
        "properties": {
          "ip": {
            "_name_": "ip",
            "title": "ip",
            "type": "string",
            "description": "`ip` indicates an IP address of the host."
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "default": "",
            "type": "string",
            "description": "`description` is a human-readable name for the host."
          },
          "iqns": {
            "_name_": "iqns",
            "title": "iqns",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "iqn",
              "title": "iqn",
              "_required_": false,
              "type": "string"
            }
          },
          "added_automatically": {
            "type": "boolean",
            "_name_": "added_automatically",
            "title": "added_automatically",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_host_create",
        "title": "iscsi_host_create",
        "default": {},
        "_attrs_order_": [
          "ip",
          "description",
          "iqns",
          "added_automatically"
        ]
      },
      "iscsi_host_get_initiators_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "iscsi_host_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_host_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_host_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_host_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_host_get_instance_1"
          }
        }
      },
      "iscsi_host_get_targets_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "iscsi_host_set_initiators_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id",
        "description": "Associates initiator groups `ids` with host `id`."
      },
      "iscsi_host_set_initiators_1": {
        "_name_": "ids",
        "title": "ids",
        "default": [],
        "type": "array",
        "items": {
          "type": "integer",
          "_name_": "id",
          "title": "id",
          "_required_": false
        },
        "description": "Associates initiator groups `ids` with host `id`."
      },
      "iscsi_host_set_initiators_2": {
        "type": "boolean",
        "_name_": "force",
        "title": "force",
        "default": false
      },
      "iscsi_host_set_initiators": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_host_set_initiators_0"
          },
          "ids": {
            "$ref": "#/components/schemas/iscsi_host_set_initiators_1"
          },
          "force": {
            "$ref": "#/components/schemas/iscsi_host_set_initiators_2"
          }
        }
      },
      "iscsi_host_set_targets_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "iscsi_host_set_targets_1": {
        "_name_": "ids",
        "title": "ids",
        "default": [],
        "type": "array",
        "items": {
          "type": "integer",
          "_name_": "id",
          "title": "id",
          "_required_": false
        }
      },
      "iscsi_host_set_targets": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_host_set_targets_0"
          },
          "ids": {
            "$ref": "#/components/schemas/iscsi_host_set_targets_1"
          }
        }
      },
      "iscsi_initiator_create_0": {
        "type": "object",
        "properties": {
          "initiators": {
            "_name_": "initiators",
            "title": "initiators",
            "default": [],
            "type": "array",
            "items": {}
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_initiator_create",
        "title": "iscsi_initiator_create",
        "default": {},
        "_attrs_order_": [
          "initiators",
          "comment"
        ]
      },
      "iscsi_initiator_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_initiator_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_initiator_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_initiator_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_initiator_get_instance_1"
          }
        }
      },
      "iscsi_portal_create_0": {
        "type": "object",
        "properties": {
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          },
          "discovery_authmethod": {
            "_name_": "discovery_authmethod",
            "title": "discovery_authmethod",
            "default": "NONE",
            "type": "string",
            "enum": [
              "NONE",
              "CHAP",
              "CHAP_MUTUAL"
            ]
          },
          "discovery_authgroup": {
            "type": "integer",
            "_name_": "discovery_authgroup",
            "title": "discovery_authgroup",
            "default": null,
            "nullable": true
          },
          "listen": {
            "_name_": "listen",
            "title": "listen",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ip": {
                  "_name_": "ip",
                  "title": "ip",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "listen",
              "title": "listen",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "ip"
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "iscsiportal_create",
        "title": "iscsiportal_create",
        "default": {},
        "_attrs_order_": [
          "comment",
          "discovery_authmethod",
          "discovery_authgroup",
          "listen"
        ]
      },
      "iscsi_portal_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_portal_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_portal_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_portal_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_portal_get_instance_1"
          }
        }
      },
      "iscsi_target_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "alias": {
            "_name_": "alias",
            "title": "alias",
            "type": "string",
            "nullable": true
          },
          "mode": {
            "_name_": "mode",
            "title": "mode",
            "default": "ISCSI",
            "type": "string",
            "enum": [
              "ISCSI",
              "FC",
              "BOTH"
            ]
          },
          "groups": {
            "_name_": "groups",
            "title": "groups",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "portal": {
                  "type": "integer",
                  "_name_": "portal",
                  "title": "portal",
                  "_required_": true
                },
                "initiator": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "_name_": "initiator",
                  "title": "initiator",
                  "default": null,
                  "_required_": false
                },
                "authmethod": {
                  "_name_": "authmethod",
                  "title": "authmethod",
                  "default": "NONE",
                  "_required_": false,
                  "type": "string",
                  "enum": [
                    "NONE",
                    "CHAP",
                    "CHAP_MUTUAL"
                  ]
                },
                "auth": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "_name_": "auth",
                  "title": "auth",
                  "default": null,
                  "_required_": false
                }
              },
              "additionalProperties": false,
              "_name_": "group",
              "title": "group",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "portal",
                "initiator",
                "authmethod",
                "auth"
              ]
            },
            "description": "`groups` is a list of group dictionaries which provide information related to using a `portal`, `initiator`,\n`authmethod` and `auth` with this target. `auth` represents a valid iSCSI Authorized Access and defaults to\nnull."
          },
          "auth_networks": {
            "_name_": "auth_networks",
            "title": "auth_networks",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "ip",
              "title": "ip",
              "_required_": false,
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_target_create",
        "title": "iscsi_target_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "alias",
          "mode",
          "groups",
          "auth_networks"
        ]
      },
      "iscsi_target_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_target_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_target_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_target_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_target_get_instance_1"
          }
        }
      },
      "iscsi_targetextent_create_0": {
        "type": "object",
        "properties": {
          "target": {
            "type": "integer",
            "_name_": "target",
            "title": "target"
          },
          "lunid": {
            "type": "integer",
            "_name_": "lunid",
            "title": "lunid",
            "nullable": true
          },
          "extent": {
            "type": "integer",
            "_name_": "extent",
            "title": "extent"
          }
        },
        "additionalProperties": false,
        "_name_": "iscsi_targetextent_create",
        "title": "iscsi_targetextent_create",
        "default": {},
        "_attrs_order_": [
          "target",
          "lunid",
          "extent"
        ]
      },
      "iscsi_targetextent_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "iscsi_targetextent_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "iscsi_targetextent_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/iscsi_targetextent_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/iscsi_targetextent_get_instance_1"
          }
        }
      },
      "kerberos_update_0": {
        "type": "object",
        "properties": {
          "appdefaults_aux": {
            "_name_": "appdefaults_aux",
            "title": "appdefaults_aux",
            "type": "string",
            "description": "`appdefaults_aux` add parameters to \"appdefaults\" section of the krb5.conf file."
          },
          "libdefaults_aux": {
            "_name_": "libdefaults_aux",
            "title": "libdefaults_aux",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "kerberos_settings_update",
        "title": "kerberos_settings_update",
        "default": {},
        "_attrs_order_": [
          "appdefaults_aux",
          "libdefaults_aux"
        ]
      },
      "kerberos_keytab_create_0": {
        "type": "object",
        "properties": {
          "file": {
            "_name_": "file",
            "title": "file",
            "type": "string",
            "description": "`file` b64encoded kerberos keytab"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "kerberos_keytab_create",
        "title": "kerberos_keytab_create",
        "default": {},
        "_attrs_order_": [
          "file",
          "name"
        ]
      },
      "kerberos_keytab_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "kerberos_keytab_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "kerberos_keytab_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/kerberos_keytab_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/kerberos_keytab_get_instance_1"
          }
        }
      },
      "kerberos_keytab_upload_keytab_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "keytab_data",
        "title": "keytab_data",
        "default": {},
        "_attrs_order_": [
          "name"
        ]
      },
      "kerberos_realm_create_0": {
        "type": "object",
        "properties": {
          "realm": {
            "_name_": "realm",
            "title": "realm",
            "type": "string"
          },
          "kdc": {
            "_name_": "kdc",
            "title": "kdc",
            "default": [],
            "type": "array",
            "items": {}
          },
          "admin_server": {
            "_name_": "admin_server",
            "title": "admin_server",
            "default": [],
            "type": "array",
            "items": {}
          },
          "kpasswd_server": {
            "_name_": "kpasswd_server",
            "title": "kpasswd_server",
            "default": [],
            "type": "array",
            "items": {}
          }
        },
        "additionalProperties": false,
        "_name_": "kerberos_realm_create",
        "title": "kerberos_realm_create",
        "default": {},
        "_attrs_order_": [
          "realm",
          "kdc",
          "admin_server",
          "kpasswd_server"
        ]
      },
      "kerberos_realm_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "kerberos_realm_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "kerberos_realm_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/kerberos_realm_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/kerberos_realm_get_instance_1"
          }
        }
      },
      "keychaincredential_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "Every Keychain Credential has a `name` which is used to distinguish it from others."
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "description": "The following `type`s are supported:\n * `SSH_KEY_PAIR`\n   Which `attributes` are:\n   * `private_key`\n   * `public_key` (which can be omitted and thus automatically derived from private key)\n   At least one attribute is required."
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": [],
            "description": "The following `type`s are supported:\n * `SSH_KEY_PAIR`\n   Which `attributes` are:\n   * `private_key`\n   * `public_key` (which can be omitted and thus automatically derived from private key)\n   At least one attribute is required.\n * `SSH_CREDENTIALS`\n   Which `attributes` are:\n   * `host`\n   * `port` (default 22)\n   * `username` (default root)\n   * `private_key` (Keychain Credential ID)\n   * `remote_host_key` (you can use `keychaincredential.remote_ssh_host_key_scan` do discover it)\n   * `cipher`: one of `STANDARD`, `FAST`, or `DISABLED` (last requires special support from both SSH server and\n     client)\n   * `connect_timeout` (default 10)"
          }
        },
        "additionalProperties": false,
        "_name_": "keychain_credential_create",
        "title": "keychain_credential_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "type",
          "attributes"
        ]
      },
      "keychaincredential_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "keychaincredential_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "keychaincredential_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/keychaincredential_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/keychaincredential_get_instance_1"
          }
        }
      },
      "keychaincredential_remote_ssh_host_key_scan_0": {
        "type": "object",
        "properties": {
          "host": {
            "_name_": "host",
            "title": "host",
            "type": "string"
          },
          "port": {
            "_name_": "port",
            "title": "port",
            "default": 22,
            "type": "string"
          },
          "connect_timeout": {
            "type": "integer",
            "_name_": "connect_timeout",
            "title": "connect_timeout",
            "default": 10
          }
        },
        "additionalProperties": false,
        "_name_": "keychain_remote_ssh_host_key_scan",
        "title": "keychain_remote_ssh_host_key_scan",
        "default": {},
        "_attrs_order_": [
          "host",
          "port",
          "connect_timeout"
        ]
      },
      "keychaincredential_remote_ssh_semiautomatic_setup_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other"
          },
          "url": {
            "_name_": "url",
            "title": "url",
            "type": "string",
            "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other"
          },
          "token": {
            "_name_": "token",
            "title": "token",
            "type": "string",
            "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other"
          },
          "admin_username": {
            "_name_": "admin_username",
            "title": "admin_username",
            "default": "root",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          },
          "otp_token": {
            "_name_": "otp_token",
            "title": "otp_token",
            "type": "string"
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "default": "root",
            "type": "string",
            "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other"
          },
          "private_key": {
            "type": "integer",
            "_name_": "private_key",
            "title": "private_key",
            "description": "Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`\ncredential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and\ntemporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other"
          },
          "cipher": {
            "_name_": "cipher",
            "title": "cipher",
            "default": "STANDARD",
            "type": "string",
            "enum": [
              "STANDARD",
              "FAST",
              "DISABLED"
            ],
            "description": "`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well."
          },
          "connect_timeout": {
            "type": "integer",
            "_name_": "connect_timeout",
            "title": "connect_timeout",
            "default": 10,
            "description": "`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well."
          },
          "sudo": {
            "type": "boolean",
            "_name_": "sudo",
            "title": "sudo",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "keychain_remote_ssh_semiautomatic_setup",
        "title": "keychain_remote_ssh_semiautomatic_setup",
        "default": {},
        "_attrs_order_": [
          "name",
          "url",
          "token",
          "admin_username",
          "password",
          "otp_token",
          "username",
          "private_key",
          "cipher",
          "connect_timeout",
          "sudo"
        ]
      },
      "keychaincredential_setup_ssh_connection_0": {
        "type": "object",
        "properties": {
          "private_key": {
            "type": "object",
            "properties": {
              "generate_key": {
                "type": "boolean",
                "_name_": "generate_key",
                "title": "generate_key",
                "default": true
              },
              "existing_key_id": {
                "type": "integer",
                "_name_": "existing_key_id",
                "title": "existing_key_id"
              },
              "name": {
                "_name_": "name",
                "title": "name",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "private_key",
            "title": "private_key",
            "default": {},
            "_attrs_order_": [
              "generate_key",
              "existing_key_id",
              "name"
            ]
          },
          "connection_name": {
            "_name_": "connection_name",
            "title": "connection_name",
            "type": "string"
          },
          "setup_type": {
            "_name_": "setup_type",
            "title": "setup_type",
            "default": "MANUAL",
            "type": "string",
            "enum": [
              "SEMI-AUTOMATIC",
              "MANUAL"
            ],
            "description": "1) Generating SSH Key Pair if required\n2) Setting up SSH Credentials based on `setup_type`"
          },
          "semi_automatic_setup": {
            "type": "object",
            "properties": {
              "url": {
                "_name_": "url",
                "title": "url",
                "type": "string"
              },
              "token": {
                "_name_": "token",
                "title": "token",
                "type": "string"
              },
              "admin_username": {
                "_name_": "admin_username",
                "title": "admin_username",
                "default": "root",
                "type": "string"
              },
              "password": {
                "_name_": "password",
                "title": "password",
                "type": "string"
              },
              "otp_token": {
                "_name_": "otp_token",
                "title": "otp_token",
                "type": "string"
              },
              "username": {
                "_name_": "username",
                "title": "username",
                "default": "root",
                "type": "string"
              },
              "cipher": {
                "_name_": "cipher",
                "title": "cipher",
                "default": "STANDARD",
                "type": "string",
                "enum": [
                  "STANDARD",
                  "FAST",
                  "DISABLED"
                ]
              },
              "connect_timeout": {
                "type": "integer",
                "_name_": "connect_timeout",
                "title": "connect_timeout",
                "default": 10
              },
              "sudo": {
                "type": "boolean",
                "_name_": "sudo",
                "title": "sudo",
                "default": false
              }
            },
            "additionalProperties": false,
            "_name_": "semi_automatic_setup",
            "title": "keychain_remote_ssh_semiautomatic_setup",
            "default": null,
            "_attrs_order_": [
              "url",
              "token",
              "admin_username",
              "password",
              "otp_token",
              "username",
              "cipher",
              "connect_timeout",
              "sudo"
            ]
          },
          "manual_setup": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "manual_setup",
            "title": "manual_setup",
            "default": null,
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "setup_ssh_connection",
        "title": "setup_ssh_connection",
        "default": {},
        "_attrs_order_": [
          "private_key",
          "connection_name",
          "setup_type",
          "semi_automatic_setup",
          "manual_setup"
        ]
      },
      "keychaincredential_used_by_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "kmip_update_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "description": "`enabled` if true, cannot be set to disabled if there are existing keys pending to be synced. However users\ncan still perform this action by enabling `force_clear`."
          },
          "manage_sed_disks": {
            "type": "boolean",
            "_name_": "manage_sed_disks",
            "title": "manage_sed_disks",
            "description": "`manage_zfs_keys`/`manage_sed_disks` when enabled will sync keys from local database to remote KMIP server.\nWhen disabled, if there are any keys left to be retrieved from the KMIP server,\nit will sync them back to local database."
          },
          "manage_zfs_keys": {
            "type": "boolean",
            "_name_": "manage_zfs_keys",
            "title": "manage_zfs_keys",
            "description": "`manage_zfs_keys`/`manage_sed_disks` when enabled will sync keys from local database to remote KMIP server.\nWhen disabled, if there are any keys left to be retrieved from the KMIP server,\nit will sync them back to local database."
          },
          "certificate": {
            "type": "integer",
            "_name_": "certificate",
            "title": "certificate",
            "description": "System currently authenticates connection with remote KMIP Server with a TLS handshake. `certificate` and",
            "nullable": true
          },
          "certificate_authority": {
            "type": "integer",
            "_name_": "certificate_authority",
            "title": "certificate_authority",
            "description": "`certificate_authority` determine the certs which will be used to initiate the TLS handshake with `server`.",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "server": {
            "_name_": "server",
            "title": "server",
            "type": "string",
            "description": "`certificate_authority` determine the certs which will be used to initiate the TLS handshake with `server`.\n`validate` is enabled by default. When enabled, system will test connection to `server` making sure\nit's reachable.",
            "nullable": true
          },
          "ssl_version": {
            "_name_": "ssl_version",
            "title": "ssl_version",
            "type": "string",
            "enum": [
              "PROTOCOL_TLSv1",
              "PROTOCOL_TLSv1_1",
              "PROTOCOL_TLSv1_2"
            ],
            "description": "`ssl_version` can be specified to match the ssl configuration being used by KMIP server."
          },
          "force_clear": {
            "type": "boolean",
            "_name_": "force_clear",
            "title": "force_clear",
            "description": "`enabled` if true, cannot be set to disabled if there are existing keys pending to be synced. However users\ncan still perform this action by enabling `force_clear`.\n`change_server` is a boolean field which allows users to migrate data between two KMIP servers. System\nwill first migrate keys from old KMIP server to local database and then migrate the keys from local database\nto new KMIP server. If it is unable to retrieve all the keys from old server, this will fail. Users can bypass\nthis by enabling `force_clear`."
          },
          "change_server": {
            "type": "boolean",
            "_name_": "change_server",
            "title": "change_server",
            "description": "`change_server` is a boolean field which allows users to migrate data between two KMIP servers. System\nwill first migrate keys from old KMIP server to local database and then migrate the keys from local database\nto new KMIP server. If it is unable to retrieve all the keys from old server, this will fail. Users can bypass\nthis by enabling `force_clear`."
          },
          "validate": {
            "type": "boolean",
            "_name_": "validate",
            "title": "validate",
            "description": "`validate` is enabled by default. When enabled, system will test connection to `server` making sure\nit's reachable."
          }
        },
        "additionalProperties": false,
        "_name_": "kmip_update",
        "title": "kmip_entry",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "manage_sed_disks",
          "manage_zfs_keys",
          "certificate",
          "certificate_authority",
          "port",
          "server",
          "ssl_version",
          "force_clear",
          "change_server",
          "validate"
        ]
      },
      "kubernetes_update_0": {
        "type": "object",
        "properties": {
          "servicelb": {
            "type": "boolean",
            "_name_": "servicelb",
            "title": "servicelb",
            "description": "`servicelb` is a boolean to enable or disable the integrated k3s Service Loadbalancer called \"Klipper\".\nThis can be set to disabled to enable the user to run another LoadBalancer or no LoadBalancer at all."
          },
          "configure_gpus": {
            "type": "boolean",
            "_name_": "configure_gpus",
            "title": "configure_gpus",
            "description": "`configure_gpus` is a boolean to enable or disable to prevent automatically loading any GPU Support\ninto kubernetes. This includes not loading any daemonsets for Intel and NVIDIA support."
          },
          "validate_host_path": {
            "type": "boolean",
            "_name_": "validate_host_path",
            "title": "validate_host_path"
          },
          "passthrough_mode": {
            "type": "boolean",
            "_name_": "passthrough_mode",
            "title": "passthrough_mode"
          },
          "pool": {
            "_name_": "pool",
            "title": "pool",
            "type": "string",
            "description": "`pool` must be a valid ZFS pool configured in the system. Kubernetes service will initialise the pool by\ncreating datasets under `pool_name/ix-applications`.",
            "nullable": true
          },
          "cluster_cidr": {
            "_name_": "cluster_cidr",
            "title": "cluster_cidr",
            "type": "string",
            "description": "`cluster_cidr` is the CIDR to be used for default NAT network between workloads.\nSpecifying values for `cluster_cidr`, `service_cidr` and `cluster_dns_ip` are permanent and a subsequent change\nrequires re-initialisation of the applications. To clarify, system will destroy old `ix-applications` dataset\nand any data within it when any of the values for the above configuration change."
          },
          "service_cidr": {
            "_name_": "service_cidr",
            "title": "service_cidr",
            "type": "string",
            "description": "`service_cidr` is the CIDR to be used for kubernetes services which are an abstraction and refer to a\nlogically set of kubernetes pods.\n`cluster_dns_ip` is the IP of the DNS server running for the kubernetes cluster. It must be in the range\nof `service_cidr`.\nSpecifying values for `cluster_cidr`, `service_cidr` and `cluster_dns_ip` are permanent and a subsequent change\nrequires re-initialisation of the applications. To clarify, system will destroy old `ix-applications` dataset\nand any data within it when any of the values for the above configuration change."
          },
          "cluster_dns_ip": {
            "_name_": "cluster_dns_ip",
            "title": "cluster_dns_ip",
            "type": "string",
            "description": "`cluster_dns_ip` is the IP of the DNS server running for the kubernetes cluster. It must be in the range\nof `service_cidr`.\nSpecifying values for `cluster_cidr`, `service_cidr` and `cluster_dns_ip` are permanent and a subsequent change\nrequires re-initialisation of the applications. To clarify, system will destroy old `ix-applications` dataset\nand any data within it when any of the values for the above configuration change."
          },
          "node_ip": {
            "_name_": "node_ip",
            "title": "node_ip",
            "type": "string",
            "description": "`node_ip` is the IP address which the kubernetes cluster will assign to the TrueNAS node. It defaults to\n0.0.0.0 and the cluster in this case will automatically manage which IP address to use for managing traffic\nfor default NAT network."
          },
          "route_v4_interface": {
            "_name_": "route_v4_interface",
            "title": "route_v4_interface",
            "type": "string",
            "description": "If users want to restrict traffic over a certain gateway / interface, they can specify a default route\nfor the NAT traffic. `route_v4_interface` and `route_v4_gateway` will set a default route for the kubernetes\ncluster IPv4 traffic. Similarly `route_v6_interface` and 'route_v6_gateway` can be used to specify default\nroute for IPv6 traffic.",
            "nullable": true
          },
          "route_v4_gateway": {
            "_name_": "route_v4_gateway",
            "title": "route_v4_gateway",
            "type": "string",
            "description": "If users want to restrict traffic over a certain gateway / interface, they can specify a default route\nfor the NAT traffic. `route_v4_interface` and `route_v4_gateway` will set a default route for the kubernetes\ncluster IPv4 traffic. Similarly `route_v6_interface` and 'route_v6_gateway` can be used to specify default\nroute for IPv6 traffic.",
            "nullable": true
          },
          "route_v6_interface": {
            "_name_": "route_v6_interface",
            "title": "route_v6_interface",
            "type": "string",
            "description": "If users want to restrict traffic over a certain gateway / interface, they can specify a default route\nfor the NAT traffic. `route_v4_interface` and `route_v4_gateway` will set a default route for the kubernetes\ncluster IPv4 traffic. Similarly `route_v6_interface` and 'route_v6_gateway` can be used to specify default\nroute for IPv6 traffic.",
            "nullable": true
          },
          "route_v6_gateway": {
            "_name_": "route_v6_gateway",
            "title": "route_v6_gateway",
            "type": "string",
            "nullable": true
          },
          "migrate_applications": {
            "type": "boolean",
            "_name_": "migrate_applications",
            "title": "migrate_applications"
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force"
          },
          "migration_options": {
            "type": "object",
            "properties": {
              "passphrase": {
                "_name_": "passphrase",
                "title": "passphrase",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "migration_options",
            "title": "migration_options",
            "default": {},
            "_attrs_order_": [
              "passphrase"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "kubernetes_update",
        "title": "kubernetes_entry",
        "default": {},
        "_attrs_order_": [
          "servicelb",
          "configure_gpus",
          "validate_host_path",
          "passthrough_mode",
          "pool",
          "cluster_cidr",
          "service_cidr",
          "cluster_dns_ip",
          "node_ip",
          "route_v4_interface",
          "route_v4_gateway",
          "route_v6_interface",
          "route_v6_gateway",
          "migrate_applications",
          "force",
          "migration_options"
        ]
      },
      "kubernetes_backup_chart_releases_0": {
        "_name_": "backup_name",
        "title": "backup_name",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "kubernetes_delete_backup_0": {
        "_name_": "backup_name",
        "title": "backup_name",
        "type": "string"
      },
      "kubernetes_restore_backup_0": {
        "_name_": "backup_name",
        "title": "backup_name",
        "type": "string",
        "description": "Restore `backup_name` chart releases backup."
      },
      "kubernetes_restore_backup_1": {
        "type": "object",
        "properties": {
          "wait_for_csi": {
            "type": "boolean",
            "_name_": "wait_for_csi",
            "title": "wait_for_csi",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "wait_for_csi"
        ]
      },
      "kubernetes_restore_backup": {
        "type": "object",
        "properties": {
          "backup_name": {
            "$ref": "#/components/schemas/kubernetes_restore_backup_0"
          },
          "options": {
            "$ref": "#/components/schemas/kubernetes_restore_backup_1"
          }
        }
      },
      "ldap_update_0": {
        "type": "object",
        "properties": {
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "default": [],
            "type": "array",
            "items": {},
            "description": "`hostname` list of ip addresses or hostnames of LDAP servers with\nwhich to communicate in order of preference. Failover only occurs\nif the current LDAP server is unresponsive."
          },
          "basedn": {
            "_name_": "basedn",
            "title": "basedn",
            "type": "string",
            "description": "`basedn` specifies the default base DN to use when performing ldap\noperations. The base must be specified as a Distinguished Name in LDAP\nformat."
          },
          "binddn": {
            "_name_": "binddn",
            "title": "binddn",
            "type": "string",
            "description": "`binddn` specifies the default bind DN to use when performing ldap\noperations. The bind DN must be specified as a Distinguished Name in\nLDAP format.\n`kerberos_principal` kerberos principal to use for SASL GSSAPI\nauthentication to the remote server. If `kerberos_realm` is specified\nwithout a keytab, then the `binddn` and `bindpw` are used to\nperform to obtain the ticket necessary for GSSAPI authentication."
          },
          "bindpw": {
            "_name_": "bindpw",
            "title": "bindpw",
            "type": "string",
            "description": "`kerberos_principal` kerberos principal to use for SASL GSSAPI\nauthentication to the remote server. If `kerberos_realm` is specified\nwithout a keytab, then the `binddn` and `bindpw` are used to\nperform to obtain the ticket necessary for GSSAPI authentication."
          },
          "anonbind": {
            "type": "boolean",
            "_name_": "anonbind",
            "title": "anonbind",
            "default": false,
            "description": "`anonbind` use anonymous authentication."
          },
          "ssl": {
            "_name_": "ssl",
            "title": "ldap_ssl_choice",
            "default": "ON",
            "type": "string",
            "enum": [
              "OFF",
              "ON",
              "START_TLS"
            ],
            "description": "`ssl` establish SSL/TLS-protected connections to the LDAP server(s).\nGSSAPI signing is disabled on SSL/TLS-protected connections if\nkerberos authentication is used."
          },
          "certificate": {
            "type": "integer",
            "_name_": "certificate",
            "title": "certificate",
            "description": "`certificate` LDAPs client certificate to be used for certificate-\nbased authentication.",
            "nullable": true
          },
          "validate_certificates": {
            "type": "boolean",
            "_name_": "validate_certificates",
            "title": "validate_certificates",
            "default": true,
            "description": "`validate_certificates` specifies whether to perform checks on server\ncertificates in a TLS session. If enabled, TLS_REQCERT demand is set.\nThe server certificate is requested. If no certificate is provided or\nif a bad certificate is provided, the session is immediately terminated.\nIf disabled, TLS_REQCERT allow is set. The server certificate is\nrequested, but all errors are ignored."
          },
          "disable_freenas_cache": {
            "type": "boolean",
            "_name_": "disable_freenas_cache",
            "title": "disable_freenas_cache"
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 30,
            "description": "`timeout` specifies  a  timeout  (in  seconds) after which calls to\nsynchronous LDAP APIs will abort if no response is received."
          },
          "dns_timeout": {
            "type": "integer",
            "_name_": "dns_timeout",
            "title": "dns_timeout",
            "default": 5,
            "description": "`dns_timeout` specifies the timeout (in seconds) after which the\npoll(2)/select(2) following a connect(2) returns in case of no activity\nfor openldap. For nslcd this specifies the time limit (in seconds) to\nuse when connecting to the directory server. This directly impacts the\nlength of time that the LDAP service tries before failing over to\na secondary LDAP URI."
          },
          "kerberos_realm": {
            "type": "integer",
            "_name_": "kerberos_realm",
            "title": "kerberos_realm",
            "description": "`kerberos_realm` in which the server is located. This parameter is\nonly required for SASL GSSAPI authentication to the remote LDAP server.\n`kerberos_principal` kerberos principal to use for SASL GSSAPI\nauthentication to the remote server. If `kerberos_realm` is specified\nwithout a keytab, then the `binddn` and `bindpw` are used to\nperform to obtain the ticket necessary for GSSAPI authentication.",
            "nullable": true
          },
          "kerberos_principal": {
            "_name_": "kerberos_principal",
            "title": "kerberos_principal",
            "type": "string",
            "description": "`kerberos_principal` kerberos principal to use for SASL GSSAPI\nauthentication to the remote server. If `kerberos_realm` is specified\nwithout a keytab, then the `binddn` and `bindpw` are used to\nperform to obtain the ticket necessary for GSSAPI authentication."
          },
          "has_samba_schema": {
            "type": "boolean",
            "_name_": "has_samba_schema",
            "title": "has_samba_schema",
            "default": false
          },
          "auxiliary_parameters": {
            "_name_": "auxiliary_parameters",
            "title": "auxiliary_parameters",
            "default": false,
            "type": "string"
          },
          "schema": {
            "_name_": "schema",
            "title": "nss_info_ldap",
            "default": "RFC2307",
            "type": "string",
            "enum": [
              "RFC2307",
              "RFC2307BIS"
            ]
          },
          "enable": {
            "type": "boolean",
            "_name_": "enable",
            "title": "enable"
          }
        },
        "additionalProperties": false,
        "_name_": "ldap_update",
        "title": "ldap_update",
        "default": {},
        "_attrs_order_": [
          "hostname",
          "basedn",
          "binddn",
          "bindpw",
          "anonbind",
          "ssl",
          "certificate",
          "validate_certificates",
          "disable_freenas_cache",
          "timeout",
          "dns_timeout",
          "kerberos_realm",
          "kerberos_principal",
          "has_samba_schema",
          "auxiliary_parameters",
          "schema",
          "enable"
        ]
      },
      "mail_update_0": {
        "type": "object",
        "properties": {
          "fromemail": {
            "_name_": "fromemail",
            "title": "fromemail",
            "type": "string",
            "description": "`fromemail` is used as a sending address which the mail server will use for sending emails."
          },
          "fromname": {
            "_name_": "fromname",
            "title": "fromname",
            "type": "string"
          },
          "outgoingserver": {
            "_name_": "outgoingserver",
            "title": "outgoingserver",
            "type": "string",
            "description": "`outgoingserver` is the hostname or IP address of SMTP server used for sending an email."
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "security": {
            "_name_": "security",
            "title": "security",
            "type": "string",
            "enum": [
              "PLAIN",
              "SSL",
              "TLS"
            ],
            "description": "`security` is type of encryption desired."
          },
          "smtp": {
            "type": "boolean",
            "_name_": "smtp",
            "title": "smtp"
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "type": "string",
            "nullable": true
          },
          "pass": {
            "_name_": "pass",
            "title": "pass",
            "type": "string",
            "nullable": true
          },
          "oauth": {
            "type": "object",
            "properties": {
              "client_id": {
                "_name_": "client_id",
                "title": "client_id",
                "type": "string"
              },
              "client_secret": {
                "_name_": "client_secret",
                "title": "client_secret",
                "type": "string"
              },
              "refresh_token": {
                "_name_": "refresh_token",
                "title": "refresh_token",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "oauth",
            "title": "oauth",
            "default": {},
            "_attrs_order_": [
              "client_id",
              "client_secret",
              "refresh_token"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "mail_update",
        "title": "mail_entry",
        "default": {},
        "_attrs_order_": [
          "fromemail",
          "fromname",
          "outgoingserver",
          "port",
          "security",
          "smtp",
          "user",
          "pass",
          "oauth"
        ]
      },
      "mail_send_0": {
        "type": "object",
        "properties": {
          "subject": {
            "_name_": "subject",
            "title": "subject",
            "type": "string"
          },
          "text": {
            "_name_": "text",
            "title": "text",
            "type": "string",
            "description": "`text` will be formatted to HTML using Markdown and rendered using default E-Mail template."
          },
          "html": {
            "_name_": "html",
            "title": "html",
            "type": "string",
            "description": "You can put your own HTML using `html`. If `html` is null, no HTML MIME part will be added to E-Mail.",
            "nullable": true
          },
          "to": {
            "_name_": "to",
            "title": "to",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "email",
              "title": "email",
              "_required_": false,
              "type": "string"
            }
          },
          "cc": {
            "_name_": "cc",
            "title": "cc",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "email",
              "title": "email",
              "_required_": false,
              "type": "string"
            }
          },
          "interval": {
            "type": "integer",
            "_name_": "interval",
            "title": "interval",
            "nullable": true
          },
          "channel": {
            "_name_": "channel",
            "title": "channel",
            "type": "string",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "_name_": "timeout",
            "title": "timeout",
            "default": 300
          },
          "attachments": {
            "type": "boolean",
            "_name_": "attachments",
            "title": "attachments",
            "default": false,
            "description": "If `attachments` is true, a list compromised of the following dict is required\nvia HTTP upload:\n  - headers(list)\n    - name(str)\n    - value(str)\n    - params(dict)\n  - content (str)"
          },
          "queue": {
            "type": "boolean",
            "_name_": "queue",
            "title": "queue",
            "default": true
          },
          "extra_headers": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra_headers",
            "title": "extra_headers",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "mail_message",
        "title": "mail_message",
        "default": {},
        "_attrs_order_": [
          "subject",
          "text",
          "html",
          "to",
          "cc",
          "interval",
          "channel",
          "timeout",
          "attachments",
          "queue",
          "extra_headers"
        ]
      },
      "mail_send_1": {
        "type": "object",
        "properties": {
          "fromemail": {
            "_name_": "fromemail",
            "title": "fromemail",
            "type": "string"
          },
          "fromname": {
            "_name_": "fromname",
            "title": "fromname",
            "type": "string"
          },
          "outgoingserver": {
            "_name_": "outgoingserver",
            "title": "outgoingserver",
            "type": "string"
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "security": {
            "_name_": "security",
            "title": "security",
            "type": "string",
            "enum": [
              "PLAIN",
              "SSL",
              "TLS"
            ]
          },
          "smtp": {
            "type": "boolean",
            "_name_": "smtp",
            "title": "smtp"
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "type": "string",
            "nullable": true
          },
          "pass": {
            "_name_": "pass",
            "title": "pass",
            "type": "string",
            "nullable": true
          },
          "oauth": {
            "type": "object",
            "properties": {
              "client_id": {
                "_name_": "client_id",
                "title": "client_id",
                "type": "string"
              },
              "client_secret": {
                "_name_": "client_secret",
                "title": "client_secret",
                "type": "string"
              },
              "refresh_token": {
                "_name_": "refresh_token",
                "title": "refresh_token",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "oauth",
            "title": "oauth",
            "default": {},
            "_attrs_order_": [
              "client_id",
              "client_secret",
              "refresh_token"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "mail_update",
        "title": "mail_entry",
        "default": {},
        "_attrs_order_": [
          "fromemail",
          "fromname",
          "outgoingserver",
          "port",
          "security",
          "smtp",
          "user",
          "pass",
          "oauth"
        ]
      },
      "mail_send": {
        "type": "object",
        "properties": {
          "mail_message": {
            "$ref": "#/components/schemas/mail_send_0"
          },
          "mail_entry": {
            "$ref": "#/components/schemas/mail_send_1"
          }
        }
      },
      "network_configuration_update_0": {
        "type": "object",
        "properties": {
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string"
          },
          "domain": {
            "_name_": "domain",
            "title": "domain",
            "type": "string"
          },
          "ipv4gateway": {
            "_name_": "ipv4gateway",
            "title": "ipv4gateway",
            "type": "string",
            "description": "`ipv4gateway` if set is used instead of the default gateway provided by DHCP."
          },
          "ipv6gateway": {
            "_name_": "ipv6gateway",
            "title": "ipv6gateway",
            "type": "string"
          },
          "nameserver1": {
            "_name_": "nameserver1",
            "title": "nameserver1",
            "type": "string",
            "description": "`nameserver1` is primary DNS server."
          },
          "nameserver2": {
            "_name_": "nameserver2",
            "title": "nameserver2",
            "type": "string",
            "description": "`nameserver2` is secondary DNS server."
          },
          "nameserver3": {
            "_name_": "nameserver3",
            "title": "nameserver3",
            "type": "string",
            "description": "`nameserver3` is tertiary DNS server."
          },
          "httpproxy": {
            "_name_": "httpproxy",
            "title": "httpproxy",
            "type": "string",
            "description": "`httpproxy` attribute must be provided if a proxy is to be used for network operations."
          },
          "netwait_enabled": {
            "type": "boolean",
            "_name_": "netwait_enabled",
            "title": "netwait_enabled",
            "description": "`netwait_enabled` is a boolean attribute which when set indicates that network services will not start at\nboot unless they are able to ping the addresses listed in `netwait_ip` list."
          },
          "netwait_ip": {
            "_name_": "netwait_ip",
            "title": "netwait_ip",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "netwait_ip",
              "title": "netwait_ip",
              "_required_": false,
              "type": "string"
            },
            "description": "`netwait_enabled` is a boolean attribute which when set indicates that network services will not start at\nboot unless they are able to ping the addresses listed in `netwait_ip` list."
          },
          "hosts": {
            "_name_": "hosts",
            "title": "hosts",
            "type": "string"
          },
          "domains": {
            "_name_": "domains",
            "title": "domains",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "domain",
              "title": "domain",
              "_required_": false,
              "type": "string"
            }
          },
          "service_announcement": {
            "type": "object",
            "properties": {
              "netbios": {
                "type": "boolean",
                "_name_": "netbios",
                "title": "netbios"
              },
              "mdns": {
                "type": "boolean",
                "_name_": "mdns",
                "title": "mdns"
              },
              "wsd": {
                "type": "boolean",
                "_name_": "wsd",
                "title": "wsd"
              }
            },
            "additionalProperties": false,
            "_name_": "service_announcement",
            "title": "service_announcement",
            "default": {},
            "_attrs_order_": [
              "netbios",
              "mdns",
              "wsd"
            ]
          },
          "activity": {
            "type": "object",
            "properties": {
              "type": {
                "_name_": "type",
                "title": "type",
                "type": "string",
                "enum": [
                  "ALLOW",
                  "DENY"
                ]
              },
              "activities": {
                "_name_": "activities",
                "title": "activities",
                "default": [],
                "type": "array",
                "items": {
                  "_name_": "activity",
                  "title": "activity",
                  "_required_": false,
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "_name_": "activity",
            "title": "activity",
            "default": {},
            "_attrs_order_": [
              "type",
              "activities"
            ]
          },
          "hostname_b": {
            "_name_": "hostname_b",
            "title": "hostname_b",
            "type": "string",
            "nullable": true
          },
          "hostname_virtual": {
            "_name_": "hostname_virtual",
            "title": "hostname_virtual",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "global_configuration_update",
        "title": "network_configuration_entry",
        "default": {},
        "_attrs_order_": [
          "hostname",
          "domain",
          "ipv4gateway",
          "ipv6gateway",
          "nameserver1",
          "nameserver2",
          "nameserver3",
          "httpproxy",
          "netwait_enabled",
          "netwait_ip",
          "hosts",
          "domains",
          "service_announcement",
          "activity",
          "hostname_b",
          "hostname_virtual"
        ]
      },
      "nfs_update_0": {
        "type": "object",
        "properties": {
          "servers": {
            "type": "integer",
            "_name_": "servers",
            "title": "servers",
            "description": "`servers` represents number of servers to create."
          },
          "udp": {
            "type": "boolean",
            "_name_": "udp",
            "title": "udp"
          },
          "allow_nonroot": {
            "type": "boolean",
            "_name_": "allow_nonroot",
            "title": "allow_nonroot",
            "description": "When `allow_nonroot` is set, it allows non-root mount requests to be served."
          },
          "v4": {
            "type": "boolean",
            "_name_": "v4",
            "title": "v4",
            "description": "`v4` when set means that we switch from NFSv3 to NFSv4."
          },
          "v4_v3owner": {
            "type": "boolean",
            "_name_": "v4_v3owner",
            "title": "v4_v3owner",
            "description": "`v4_v3owner` when set means that system will use NFSv3 ownership model for NFSv4."
          },
          "v4_krb": {
            "type": "boolean",
            "_name_": "v4_krb",
            "title": "v4_krb",
            "description": "`v4_krb` will force NFS shares to fail if the Kerberos ticket is unavailable."
          },
          "v4_domain": {
            "_name_": "v4_domain",
            "title": "v4_domain",
            "type": "string",
            "description": "`v4_domain` overrides the default DNS domain name for NFSv4."
          },
          "bindip": {
            "_name_": "bindip",
            "title": "bindip",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "ip",
              "title": "ip",
              "_required_": false,
              "type": "string"
            },
            "description": "`bindip` is a list of IP's on which NFS will listen for requests. When it is unset/empty, NFS listens on\nall available addresses."
          },
          "mountd_port": {
            "type": "integer",
            "_name_": "mountd_port",
            "title": "mountd_port",
            "description": "`mountd_port` specifies the port mountd(8) binds to.",
            "nullable": true
          },
          "rpcstatd_port": {
            "type": "integer",
            "_name_": "rpcstatd_port",
            "title": "rpcstatd_port",
            "description": "`rpcstatd_port` specifies the port rpc.statd(8) binds to.",
            "nullable": true
          },
          "rpclockd_port": {
            "type": "integer",
            "_name_": "rpclockd_port",
            "title": "rpclockd_port",
            "description": "`rpclockd_port` specifies the port rpclockd_port(8) binds to.",
            "nullable": true
          },
          "mountd_log": {
            "type": "boolean",
            "_name_": "mountd_log",
            "title": "mountd_log"
          },
          "statd_lockd_log": {
            "type": "boolean",
            "_name_": "statd_lockd_log",
            "title": "statd_lockd_log"
          },
          "userd_manage_gids": {
            "type": "boolean",
            "_name_": "userd_manage_gids",
            "title": "userd_manage_gids"
          }
        },
        "additionalProperties": false,
        "_name_": "nfs_update",
        "title": "nfs_entry",
        "default": {},
        "_attrs_order_": [
          "servers",
          "udp",
          "allow_nonroot",
          "v4",
          "v4_v3owner",
          "v4_krb",
          "v4_domain",
          "bindip",
          "mountd_port",
          "rpcstatd_port",
          "rpclockd_port",
          "mountd_log",
          "statd_lockd_log",
          "userd_manage_gids"
        ]
      },
      "nfs_add_principal_0": {
        "type": "object",
        "properties": {
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "kerberos_username_password",
        "title": "kerberos_username_password",
        "default": {},
        "_attrs_order_": [
          "username",
          "password"
        ]
      },
      "openvpn_client_update_0": {
        "type": "object",
        "properties": {
          "nobind": {
            "type": "boolean",
            "_name_": "nobind",
            "title": "nobind"
          },
          "tls_crypt_auth_enabled": {
            "type": "boolean",
            "_name_": "tls_crypt_auth_enabled",
            "title": "tls_crypt_auth_enabled"
          },
          "client_certificate": {
            "type": "integer",
            "_name_": "client_certificate",
            "title": "client_certificate",
            "nullable": true
          },
          "root_ca": {
            "type": "integer",
            "_name_": "root_ca",
            "title": "root_ca",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "additional_parameters": {
            "_name_": "additional_parameters",
            "title": "additional_parameters",
            "type": "string"
          },
          "authentication_algorithm": {
            "_name_": "authentication_algorithm",
            "title": "authentication_algorithm",
            "type": "string",
            "nullable": true
          },
          "cipher": {
            "_name_": "cipher",
            "title": "cipher",
            "type": "string",
            "nullable": true
          },
          "compression": {
            "_name_": "compression",
            "title": "compression",
            "type": "string",
            "enum": [
              "LZO",
              "LZ4"
            ],
            "nullable": true
          },
          "device_type": {
            "_name_": "device_type",
            "title": "device_type",
            "type": "string",
            "enum": [
              "TUN",
              "TAP"
            ]
          },
          "protocol": {
            "_name_": "protocol",
            "title": "protocol",
            "type": "string",
            "enum": [
              "UDP",
              "UDP4",
              "UDP6",
              "TCP",
              "TCP4",
              "TCP6"
            ]
          },
          "remote": {
            "_name_": "remote",
            "title": "remote",
            "type": "string",
            "description": "`remote` can be a valid ip address / domain which openvpn will try to connect to."
          },
          "tls_crypt_auth": {
            "_name_": "tls_crypt_auth",
            "title": "tls_crypt_auth",
            "type": "string",
            "nullable": true
          },
          "remove_certificates": {
            "type": "boolean",
            "_name_": "remove_certificates",
            "title": "remove_certificates",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "openvpn_client_update",
        "title": "openvpn_client_entry",
        "default": {},
        "_attrs_order_": [
          "nobind",
          "tls_crypt_auth_enabled",
          "client_certificate",
          "root_ca",
          "port",
          "additional_parameters",
          "authentication_algorithm",
          "cipher",
          "compression",
          "device_type",
          "protocol",
          "remote",
          "tls_crypt_auth",
          "remove_certificates"
        ]
      },
      "openvpn_server_update_0": {
        "type": "object",
        "properties": {
          "tls_crypt_auth_enabled": {
            "type": "boolean",
            "_name_": "tls_crypt_auth_enabled",
            "title": "tls_crypt_auth_enabled"
          },
          "netmask": {
            "type": "integer",
            "_name_": "netmask",
            "title": "netmask"
          },
          "server_certificate": {
            "type": "integer",
            "_name_": "server_certificate",
            "title": "server_certificate",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "root_ca": {
            "type": "integer",
            "_name_": "root_ca",
            "title": "root_ca",
            "nullable": true
          },
          "server": {
            "_name_": "server",
            "title": "server",
            "type": "string"
          },
          "additional_parameters": {
            "_name_": "additional_parameters",
            "title": "additional_parameters",
            "type": "string"
          },
          "authentication_algorithm": {
            "_name_": "authentication_algorithm",
            "title": "authentication_algorithm",
            "type": "string",
            "nullable": true
          },
          "cipher": {
            "_name_": "cipher",
            "title": "cipher",
            "type": "string",
            "nullable": true
          },
          "compression": {
            "_name_": "compression",
            "title": "compression",
            "type": "string",
            "enum": [
              "LZO",
              "LZ4"
            ],
            "nullable": true
          },
          "device_type": {
            "_name_": "device_type",
            "title": "device_type",
            "type": "string",
            "enum": [
              "TUN",
              "TAP"
            ]
          },
          "protocol": {
            "_name_": "protocol",
            "title": "protocol",
            "type": "string",
            "enum": [
              "UDP",
              "UDP4",
              "UDP6",
              "TCP",
              "TCP4",
              "TCP6"
            ]
          },
          "tls_crypt_auth": {
            "_name_": "tls_crypt_auth",
            "title": "tls_crypt_auth",
            "type": "string",
            "nullable": true
          },
          "topology": {
            "_name_": "topology",
            "title": "topology",
            "type": "string",
            "enum": [
              "NET30",
              "P2P",
              "SUBNET"
            ],
            "nullable": true
          },
          "remove_certificates": {
            "type": "boolean",
            "_name_": "remove_certificates",
            "title": "remove_certificates",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "openvpn_server_update",
        "title": "openvpn_server_entry",
        "default": {},
        "_attrs_order_": [
          "tls_crypt_auth_enabled",
          "netmask",
          "server_certificate",
          "port",
          "root_ca",
          "server",
          "additional_parameters",
          "authentication_algorithm",
          "cipher",
          "compression",
          "device_type",
          "protocol",
          "tls_crypt_auth",
          "topology",
          "remove_certificates"
        ]
      },
      "openvpn_server_client_configuration_generation_0": {
        "type": "integer",
        "_name_": "client_certificate_id",
        "title": "client_certificate_id",
        "description": "`client_certificate_id` should be a valid certificate issued for use with OpenVPN client service."
      },
      "openvpn_server_client_configuration_generation_1": {
        "_name_": "server_address",
        "title": "server_address",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "openvpn_server_client_configuration_generation": {
        "type": "object",
        "properties": {
          "client_certificate_id": {
            "$ref": "#/components/schemas/openvpn_server_client_configuration_generation_0"
          },
          "server_address": {
            "$ref": "#/components/schemas/openvpn_server_client_configuration_generation_1"
          }
        }
      },
      "pool_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\n`encryption_options` specifies configuration for encryption of root dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for root dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption."
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false,
            "description": "`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool."
          },
          "deduplication": {
            "_name_": "deduplication",
            "title": "deduplication",
            "default": null,
            "type": "string",
            "enum": [
              null,
              "ON",
              "VERIFY",
              "OFF"
            ],
            "description": "`deduplication` when set to ON or VERIFY makes sure that no block of data is duplicated in the pool. When\nVERIFY is specified, if two blocks have similar signatures, byte to byte comparison is performed to ensure that\nthe blocks are identical. This should be used in special circumstances as it carries a significant overhead.",
            "nullable": true
          },
          "checksum": {
            "_name_": "checksum",
            "title": "checksum",
            "default": null,
            "type": "string",
            "enum": [
              null,
              "ON",
              "OFF",
              "FLETCHER2",
              "FLETCHER4",
              "SHA256",
              "SHA512",
              "SKEIN",
              "EDONR"
            ],
            "nullable": true
          },
          "encryption_options": {
            "type": "object",
            "properties": {
              "generate_key": {
                "type": "boolean",
                "_name_": "generate_key",
                "title": "generate_key",
                "default": false
              },
              "pbkdf2iters": {
                "type": "integer",
                "_name_": "pbkdf2iters",
                "title": "pbkdf2iters",
                "default": 350000
              },
              "algorithm": {
                "_name_": "algorithm",
                "title": "algorithm",
                "default": "AES-256-GCM",
                "type": "string",
                "enum": [
                  "AES-128-CCM",
                  "AES-192-CCM",
                  "AES-256-CCM",
                  "AES-128-GCM",
                  "AES-192-GCM",
                  "AES-256-GCM"
                ]
              },
              "passphrase": {
                "_name_": "passphrase",
                "title": "passphrase",
                "default": null,
                "type": "string",
                "nullable": true
              },
              "key": {
                "_name_": "key",
                "title": "key",
                "default": null,
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "_name_": "encryption_options",
            "title": "encryption_options",
            "default": {},
            "_attrs_order_": [
              "generate_key",
              "pbkdf2iters",
              "algorithm",
              "passphrase",
              "key"
            ],
            "description": "`encryption_options` specifies configuration for encryption of root dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for root dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption."
          },
          "topology": {
            "type": "object",
            "properties": {
              "data": {
                "_name_": "data",
                "title": "data",
                "default": [],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "_name_": "type",
                      "title": "type",
                      "_required_": true,
                      "type": "string",
                      "enum": [
                        "RAIDZ1",
                        "RAIDZ2",
                        "RAIDZ3",
                        "MIRROR",
                        "STRIPE"
                      ]
                    },
                    "disks": {
                      "_name_": "disks",
                      "title": "disks",
                      "default": [],
                      "_required_": true,
                      "type": "array",
                      "items": [
                        {
                          "_name_": "disk",
                          "title": "disk",
                          "_required_": false,
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "datavdevs",
                  "title": "datavdevs",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "type",
                    "disks"
                  ]
                }
              },
              "special": {
                "_name_": "special",
                "title": "special",
                "default": [],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "_name_": "type",
                      "title": "type",
                      "_required_": true,
                      "type": "string",
                      "enum": [
                        "MIRROR",
                        "STRIPE"
                      ]
                    },
                    "disks": {
                      "_name_": "disks",
                      "title": "disks",
                      "default": [],
                      "_required_": true,
                      "type": "array",
                      "items": [
                        {
                          "_name_": "disk",
                          "title": "disk",
                          "_required_": false,
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "specialvdevs",
                  "title": "specialvdevs",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "type",
                    "disks"
                  ]
                }
              },
              "dedup": {
                "_name_": "dedup",
                "title": "dedup",
                "default": [],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "_name_": "type",
                      "title": "type",
                      "_required_": true,
                      "type": "string",
                      "enum": [
                        "MIRROR",
                        "STRIPE"
                      ]
                    },
                    "disks": {
                      "_name_": "disks",
                      "title": "disks",
                      "default": [],
                      "_required_": true,
                      "type": "array",
                      "items": [
                        {
                          "_name_": "disk",
                          "title": "disk",
                          "_required_": false,
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "dedupvdevs",
                  "title": "dedupvdevs",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "type",
                    "disks"
                  ]
                }
              },
              "cache": {
                "_name_": "cache",
                "title": "cache",
                "default": [],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "_name_": "type",
                      "title": "type",
                      "_required_": true,
                      "type": "string",
                      "enum": [
                        "STRIPE"
                      ]
                    },
                    "disks": {
                      "_name_": "disks",
                      "title": "disks",
                      "default": [],
                      "_required_": true,
                      "type": "array",
                      "items": [
                        {
                          "_name_": "disk",
                          "title": "disk",
                          "_required_": false,
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "cachevdevs",
                  "title": "cachevdevs",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "type",
                    "disks"
                  ]
                }
              },
              "log": {
                "_name_": "log",
                "title": "log",
                "default": [],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "_name_": "type",
                      "title": "type",
                      "_required_": true,
                      "type": "string",
                      "enum": [
                        "STRIPE",
                        "MIRROR"
                      ]
                    },
                    "disks": {
                      "_name_": "disks",
                      "title": "disks",
                      "default": [],
                      "_required_": true,
                      "type": "array",
                      "items": [
                        {
                          "_name_": "disk",
                          "title": "disk",
                          "_required_": false,
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "logvdevs",
                  "title": "logvdevs",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "type",
                    "disks"
                  ]
                }
              },
              "spares": {
                "_name_": "spares",
                "title": "spares",
                "default": [],
                "type": "array",
                "items": {
                  "_name_": "disk",
                  "title": "disk",
                  "_required_": false,
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "_name_": "topology",
            "title": "topology",
            "default": {},
            "_attrs_order_": [
              "data",
              "special",
              "dedup",
              "cache",
              "log",
              "spares"
            ],
            "description": "`topology` is a object which requires at least one `data` entry.\nAll of `data` entries (vdevs) require to be of the same type.\nExample of `topology`:"
          },
          "allow_duplicate_serials": {
            "type": "boolean",
            "_name_": "allow_duplicate_serials",
            "title": "allow_duplicate_serials",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "pool_create",
        "title": "pool_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "encryption",
          "deduplication",
          "checksum",
          "encryption_options",
          "topology",
          "allow_duplicate_serials"
        ]
      },
      "pool_attach_0": {
        "type": "integer",
        "_name_": "oid",
        "title": "oid",
        "description": "For TrueNAS Core/Enterprise platform, if the `oid` pool is passphrase GELI encrypted, `passphrase`\nmust be specified for this operation to succeed."
      },
      "pool_attach_1": {
        "type": "object",
        "properties": {
          "target_vdev": {
            "_name_": "target_vdev",
            "title": "target_vdev",
            "type": "string"
          },
          "new_disk": {
            "_name_": "new_disk",
            "title": "new_disk",
            "type": "string"
          },
          "allow_duplicate_serials": {
            "type": "boolean",
            "_name_": "allow_duplicate_serials",
            "title": "allow_duplicate_serials",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "pool_attach",
        "title": "pool_attach",
        "default": {},
        "_attrs_order_": [
          "target_vdev",
          "new_disk",
          "allow_duplicate_serials"
        ]
      },
      "pool_attach": {
        "type": "object",
        "properties": {
          "oid": {
            "$ref": "#/components/schemas/pool_attach_0"
          },
          "pool_attach": {
            "$ref": "#/components/schemas/pool_attach_1"
          }
        }
      },
      "pool_filesystem_choices_0": {
        "_name_": "types",
        "title": "types",
        "default": [
          "FILESYSTEM",
          "VOLUME"
        ],
        "type": "array",
        "items": {
          "_name_": "type",
          "title": "type",
          "_required_": false,
          "type": "string",
          "enum": [
            "FILESYSTEM",
            "VOLUME"
          ]
        }
      },
      "pool_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "pool_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "pool_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/pool_get_instance_1"
          }
        }
      },
      "pool_get_instance_by_name_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "pool_import_disk_0": {
        "_name_": "device",
        "title": "device",
        "type": "string"
      },
      "pool_import_disk_1": {
        "_name_": "fs_type",
        "title": "fs_type",
        "type": "string"
      },
      "pool_import_disk_2": {
        "type": "object",
        "properties": {},
        "additionalProperties": true,
        "_name_": "fs_options",
        "title": "fs_options",
        "default": {},
        "_attrs_order_": []
      },
      "pool_import_disk_3": {
        "_name_": "dst_path",
        "title": "dst_path",
        "type": "string"
      },
      "pool_import_disk": {
        "type": "object",
        "properties": {
          "device": {
            "$ref": "#/components/schemas/pool_import_disk_0"
          },
          "fs_type": {
            "$ref": "#/components/schemas/pool_import_disk_1"
          },
          "fs_options": {
            "$ref": "#/components/schemas/pool_import_disk_2"
          },
          "dst_path": {
            "$ref": "#/components/schemas/pool_import_disk_3"
          }
        }
      },
      "pool_import_disk_autodetect_fs_type_0": {
        "_name_": "device",
        "title": "device",
        "type": "string"
      },
      "pool_import_pool_0": {
        "type": "object",
        "properties": {
          "guid": {
            "_name_": "guid",
            "title": "guid",
            "type": "string"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "If a `name` is specified the pool will be imported using that new name."
          },
          "passphrase": {
            "_name_": "passphrase",
            "title": "passphrase",
            "type": "string",
            "description": "`passphrase` DEPRECATED. GELI not supported on SCALE."
          },
          "enable_attachments": {
            "type": "boolean",
            "_name_": "enable_attachments",
            "title": "enable_attachments",
            "description": "If `enable_attachments` is set to true, attachments that were disabled during pool export will be\nre-enabled."
          }
        },
        "additionalProperties": false,
        "_name_": "pool_import",
        "title": "pool_import",
        "default": {},
        "_attrs_order_": [
          "guid",
          "name",
          "passphrase",
          "enable_attachments"
        ]
      },
      "pool_dataset_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\nThere are 2 cases where ZFS encryption is not allowed for a dataset:\n1) Pool in question is GELI encrypted.\n2) If the parent dataset is encrypted with a passphrase and `name` is being created\n   with a key for encrypting the dataset.\n`encryption_options` specifies configuration for encryption of dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption."
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "default": "FILESYSTEM",
            "type": "string",
            "enum": [
              "FILESYSTEM",
              "VOLUME"
            ]
          },
          "volsize": {
            "type": "integer",
            "_name_": "volsize",
            "title": "volsize",
            "description": "`volsize` is required for type=VOLUME and is supposed to be a multiple of the block size."
          },
          "volblocksize": {
            "_name_": "volblocksize",
            "title": "volblocksize",
            "type": "string",
            "enum": [
              "512",
              "512B",
              "1K",
              "2K",
              "4K",
              "8K",
              "16K",
              "32K",
              "64K",
              "128K"
            ],
            "description": "`sparse` and `volblocksize` are only used for type=VOLUME."
          },
          "sparse": {
            "type": "boolean",
            "_name_": "sparse",
            "title": "sparse",
            "description": "`sparse` and `volblocksize` are only used for type=VOLUME."
          },
          "force_size": {
            "type": "boolean",
            "_name_": "force_size",
            "title": "force_size"
          },
          "comments": {
            "_name_": "comments",
            "title": "comments",
            "nullable": false,
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "sync": {
            "_name_": "sync",
            "title": "sync",
            "enum": [
              "STANDARD",
              "ALWAYS",
              "DISABLED",
              "INHERIT"
            ],
            "nullable": false
          },
          "snapdev": {
            "_name_": "snapdev",
            "title": "snapdev",
            "enum": [
              "HIDDEN",
              "VISIBLE",
              "INHERIT"
            ],
            "nullable": false
          },
          "compression": {
            "_name_": "compression",
            "title": "compression",
            "enum": [
              "OFF",
              "LZ4",
              "GZIP",
              "GZIP-1",
              "GZIP-9",
              "ZSTD",
              "ZSTD-FAST",
              "ZLE",
              "LZJB",
              "ZSTD-1",
              "ZSTD-2",
              "ZSTD-3",
              "ZSTD-4",
              "ZSTD-5",
              "ZSTD-6",
              "ZSTD-7",
              "ZSTD-8",
              "ZSTD-9",
              "ZSTD-10",
              "ZSTD-11",
              "ZSTD-12",
              "ZSTD-13",
              "ZSTD-14",
              "ZSTD-15",
              "ZSTD-16",
              "ZSTD-17",
              "ZSTD-18",
              "ZSTD-19",
              "ZSTD-FAST-1",
              "ZSTD-FAST-2",
              "ZSTD-FAST-3",
              "ZSTD-FAST-4",
              "ZSTD-FAST-5",
              "ZSTD-FAST-6",
              "ZSTD-FAST-7",
              "ZSTD-FAST-8",
              "ZSTD-FAST-9",
              "ZSTD-FAST-10",
              "ZSTD-FAST-20",
              "ZSTD-FAST-30",
              "ZSTD-FAST-40",
              "ZSTD-FAST-50",
              "ZSTD-FAST-60",
              "ZSTD-FAST-70",
              "ZSTD-FAST-80",
              "ZSTD-FAST-90",
              "ZSTD-FAST-100",
              "ZSTD-FAST-500",
              "ZSTD-FAST-1000",
              "INHERIT"
            ],
            "nullable": false
          },
          "atime": {
            "_name_": "atime",
            "title": "atime",
            "enum": [
              "ON",
              "OFF",
              "INHERIT"
            ],
            "nullable": false
          },
          "exec": {
            "_name_": "exec",
            "title": "exec",
            "enum": [
              "ON",
              "OFF",
              "INHERIT"
            ],
            "nullable": false
          },
          "managedby": {
            "_name_": "managedby",
            "title": "managedby",
            "nullable": false,
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "quota": {
            "type": "integer",
            "_name_": "quota",
            "title": "quota",
            "nullable": true
          },
          "quota_warning": {
            "_name_": "quota_warning",
            "title": "quota_warning",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "quota_critical": {
            "_name_": "quota_critical",
            "title": "quota_critical",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "refquota": {
            "type": "integer",
            "_name_": "refquota",
            "title": "refquota",
            "nullable": true
          },
          "refquota_warning": {
            "_name_": "refquota_warning",
            "title": "refquota_warning",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "refquota_critical": {
            "_name_": "refquota_critical",
            "title": "refquota_critical",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "reservation": {
            "type": "integer",
            "_name_": "reservation",
            "title": "reservation"
          },
          "refreservation": {
            "type": "integer",
            "_name_": "refreservation",
            "title": "refreservation"
          },
          "special_small_block_size": {
            "_name_": "special_small_block_size",
            "title": "special_small_block_size",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "copies": {
            "_name_": "copies",
            "title": "copies",
            "nullable": false,
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "snapdir": {
            "_name_": "snapdir",
            "title": "snapdir",
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "INHERIT"
            ],
            "nullable": false
          },
          "deduplication": {
            "_name_": "deduplication",
            "title": "deduplication",
            "enum": [
              "ON",
              "VERIFY",
              "OFF",
              "INHERIT"
            ],
            "nullable": false
          },
          "checksum": {
            "_name_": "checksum",
            "title": "checksum",
            "enum": [
              "ON",
              "OFF",
              "FLETCHER2",
              "FLETCHER4",
              "SHA256",
              "SHA512",
              "SKEIN",
              "EDONR",
              "INHERIT"
            ],
            "nullable": false
          },
          "readonly": {
            "_name_": "readonly",
            "title": "readonly",
            "enum": [
              "ON",
              "OFF",
              "INHERIT"
            ],
            "nullable": false
          },
          "recordsize": {
            "_name_": "recordsize",
            "title": "recordsize",
            "nullable": false,
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "INHERIT"
                ]
              }
            ]
          },
          "casesensitivity": {
            "_name_": "casesensitivity",
            "title": "casesensitivity",
            "enum": [
              "SENSITIVE",
              "INSENSITIVE",
              "INHERIT"
            ],
            "nullable": false
          },
          "aclmode": {
            "_name_": "aclmode",
            "title": "aclmode",
            "enum": [
              "PASSTHROUGH",
              "RESTRICTED",
              "DISCARD",
              "INHERIT"
            ],
            "nullable": false
          },
          "acltype": {
            "_name_": "acltype",
            "title": "acltype",
            "enum": [
              "OFF",
              "NFSV4",
              "POSIX",
              "INHERIT"
            ],
            "nullable": false
          },
          "share_type": {
            "_name_": "share_type",
            "title": "share_type",
            "default": "GENERIC",
            "type": "string",
            "enum": [
              "GENERIC",
              "SMB"
            ]
          },
          "xattr": {
            "_name_": "xattr",
            "title": "xattr",
            "default": "SA",
            "enum": [
              "ON",
              "SA",
              "INHERIT"
            ],
            "nullable": false
          },
          "encryption_options": {
            "type": "object",
            "properties": {
              "generate_key": {
                "type": "boolean",
                "_name_": "generate_key",
                "title": "generate_key",
                "default": false
              },
              "pbkdf2iters": {
                "type": "integer",
                "_name_": "pbkdf2iters",
                "title": "pbkdf2iters",
                "default": 350000
              },
              "algorithm": {
                "_name_": "algorithm",
                "title": "algorithm",
                "default": "AES-256-GCM",
                "type": "string",
                "enum": [
                  "AES-128-CCM",
                  "AES-192-CCM",
                  "AES-256-CCM",
                  "AES-128-GCM",
                  "AES-192-GCM",
                  "AES-256-GCM"
                ]
              },
              "passphrase": {
                "_name_": "passphrase",
                "title": "passphrase",
                "default": null,
                "type": "string",
                "nullable": true
              },
              "key": {
                "_name_": "key",
                "title": "key",
                "default": null,
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "_name_": "encryption_options",
            "title": "encryption_options",
            "default": {},
            "_attrs_order_": [
              "generate_key",
              "pbkdf2iters",
              "algorithm",
              "passphrase",
              "key"
            ],
            "description": "`encryption_options` specifies configuration for encryption of dataset for `name` pool.\n`encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase\nas a key.\nOtherwise a hex encoded key can be specified by providing `encryption_options.key`.\n`encryption_options.generate_key` when enabled automatically generates the key to be used\nfor dataset encryption."
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false,
            "description": "`encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.\nThere are 2 cases where ZFS encryption is not allowed for a dataset:\n1) Pool in question is GELI encrypted.\n2) If the parent dataset is encrypted with a passphrase and `name` is being created\n   with a key for encrypting the dataset."
          },
          "inherit_encryption": {
            "type": "boolean",
            "_name_": "inherit_encryption",
            "title": "inherit_encryption",
            "default": true
          },
          "user_properties": {
            "_name_": "user_properties",
            "title": "user_properties",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "_name_": "key",
                  "title": "key",
                  "_required_": true,
                  "type": "string"
                },
                "value": {
                  "_name_": "value",
                  "title": "value",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "user_property",
              "title": "user_property",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "key",
                "value"
              ]
            }
          },
          "create_ancestors": {
            "type": "boolean",
            "_name_": "create_ancestors",
            "title": "create_ancestors",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "pool_dataset_create",
        "title": "pool_dataset_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "type",
          "volsize",
          "volblocksize",
          "sparse",
          "force_size",
          "comments",
          "sync",
          "snapdev",
          "compression",
          "atime",
          "exec",
          "managedby",
          "quota",
          "quota_warning",
          "quota_critical",
          "refquota",
          "refquota_warning",
          "refquota_critical",
          "reservation",
          "refreservation",
          "special_small_block_size",
          "copies",
          "snapdir",
          "deduplication",
          "checksum",
          "readonly",
          "recordsize",
          "casesensitivity",
          "aclmode",
          "acltype",
          "share_type",
          "xattr",
          "encryption_options",
          "encryption",
          "inherit_encryption",
          "user_properties",
          "create_ancestors"
        ]
      },
      "pool_dataset_change_key_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Change encryption properties for `id` encrypted dataset."
      },
      "pool_dataset_change_key_1": {
        "type": "object",
        "properties": {
          "generate_key": {
            "type": "boolean",
            "_name_": "generate_key",
            "title": "generate_key",
            "default": false
          },
          "key_file": {
            "type": "boolean",
            "_name_": "key_file",
            "title": "key_file",
            "default": false
          },
          "pbkdf2iters": {
            "type": "integer",
            "_name_": "pbkdf2iters",
            "title": "pbkdf2iters",
            "default": 350000
          },
          "passphrase": {
            "_name_": "passphrase",
            "title": "passphrase",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "key": {
            "_name_": "key",
            "title": "key",
            "default": null,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "change_key_options",
        "title": "change_key_options",
        "default": {},
        "_attrs_order_": [
          "generate_key",
          "key_file",
          "pbkdf2iters",
          "passphrase",
          "key"
        ]
      },
      "pool_dataset_change_key": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_change_key_0"
          },
          "change_key_options": {
            "$ref": "#/components/schemas/pool_dataset_change_key_1"
          }
        }
      },
      "pool_dataset_destroy_snapshots_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "pool_dataset_destroy_snapshots_1": {
        "type": "object",
        "properties": {
          "all": {
            "type": "boolean",
            "_name_": "all",
            "title": "all",
            "default": true
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false
          },
          "snapshots": {
            "_name_": "snapshots",
            "title": "snapshots",
            "default": [],
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "start": {
                      "_name_": "start",
                      "title": "start",
                      "_required_": false,
                      "type": "string"
                    },
                    "end": {
                      "_name_": "end",
                      "title": "end",
                      "_required_": false,
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "snapshot_spec",
                  "title": "snapshot_spec",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "start",
                    "end"
                  ]
                },
                {
                  "_name_": "snapshot_name",
                  "title": "snapshot_name",
                  "_required_": false,
                  "type": "string"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "snapshots",
        "title": "snapshots",
        "default": {},
        "_attrs_order_": [
          "all",
          "recursive",
          "snapshots"
        ]
      },
      "pool_dataset_destroy_snapshots": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/pool_dataset_destroy_snapshots_0"
          },
          "snapshots": {
            "$ref": "#/components/schemas/pool_dataset_destroy_snapshots_1"
          }
        }
      },
      "pool_dataset_encryption_summary_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Retrieve summary of all encrypted roots under `id`.\nIt should be noted that there are 2 keys which show if a recursive unlock operation is\ndone for `id`, which dataset will be unlocked and if not why it won't be unlocked. The keys\nnamely are \"unlock_successful\" and \"unlock_error\". The former is a boolean value showing if unlock\nwould succeed/fail. The latter is description why it failed if it failed."
      },
      "pool_dataset_encryption_summary_1": {
        "type": "object",
        "properties": {
          "key_file": {
            "type": "boolean",
            "_name_": "key_file",
            "title": "key_file",
            "default": false
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          },
          "datasets": {
            "_name_": "datasets",
            "title": "datasets",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "boolean",
                  "_name_": "force",
                  "title": "force",
                  "default": false,
                  "_required_": true
                },
                "name": {
                  "_name_": "name",
                  "title": "name",
                  "_required_": true,
                  "type": "string"
                },
                "key": {
                  "_name_": "key",
                  "title": "key",
                  "_required_": false,
                  "type": "string"
                },
                "passphrase": {
                  "_name_": "passphrase",
                  "title": "passphrase",
                  "_required_": false,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "dataset",
              "title": "dataset",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "force",
                "name",
                "key",
                "passphrase"
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "encryption_root_summary_options",
        "title": "encryption_root_summary_options",
        "default": {},
        "_attrs_order_": [
          "key_file",
          "force",
          "datasets"
        ]
      },
      "pool_dataset_encryption_summary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_encryption_summary_0"
          },
          "encryption_root_summary_options": {
            "$ref": "#/components/schemas/pool_dataset_encryption_summary_1"
          }
        }
      },
      "pool_dataset_export_key_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Export own encryption key for dataset `id`. If `download` is `true`, key will be downloaded in a json file\nwhere the same file can be used to unlock the dataset, otherwise it will be returned as string."
      },
      "pool_dataset_export_key_1": {
        "type": "boolean",
        "_name_": "download",
        "title": "download",
        "default": false,
        "description": "Export own encryption key for dataset `id`. If `download` is `true`, key will be downloaded in a json file\nwhere the same file can be used to unlock the dataset, otherwise it will be returned as string."
      },
      "pool_dataset_export_key": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_export_key_0"
          },
          "download": {
            "$ref": "#/components/schemas/pool_dataset_export_key_1"
          }
        }
      },
      "pool_dataset_export_keys_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Export keys for `id` and its children which are stored in the system. The exported file is a JSON file\nwhich has a dictionary containing dataset names as keys and their keys as the value."
      },
      "pool_dataset_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "pool_dataset_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "pool_dataset_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/pool_dataset_get_instance_1"
          }
        }
      },
      "pool_dataset_inherit_parent_encryption_properties_0": {
        "_name_": "id",
        "title": "id",
        "type": "string"
      },
      "pool_dataset_lock_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Locks `id` dataset. It will unmount the dataset and its children before locking."
      },
      "pool_dataset_lock_1": {
        "type": "object",
        "properties": {
          "force_umount": {
            "type": "boolean",
            "_name_": "force_umount",
            "title": "force_umount",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "lock_options",
        "title": "lock_options",
        "default": {},
        "_attrs_order_": [
          "force_umount"
        ]
      },
      "pool_dataset_lock": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_lock_0"
          },
          "lock_options": {
            "$ref": "#/components/schemas/pool_dataset_lock_1"
          }
        }
      },
      "pool_dataset_mountpoint_0": {
        "_name_": "dataset",
        "title": "dataset",
        "type": "string"
      },
      "pool_dataset_mountpoint_1": {
        "type": "boolean",
        "_name_": "raise",
        "title": "raise",
        "default": true
      },
      "pool_dataset_mountpoint": {
        "type": "object",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/pool_dataset_mountpoint_0"
          },
          "raise": {
            "$ref": "#/components/schemas/pool_dataset_mountpoint_1"
          }
        }
      },
      "pool_dataset_recommended_zvol_blocksize_0": {
        "_name_": "pool",
        "title": "pool",
        "type": "string"
      },
      "pool_dataset_snapshot_count_0": {
        "_name_": "dataset",
        "title": "dataset",
        "type": "string"
      },
      "pool_dataset_unlock_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Unlock dataset `id` (and its children if `unlock_options.recursive` is `true`).\nIf `id` dataset is not encrypted an exception will be raised. There is one exception:\nwhen `id` is a root dataset and `unlock_options.recursive` is specified, encryption\nvalidation will not be performed for `id`. This allow unlocking encrypted children for the entire pool `id`."
      },
      "pool_dataset_unlock_1": {
        "type": "object",
        "properties": {
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          },
          "key_file": {
            "type": "boolean",
            "_name_": "key_file",
            "title": "key_file",
            "default": false
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false
          },
          "toggle_attachments": {
            "type": "boolean",
            "_name_": "toggle_attachments",
            "title": "toggle_attachments",
            "default": true
          },
          "datasets": {
            "_name_": "datasets",
            "title": "datasets",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "force": {
                  "type": "boolean",
                  "_name_": "force",
                  "title": "force",
                  "default": false,
                  "_required_": true
                },
                "name": {
                  "_name_": "name",
                  "title": "name",
                  "_required_": true,
                  "type": "string"
                },
                "key": {
                  "_name_": "key",
                  "title": "key",
                  "_required_": false,
                  "type": "string"
                },
                "passphrase": {
                  "_name_": "passphrase",
                  "title": "passphrase",
                  "_required_": false,
                  "type": "string"
                },
                "recursive": {
                  "type": "boolean",
                  "_name_": "recursive",
                  "title": "recursive",
                  "default": false,
                  "_required_": false
                }
              },
              "additionalProperties": false,
              "_name_": "dataset",
              "title": "dataset",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "force",
                "name",
                "key",
                "passphrase",
                "recursive"
              ]
            }
          }
        },
        "additionalProperties": false,
        "_name_": "unlock_options",
        "title": "unlock_options",
        "default": {},
        "_attrs_order_": [
          "force",
          "key_file",
          "recursive",
          "toggle_attachments",
          "datasets"
        ]
      },
      "pool_dataset_unlock": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_unlock_0"
          },
          "unlock_options": {
            "$ref": "#/components/schemas/pool_dataset_unlock_1"
          }
        }
      },
      "pool_dataset_unlock_services_restart_choices_0": {
        "_name_": "dataset",
        "title": "dataset",
        "type": "string"
      },
      "pool_dataset_userprop_create_0": {
        "type": "object",
        "properties": {
          "id": {
            "_name_": "id",
            "title": "id",
            "type": "string"
          },
          "property": {
            "type": "object",
            "properties": {
              "name": {
                "_name_": "name",
                "title": "name",
                "type": "string"
              },
              "value": {
                "_name_": "value",
                "title": "value",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "property",
            "title": "property",
            "default": {},
            "_attrs_order_": [
              "name",
              "value"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "dataset_user_prop_create",
        "title": "dataset_user_prop_create",
        "default": {},
        "_attrs_order_": [
          "id",
          "property"
        ]
      },
      "pool_dataset_userprop_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "pool_dataset_userprop_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "pool_dataset_userprop_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_dataset_userprop_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/pool_dataset_userprop_get_instance_1"
          }
        }
      },
      "pool_resilver_update_0": {
        "type": "object",
        "properties": {
          "begin": {
            "_name_": "begin",
            "title": "begin",
            "type": "string",
            "description": "If `begin` time is greater than `end` time it means it will rollover the day, e.g.\nbegin = \"19:00\", end = \"05:00\" will increase pool resilver priority from 19:00 of one day\nuntil 05:00 of the next day."
          },
          "end": {
            "_name_": "end",
            "title": "end",
            "type": "string",
            "description": "If `begin` time is greater than `end` time it means it will rollover the day, e.g.\nbegin = \"19:00\", end = \"05:00\" will increase pool resilver priority from 19:00 of one day\nuntil 05:00 of the next day."
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled"
          },
          "weekday": {
            "_name_": "weekday",
            "title": "weekday",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "weekday",
              "title": "weekday",
              "_required_": false
            },
            "description": "`weekday` follows crontab(5) values 0-7 (0 or 7 is Sun)."
          }
        },
        "additionalProperties": false,
        "_name_": "pool_resilver_update",
        "title": "pool_resilver_entry",
        "default": {},
        "_attrs_order_": [
          "begin",
          "end",
          "enabled",
          "weekday"
        ]
      },
      "pool_scrub_create_0": {
        "type": "object",
        "properties": {
          "pool": {
            "type": "integer",
            "_name_": "pool",
            "title": "pool"
          },
          "threshold": {
            "type": "integer",
            "_name_": "threshold",
            "title": "threshold",
            "description": "`threshold` refers to the minimum amount of time in days has to be passed before\na scrub can run again."
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "00",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "7",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "pool_scrub_entry",
        "title": "pool_scrub_entry",
        "default": {},
        "_attrs_order_": [
          "pool",
          "threshold",
          "description",
          "schedule",
          "enabled"
        ]
      },
      "pool_scrub_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "pool_scrub_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "pool_scrub_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_scrub_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/pool_scrub_get_instance_1"
          }
        }
      },
      "pool_scrub_run_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "pool_scrub_run_1": {
        "type": "integer",
        "_name_": "threshold",
        "title": "threshold",
        "default": 35
      },
      "pool_scrub_run": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/pool_scrub_run_0"
          },
          "threshold": {
            "$ref": "#/components/schemas/pool_scrub_run_1"
          }
        }
      },
      "pool_scrub_scrub_0": {
        "_name_": "name",
        "title": "name",
        "type": "string"
      },
      "pool_scrub_scrub_1": {
        "_name_": "action",
        "title": "action",
        "default": "START",
        "type": "string",
        "enum": [
          "START",
          "STOP",
          "PAUSE"
        ]
      },
      "pool_scrub_scrub": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/pool_scrub_scrub_0"
          },
          "action": {
            "$ref": "#/components/schemas/pool_scrub_scrub_1"
          }
        }
      },
      "pool_snapshottask_create_0": {
        "type": "object",
        "properties": {
          "dataset": {
            "_name_": "dataset",
            "title": "dataset",
            "type": "string",
            "description": "Create a Periodic Snapshot Task that will take snapshots of specified `dataset` at specified `schedule`."
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "description": "Recursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets\nor zvols from the snapshot.\nSnapshots will be automatically destroyed after a certain amount of time, specified by"
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "item",
              "title": "item",
              "_required_": false,
              "type": "string"
            },
            "description": "Recursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets\nor zvols from the snapshot.\nSnapshots will be automatically destroyed after a certain amount of time, specified by"
          },
          "lifetime_value": {
            "type": "integer",
            "_name_": "lifetime_value",
            "title": "lifetime_value",
            "description": "`lifetime_value` and `lifetime_unit`.\nIf multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot\nwill be kept until the last of these tasks reaches its expiry time."
          },
          "lifetime_unit": {
            "_name_": "lifetime_unit",
            "title": "lifetime_unit",
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "description": "`lifetime_value` and `lifetime_unit`.\nIf multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot\nwill be kept until the last of these tasks reaches its expiry time."
          },
          "naming_schema": {
            "_name_": "naming_schema",
            "title": "naming_schema",
            "type": "string",
            "description": "Snapshots will be named according to `naming_schema` which is a `strftime`-like template for snapshot name\nand must contain `%Y`, `%m`, `%d`, `%H` and `%M`."
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              },
              "begin": {
                "_name_": "begin",
                "title": "begin",
                "default": "00:00",
                "type": "string"
              },
              "end": {
                "_name_": "end",
                "title": "end",
                "default": "23:59",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow",
              "begin",
              "end"
            ],
            "description": "Create a Periodic Snapshot Task that will take snapshots of specified `dataset` at specified `schedule`."
          },
          "allow_empty": {
            "type": "boolean",
            "_name_": "allow_empty",
            "title": "allow_empty",
            "default": true
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "periodic_snapshot_create",
        "title": "periodic_snapshot_create",
        "default": {},
        "_attrs_order_": [
          "dataset",
          "recursive",
          "exclude",
          "lifetime_value",
          "lifetime_unit",
          "naming_schema",
          "schedule",
          "allow_empty",
          "enabled"
        ]
      },
      "pool_snapshottask_foreseen_count_0": {
        "type": "object",
        "properties": {
          "lifetime_value": {
            "type": "integer",
            "_name_": "lifetime_value",
            "title": "lifetime_value"
          },
          "lifetime_unit": {
            "_name_": "lifetime_unit",
            "title": "lifetime_unit",
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ]
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              },
              "begin": {
                "_name_": "begin",
                "title": "begin",
                "default": "00:00",
                "type": "string"
              },
              "end": {
                "_name_": "end",
                "title": "end",
                "default": "23:59",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow",
              "begin",
              "end"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "periodic_snapshot_foreseen_count",
        "title": "periodic_snapshot_foreseen_count",
        "default": {},
        "_attrs_order_": [
          "lifetime_value",
          "lifetime_unit",
          "schedule"
        ]
      },
      "pool_snapshottask_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "pool_snapshottask_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "pool_snapshottask_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/pool_snapshottask_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/pool_snapshottask_get_instance_1"
          }
        }
      },
      "privilege_create_0": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "_name_": "id",
            "title": "id"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "`name` is a name for privilege (must be unique)."
          },
          "local_groups": {
            "_name_": "local_groups",
            "title": "local_groups",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "local_group",
              "title": "local_group",
              "_required_": false
            },
            "description": "`local_groups` is a list of local user account group GIDs that gain this privilege."
          },
          "ds_groups": {
            "_name_": "ds_groups",
            "title": "ds_groups",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "ds_group",
              "title": "ds_group",
              "_required_": false
            },
            "description": "`ds_groups` is list of Directory Service group GIDs that will gain this privilege."
          },
          "allowlist": {
            "_name_": "allowlist",
            "title": "allowlist",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "method": {
                  "_name_": "method",
                  "title": "method",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "CALL",
                    "SUBSCRIBE",
                    "*"
                  ]
                },
                "resource": {
                  "_name_": "resource",
                  "title": "resource",
                  "_required_": true,
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "_name_": "allowlist_item",
              "title": "allowlist_item",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "method",
                "resource"
              ]
            },
            "description": "`allowlist` is a list of API endpoints allowed for this privilege."
          },
          "web_shell": {
            "type": "boolean",
            "_name_": "web_shell",
            "title": "web_shell"
          }
        },
        "additionalProperties": false,
        "_name_": "privilege_create",
        "title": "privilege_entry",
        "default": {},
        "_attrs_order_": [
          "id",
          "name",
          "local_groups",
          "ds_groups",
          "allowlist",
          "web_shell"
        ]
      },
      "privilege_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "privilege_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "privilege_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/privilege_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/privilege_get_instance_1"
          }
        }
      },
      "replication_create_0": {
        "type": "object",
        "properties": {
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "* `name` specifies a name for replication task"
          },
          "direction": {
            "_name_": "direction",
            "title": "direction",
            "type": "string",
            "enum": [
              "PUSH",
              "PULL"
            ],
            "description": "* `direction` specifies whether task will `PUSH` or `PULL` snapshots"
          },
          "transport": {
            "_name_": "transport",
            "title": "transport",
            "type": "string",
            "enum": [
              "SSH",
              "SSH+NETCAT",
              "LOCAL"
            ],
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine."
          },
          "ssh_credentials": {
            "type": "integer",
            "_name_": "ssh_credentials",
            "title": "ssh_credentials",
            "default": null,
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine.",
            "nullable": true
          },
          "netcat_active_side": {
            "_name_": "netcat_active_side",
            "title": "netcat_active_side",
            "default": null,
            "type": "string",
            "enum": [
              "LOCAL",
              "REMOTE"
            ],
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine.",
            "nullable": true
          },
          "netcat_active_side_listen_address": {
            "_name_": "netcat_active_side_listen_address",
            "title": "netcat_active_side_listen_address",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "netcat_active_side_port_min": {
            "type": "integer",
            "_name_": "netcat_active_side_port_min",
            "title": "netcat_active_side_port_min",
            "default": null,
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine.",
            "nullable": true
          },
          "netcat_active_side_port_max": {
            "type": "integer",
            "_name_": "netcat_active_side_port_max",
            "title": "netcat_active_side_port_max",
            "default": null,
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine.",
            "nullable": true
          },
          "netcat_passive_side_connect_address": {
            "_name_": "netcat_passive_side_connect_address",
            "title": "netcat_passive_side_connect_address",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "sudo": {
            "type": "boolean",
            "_name_": "sudo",
            "title": "sudo",
            "default": false,
            "description": "* `transport` is a method of snapshots transfer:\n  * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve\n    great performance\n    `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)\n  * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks\n    and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)\n    to be open on `netcat_active_side`\n    `ssh_credentials` is also required for control connection\n  * `LOCAL` replicates to or from localhost\n  `sudo` flag controls whether `SSH` and `SSH+NETCAT` transports should use sudo (which is expected to be\n  passwordless) to run `zfs` command on the remote machine."
          },
          "source_datasets": {
            "_name_": "source_datasets",
            "title": "source_datasets",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            },
            "description": "* `source_datasets` is a non-empty list of datasets to replicate snapshots from"
          },
          "target_dataset": {
            "_name_": "target_dataset",
            "title": "target_dataset",
            "type": "string",
            "description": "* `target_dataset` is a dataset to put snapshots into. It must exist on target side"
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "description": "* `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task"
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            },
            "description": "* `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task"
          },
          "properties": {
            "type": "boolean",
            "_name_": "properties",
            "title": "properties",
            "default": true,
            "description": "* `properties` control whether we should send dataset properties along with snapshots"
          },
          "properties_exclude": {
            "_name_": "properties_exclude",
            "title": "properties_exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "property",
              "title": "property",
              "_required_": false,
              "type": "string"
            }
          },
          "properties_override": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "properties_override",
            "title": "properties_override",
            "default": {},
            "_attrs_order_": []
          },
          "replicate": {
            "type": "boolean",
            "_name_": "replicate",
            "title": "replicate",
            "default": false
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false
          },
          "encryption_key": {
            "_name_": "encryption_key",
            "title": "encryption_key",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "encryption_key_format": {
            "_name_": "encryption_key_format",
            "title": "encryption_key_format",
            "default": null,
            "type": "string",
            "enum": [
              "HEX",
              "PASSPHRASE"
            ],
            "nullable": true
          },
          "encryption_key_location": {
            "_name_": "encryption_key_location",
            "title": "encryption_key_location",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "periodic_snapshot_tasks": {
            "_name_": "periodic_snapshot_tasks",
            "title": "periodic_snapshot_tasks",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "periodic_snapshot_task",
              "title": "periodic_snapshot_task",
              "_required_": false
            },
            "description": "* `periodic_snapshot_tasks` is a list of periodic snapshot task IDs that are sources of snapshots for this\n  replication task. Only push replication tasks can be bound to periodic snapshot tasks."
          },
          "naming_schema": {
            "_name_": "naming_schema",
            "title": "naming_schema",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "naming_schema",
              "title": "naming_schema",
              "_required_": false,
              "type": "string"
            },
            "description": "* `naming_schema` is a list of naming schemas for pull replication"
          },
          "also_include_naming_schema": {
            "_name_": "also_include_naming_schema",
            "title": "also_include_naming_schema",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "naming_schema",
              "title": "naming_schema",
              "_required_": false,
              "type": "string"
            },
            "description": "* `also_include_naming_schema` is a list of naming schemas for push replication"
          },
          "name_regex": {
            "_name_": "name_regex",
            "title": "name_regex",
            "default": null,
            "type": "string",
            "description": "* `name_regex` will replicate all snapshots which names match specified regular expression",
            "nullable": true
          },
          "auto": {
            "type": "boolean",
            "_name_": "auto",
            "title": "auto",
            "description": "* `auto` allows replication to run automatically on schedule or after bound periodic snapshot task\n* `schedule` is a schedule to run replication task. Only `auto` replication tasks without bound periodic\n  snapshot tasks can have a schedule"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              },
              "begin": {
                "_name_": "begin",
                "title": "begin",
                "default": "00:00",
                "type": "string"
              },
              "end": {
                "_name_": "end",
                "title": "end",
                "default": "23:59",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": null,
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow",
              "begin",
              "end"
            ],
            "description": "* `auto` allows replication to run automatically on schedule or after bound periodic snapshot task\n* `schedule` is a schedule to run replication task. Only `auto` replication tasks without bound periodic\n  snapshot tasks can have a schedule\n* Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or\n  `restrict_schedule`"
          },
          "restrict_schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              },
              "begin": {
                "_name_": "begin",
                "title": "begin",
                "default": "00:00",
                "type": "string"
              },
              "end": {
                "_name_": "end",
                "title": "end",
                "default": "23:59",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "restrict_schedule",
            "title": "restrict_schedule",
            "default": null,
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow",
              "begin",
              "end"
            ],
            "description": "* `restrict_schedule` restricts when replication task with bound periodic snapshot tasks runs. For example,\n  you can have periodic snapshot tasks that run every 15 minutes, but only run replication task every hour.\n* Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or\n  `restrict_schedule`"
          },
          "only_matching_schedule": {
            "type": "boolean",
            "_name_": "only_matching_schedule",
            "title": "only_matching_schedule",
            "default": false,
            "description": "* Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or\n  `restrict_schedule`"
          },
          "allow_from_scratch": {
            "type": "boolean",
            "_name_": "allow_from_scratch",
            "title": "allow_from_scratch",
            "default": false,
            "description": "* `allow_from_scratch` will destroy all snapshots on target side and replicate everything from scratch if none\n  of the snapshots on target side matches source snapshots"
          },
          "readonly": {
            "_name_": "readonly",
            "title": "readonly",
            "default": "SET",
            "type": "string",
            "enum": [
              "SET",
              "REQUIRE",
              "IGNORE"
            ],
            "description": "* `readonly` controls destination datasets readonly property:\n  * `SET` will set all destination datasets to readonly=on after finishing the replication\n  * `REQUIRE` will require all existing destination datasets to have readonly=on property\n  * `IGNORE` will avoid this kind of behavior"
          },
          "hold_pending_snapshots": {
            "type": "boolean",
            "_name_": "hold_pending_snapshots",
            "title": "hold_pending_snapshots",
            "default": false,
            "description": "* `hold_pending_snapshots` will prevent source snapshots from being deleted by retention of replication fails\n  for some reason"
          },
          "retention_policy": {
            "_name_": "retention_policy",
            "title": "retention_policy",
            "type": "string",
            "enum": [
              "SOURCE",
              "CUSTOM",
              "NONE"
            ],
            "description": "* `retention_policy` specifies how to delete old snapshots on target side:\n  * `SOURCE` deletes snapshots that are absent on source side\n  * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`\n  * `NONE` does not delete any snapshots"
          },
          "lifetime_value": {
            "type": "integer",
            "_name_": "lifetime_value",
            "title": "lifetime_value",
            "default": null,
            "description": "* `retention_policy` specifies how to delete old snapshots on target side:\n  * `SOURCE` deletes snapshots that are absent on source side\n  * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`\n  * `NONE` does not delete any snapshots",
            "nullable": true
          },
          "lifetime_unit": {
            "_name_": "lifetime_unit",
            "title": "lifetime_unit",
            "default": null,
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "description": "* `retention_policy` specifies how to delete old snapshots on target side:\n  * `SOURCE` deletes snapshots that are absent on source side\n  * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`\n  * `NONE` does not delete any snapshots",
            "nullable": true
          },
          "lifetimes": {
            "_name_": "lifetimes",
            "title": "lifetimes",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "schedule": {
                  "type": "object",
                  "properties": {
                    "minute": {
                      "_name_": "minute",
                      "title": "minute",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "hour": {
                      "_name_": "hour",
                      "title": "hour",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "dom": {
                      "_name_": "dom",
                      "title": "dom",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "month": {
                      "_name_": "month",
                      "title": "month",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "dow": {
                      "_name_": "dow",
                      "title": "dow",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "schedule",
                  "title": "schedule",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "minute",
                    "hour",
                    "dom",
                    "month",
                    "dow"
                  ]
                },
                "lifetime_value": {
                  "type": "integer",
                  "_name_": "lifetime_value",
                  "title": "lifetime_value",
                  "_required_": true
                },
                "lifetime_unit": {
                  "_name_": "lifetime_unit",
                  "title": "lifetime_unit",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "HOUR",
                    "DAY",
                    "WEEK",
                    "MONTH",
                    "YEAR"
                  ]
                }
              },
              "additionalProperties": false,
              "_name_": "lifetime",
              "title": "lifetime",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "schedule",
                "lifetime_value",
                "lifetime_unit"
              ]
            }
          },
          "compression": {
            "_name_": "compression",
            "title": "compression",
            "default": null,
            "type": "string",
            "enum": [
              "LZ4",
              "PIGZ",
              "PLZIP"
            ],
            "description": "* `compression` compresses SSH stream. Available only for SSH transport",
            "nullable": true
          },
          "speed_limit": {
            "type": "integer",
            "_name_": "speed_limit",
            "title": "speed_limit",
            "default": null,
            "description": "* `speed_limit` limits speed of SSH stream. Available only for SSH transport",
            "nullable": true
          },
          "large_block": {
            "type": "boolean",
            "_name_": "large_block",
            "title": "large_block",
            "default": true,
            "description": "* `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`"
          },
          "embed": {
            "type": "boolean",
            "_name_": "embed",
            "title": "embed",
            "default": false,
            "description": "* `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`"
          },
          "compressed": {
            "type": "boolean",
            "_name_": "compressed",
            "title": "compressed",
            "default": true,
            "description": "* `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`"
          },
          "retries": {
            "type": "integer",
            "_name_": "retries",
            "title": "retries",
            "default": 5,
            "description": "* `retries` specifies number of retries before considering replication failed"
          },
          "logging_level": {
            "_name_": "logging_level",
            "title": "logging_level",
            "default": null,
            "type": "string",
            "enum": [
              "DEBUG",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "replication_create",
        "title": "replication_create",
        "default": {},
        "_attrs_order_": [
          "name",
          "direction",
          "transport",
          "ssh_credentials",
          "netcat_active_side",
          "netcat_active_side_listen_address",
          "netcat_active_side_port_min",
          "netcat_active_side_port_max",
          "netcat_passive_side_connect_address",
          "sudo",
          "source_datasets",
          "target_dataset",
          "recursive",
          "exclude",
          "properties",
          "properties_exclude",
          "properties_override",
          "replicate",
          "encryption",
          "encryption_key",
          "encryption_key_format",
          "encryption_key_location",
          "periodic_snapshot_tasks",
          "naming_schema",
          "also_include_naming_schema",
          "name_regex",
          "auto",
          "schedule",
          "restrict_schedule",
          "only_matching_schedule",
          "allow_from_scratch",
          "readonly",
          "hold_pending_snapshots",
          "retention_policy",
          "lifetime_value",
          "lifetime_unit",
          "lifetimes",
          "compression",
          "speed_limit",
          "large_block",
          "embed",
          "compressed",
          "retries",
          "logging_level",
          "enabled"
        ]
      },
      "replication_count_eligible_manual_snapshots_0": {
        "type": "object",
        "properties": {
          "datasets": {
            "_name_": "datasets",
            "title": "datasets",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            }
          },
          "naming_schema": {
            "_name_": "naming_schema",
            "title": "naming_schema",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "naming_schema",
              "title": "naming_schema",
              "_required_": false,
              "type": "string"
            },
            "description": "Count how many existing snapshots of `dataset` match `naming_schema`."
          },
          "name_regex": {
            "_name_": "name_regex",
            "title": "name_regex",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "transport": {
            "_name_": "transport",
            "title": "transport",
            "type": "string",
            "enum": [
              "SSH",
              "SSH+NETCAT",
              "LOCAL"
            ]
          },
          "ssh_credentials": {
            "type": "integer",
            "_name_": "ssh_credentials",
            "title": "ssh_credentials",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "count_eligible_manual_snapshots",
        "title": "count_eligible_manual_snapshots",
        "default": {},
        "_attrs_order_": [
          "datasets",
          "naming_schema",
          "name_regex",
          "transport",
          "ssh_credentials"
        ]
      },
      "replication_create_dataset_0": {
        "_name_": "dataset",
        "title": "dataset",
        "type": "string",
        "description": "Accepts `dataset` name, `transport` and SSH credentials ID (for non-local transport)"
      },
      "replication_create_dataset_1": {
        "_name_": "transport",
        "title": "transport",
        "type": "string",
        "enum": [
          "SSH",
          "SSH+NETCAT",
          "LOCAL"
        ],
        "description": "Accepts `dataset` name, `transport` and SSH credentials ID (for non-local transport)"
      },
      "replication_create_dataset_2": {
        "type": "integer",
        "_name_": "ssh_credentials",
        "title": "ssh_credentials",
        "default": null,
        "nullable": true
      },
      "replication_create_dataset": {
        "type": "object",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/replication_create_dataset_0"
          },
          "transport": {
            "$ref": "#/components/schemas/replication_create_dataset_1"
          },
          "ssh_credentials": {
            "$ref": "#/components/schemas/replication_create_dataset_2"
          }
        }
      },
      "replication_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "replication_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "replication_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/replication_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/replication_get_instance_1"
          }
        }
      },
      "replication_list_datasets_0": {
        "_name_": "transport",
        "title": "transport",
        "type": "string",
        "enum": [
          "SSH",
          "SSH+NETCAT",
          "LOCAL"
        ],
        "description": "Accepts `transport` and SSH credentials ID (for non-local transport)"
      },
      "replication_list_datasets_1": {
        "type": "integer",
        "_name_": "ssh_credentials",
        "title": "ssh_credentials",
        "default": null,
        "nullable": true
      },
      "replication_list_datasets": {
        "type": "object",
        "properties": {
          "transport": {
            "$ref": "#/components/schemas/replication_list_datasets_0"
          },
          "ssh_credentials": {
            "$ref": "#/components/schemas/replication_list_datasets_1"
          }
        }
      },
      "replication_run_onetime_0": {
        "type": "object",
        "properties": {
          "direction": {
            "_name_": "direction",
            "title": "direction",
            "type": "string",
            "enum": [
              "PUSH",
              "PULL"
            ]
          },
          "transport": {
            "_name_": "transport",
            "title": "transport",
            "type": "string",
            "enum": [
              "SSH",
              "SSH+NETCAT",
              "LOCAL"
            ]
          },
          "ssh_credentials": {
            "type": "integer",
            "_name_": "ssh_credentials",
            "title": "ssh_credentials",
            "default": null,
            "nullable": true
          },
          "netcat_active_side": {
            "_name_": "netcat_active_side",
            "title": "netcat_active_side",
            "default": null,
            "type": "string",
            "enum": [
              "LOCAL",
              "REMOTE"
            ],
            "nullable": true
          },
          "netcat_active_side_listen_address": {
            "_name_": "netcat_active_side_listen_address",
            "title": "netcat_active_side_listen_address",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "netcat_active_side_port_min": {
            "type": "integer",
            "_name_": "netcat_active_side_port_min",
            "title": "netcat_active_side_port_min",
            "default": null,
            "nullable": true
          },
          "netcat_active_side_port_max": {
            "type": "integer",
            "_name_": "netcat_active_side_port_max",
            "title": "netcat_active_side_port_max",
            "default": null,
            "nullable": true
          },
          "netcat_passive_side_connect_address": {
            "_name_": "netcat_passive_side_connect_address",
            "title": "netcat_passive_side_connect_address",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "sudo": {
            "type": "boolean",
            "_name_": "sudo",
            "title": "sudo",
            "default": false
          },
          "source_datasets": {
            "_name_": "source_datasets",
            "title": "source_datasets",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            }
          },
          "target_dataset": {
            "_name_": "target_dataset",
            "title": "target_dataset",
            "type": "string"
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive"
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            }
          },
          "properties": {
            "type": "boolean",
            "_name_": "properties",
            "title": "properties",
            "default": true
          },
          "properties_exclude": {
            "_name_": "properties_exclude",
            "title": "properties_exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "property",
              "title": "property",
              "_required_": false,
              "type": "string"
            }
          },
          "properties_override": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "properties_override",
            "title": "properties_override",
            "default": {},
            "_attrs_order_": []
          },
          "replicate": {
            "type": "boolean",
            "_name_": "replicate",
            "title": "replicate",
            "default": false
          },
          "encryption": {
            "type": "boolean",
            "_name_": "encryption",
            "title": "encryption",
            "default": false
          },
          "encryption_key": {
            "_name_": "encryption_key",
            "title": "encryption_key",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "encryption_key_format": {
            "_name_": "encryption_key_format",
            "title": "encryption_key_format",
            "default": null,
            "type": "string",
            "enum": [
              "HEX",
              "PASSPHRASE"
            ],
            "nullable": true
          },
          "encryption_key_location": {
            "_name_": "encryption_key_location",
            "title": "encryption_key_location",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "periodic_snapshot_tasks": {
            "_name_": "periodic_snapshot_tasks",
            "title": "periodic_snapshot_tasks",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "periodic_snapshot_task",
              "title": "periodic_snapshot_task",
              "_required_": false
            }
          },
          "naming_schema": {
            "_name_": "naming_schema",
            "title": "naming_schema",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "naming_schema",
              "title": "naming_schema",
              "_required_": false,
              "type": "string"
            }
          },
          "also_include_naming_schema": {
            "_name_": "also_include_naming_schema",
            "title": "also_include_naming_schema",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "naming_schema",
              "title": "naming_schema",
              "_required_": false,
              "type": "string"
            }
          },
          "name_regex": {
            "_name_": "name_regex",
            "title": "name_regex",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "restrict_schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              },
              "begin": {
                "_name_": "begin",
                "title": "begin",
                "default": "00:00",
                "type": "string"
              },
              "end": {
                "_name_": "end",
                "title": "end",
                "default": "23:59",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "restrict_schedule",
            "title": "restrict_schedule",
            "default": null,
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow",
              "begin",
              "end"
            ]
          },
          "allow_from_scratch": {
            "type": "boolean",
            "_name_": "allow_from_scratch",
            "title": "allow_from_scratch",
            "default": false
          },
          "readonly": {
            "_name_": "readonly",
            "title": "readonly",
            "default": "SET",
            "type": "string",
            "enum": [
              "SET",
              "REQUIRE",
              "IGNORE"
            ]
          },
          "hold_pending_snapshots": {
            "type": "boolean",
            "_name_": "hold_pending_snapshots",
            "title": "hold_pending_snapshots",
            "default": false
          },
          "retention_policy": {
            "_name_": "retention_policy",
            "title": "retention_policy",
            "type": "string",
            "enum": [
              "SOURCE",
              "CUSTOM",
              "NONE"
            ]
          },
          "lifetime_value": {
            "type": "integer",
            "_name_": "lifetime_value",
            "title": "lifetime_value",
            "default": null,
            "nullable": true
          },
          "lifetime_unit": {
            "_name_": "lifetime_unit",
            "title": "lifetime_unit",
            "default": null,
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "nullable": true
          },
          "lifetimes": {
            "_name_": "lifetimes",
            "title": "lifetimes",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "schedule": {
                  "type": "object",
                  "properties": {
                    "minute": {
                      "_name_": "minute",
                      "title": "minute",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "hour": {
                      "_name_": "hour",
                      "title": "hour",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "dom": {
                      "_name_": "dom",
                      "title": "dom",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "month": {
                      "_name_": "month",
                      "title": "month",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    },
                    "dow": {
                      "_name_": "dow",
                      "title": "dow",
                      "default": "*",
                      "_required_": false,
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "schedule",
                  "title": "schedule",
                  "default": {},
                  "_required_": false,
                  "_attrs_order_": [
                    "minute",
                    "hour",
                    "dom",
                    "month",
                    "dow"
                  ]
                },
                "lifetime_value": {
                  "type": "integer",
                  "_name_": "lifetime_value",
                  "title": "lifetime_value",
                  "_required_": true
                },
                "lifetime_unit": {
                  "_name_": "lifetime_unit",
                  "title": "lifetime_unit",
                  "_required_": true,
                  "type": "string",
                  "enum": [
                    "HOUR",
                    "DAY",
                    "WEEK",
                    "MONTH",
                    "YEAR"
                  ]
                }
              },
              "additionalProperties": false,
              "_name_": "lifetime",
              "title": "lifetime",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "schedule",
                "lifetime_value",
                "lifetime_unit"
              ]
            }
          },
          "compression": {
            "_name_": "compression",
            "title": "compression",
            "default": null,
            "type": "string",
            "enum": [
              "LZ4",
              "PIGZ",
              "PLZIP"
            ],
            "nullable": true
          },
          "speed_limit": {
            "type": "integer",
            "_name_": "speed_limit",
            "title": "speed_limit",
            "default": null,
            "nullable": true
          },
          "large_block": {
            "type": "boolean",
            "_name_": "large_block",
            "title": "large_block",
            "default": true
          },
          "embed": {
            "type": "boolean",
            "_name_": "embed",
            "title": "embed",
            "default": false
          },
          "compressed": {
            "type": "boolean",
            "_name_": "compressed",
            "title": "compressed",
            "default": true
          },
          "retries": {
            "type": "integer",
            "_name_": "retries",
            "title": "retries",
            "default": 5
          },
          "logging_level": {
            "_name_": "logging_level",
            "title": "logging_level",
            "default": null,
            "type": "string",
            "enum": [
              "DEBUG",
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "nullable": true
          },
          "exclude_mountpoint_property": {
            "type": "boolean",
            "_name_": "exclude_mountpoint_property",
            "title": "exclude_mountpoint_property",
            "default": true
          },
          "only_from_scratch": {
            "type": "boolean",
            "_name_": "only_from_scratch",
            "title": "only_from_scratch",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "replication_run_onetime",
        "title": "replication_create",
        "default": {},
        "_attrs_order_": [
          "direction",
          "transport",
          "ssh_credentials",
          "netcat_active_side",
          "netcat_active_side_listen_address",
          "netcat_active_side_port_min",
          "netcat_active_side_port_max",
          "netcat_passive_side_connect_address",
          "sudo",
          "source_datasets",
          "target_dataset",
          "recursive",
          "exclude",
          "properties",
          "properties_exclude",
          "properties_override",
          "replicate",
          "encryption",
          "encryption_key",
          "encryption_key_format",
          "encryption_key_location",
          "periodic_snapshot_tasks",
          "naming_schema",
          "also_include_naming_schema",
          "name_regex",
          "restrict_schedule",
          "allow_from_scratch",
          "readonly",
          "hold_pending_snapshots",
          "retention_policy",
          "lifetime_value",
          "lifetime_unit",
          "lifetimes",
          "compression",
          "speed_limit",
          "large_block",
          "embed",
          "compressed",
          "retries",
          "logging_level",
          "exclude_mountpoint_property",
          "only_from_scratch"
        ]
      },
      "replication_target_unmatched_snapshots_0": {
        "_name_": "direction",
        "title": "direction",
        "type": "string",
        "enum": [
          "PUSH",
          "PULL"
        ]
      },
      "replication_target_unmatched_snapshots_1": {
        "_name_": "source_datasets",
        "title": "source_datasets",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "dataset",
          "title": "dataset",
          "_required_": false,
          "type": "string"
        }
      },
      "replication_target_unmatched_snapshots_2": {
        "_name_": "target_dataset",
        "title": "target_dataset",
        "type": "string"
      },
      "replication_target_unmatched_snapshots_3": {
        "_name_": "transport",
        "title": "transport",
        "type": "string",
        "enum": [
          "SSH",
          "SSH+NETCAT",
          "LOCAL",
          "LEGACY"
        ]
      },
      "replication_target_unmatched_snapshots_4": {
        "type": "integer",
        "_name_": "ssh_credentials",
        "title": "ssh_credentials",
        "default": null,
        "nullable": true
      },
      "replication_target_unmatched_snapshots": {
        "type": "object",
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/replication_target_unmatched_snapshots_0"
          },
          "source_datasets": {
            "$ref": "#/components/schemas/replication_target_unmatched_snapshots_1"
          },
          "target_dataset": {
            "$ref": "#/components/schemas/replication_target_unmatched_snapshots_2"
          },
          "transport": {
            "$ref": "#/components/schemas/replication_target_unmatched_snapshots_3"
          },
          "ssh_credentials": {
            "$ref": "#/components/schemas/replication_target_unmatched_snapshots_4"
          }
        }
      },
      "replication_config_update_0": {
        "type": "object",
        "properties": {
          "max_parallel_replication_tasks": {
            "type": "integer",
            "_name_": "max_parallel_replication_tasks",
            "title": "max_parallel_replication_tasks",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "replication_config_update",
        "title": "replication_config_update",
        "default": {},
        "_attrs_order_": [
          "max_parallel_replication_tasks"
        ]
      },
      "reporting_update_0": {
        "type": "object",
        "properties": {
          "cpu_in_percentage": {
            "type": "boolean",
            "_name_": "cpu_in_percentage",
            "title": "cpu_in_percentage",
            "description": "If `cpu_in_percentage` is `true`, collectd reports CPU usage in percentage instead of \"jiffies\"."
          },
          "graphite": {
            "_name_": "graphite",
            "title": "graphite",
            "type": "string",
            "description": "`graphite` specifies a destination hostname or IP for collectd data sent by the Graphite plugin.."
          },
          "graphite_separateinstances": {
            "type": "boolean",
            "_name_": "graphite_separateinstances",
            "title": "graphite_separateinstances",
            "description": "`graphite_separateinstances` corresponds to collectd SeparateInstances option."
          },
          "graph_age": {
            "type": "integer",
            "_name_": "graph_age",
            "title": "graph_age",
            "description": "`graph_age` specifies the maximum age of stored graphs in months. `graph_points` is the number of points for\neach hourly, daily, weekly, etc. graph. Changing these requires destroying the current reporting database,\nso when these fields are changed, an additional `confirm_rrd_destroy: true` flag must be present."
          },
          "graph_points": {
            "type": "integer",
            "_name_": "graph_points",
            "title": "graph_points",
            "description": "`graph_age` specifies the maximum age of stored graphs in months. `graph_points` is the number of points for\neach hourly, daily, weekly, etc. graph. Changing these requires destroying the current reporting database,\nso when these fields are changed, an additional `confirm_rrd_destroy: true` flag must be present."
          },
          "confirm_rrd_destroy": {
            "type": "boolean",
            "_name_": "confirm_rrd_destroy",
            "title": "confirm_rrd_destroy"
          }
        },
        "additionalProperties": false,
        "_name_": "reporting_update",
        "title": "reporting_entry",
        "default": {},
        "_attrs_order_": [
          "cpu_in_percentage",
          "graphite",
          "graphite_separateinstances",
          "graph_age",
          "graph_points",
          "confirm_rrd_destroy"
        ]
      },
      "reporting_get_data_0": {
        "_name_": "graphs",
        "title": "graphs",
        "default": [],
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "_name_": "name",
              "title": "name",
              "_required_": true,
              "type": "string"
            },
            "identifier": {
              "_name_": "identifier",
              "title": "identifier",
              "default": null,
              "_required_": false,
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false,
          "_name_": "graph",
          "title": "graph",
          "default": {},
          "_required_": false,
          "_attrs_order_": [
            "name",
            "identifier"
          ]
        }
      },
      "reporting_get_data_1": {
        "type": "object",
        "properties": {
          "unit": {
            "_name_": "unit",
            "title": "unit",
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "YEAR"
            ],
            "description": "For the time period of the graph either `unit` and `page` OR `start` and `end` should be\nused, not both."
          },
          "page": {
            "type": "integer",
            "_name_": "page",
            "title": "page",
            "default": 0,
            "description": "For the time period of the graph either `unit` and `page` OR `start` and `end` should be\nused, not both."
          },
          "start": {
            "_name_": "start",
            "title": "start",
            "type": "string",
            "description": "For the time period of the graph either `unit` and `page` OR `start` and `end` should be\nused, not both."
          },
          "end": {
            "_name_": "end",
            "title": "end",
            "type": "string",
            "description": "For the time period of the graph either `unit` and `page` OR `start` and `end` should be\nused, not both."
          },
          "aggregate": {
            "type": "boolean",
            "_name_": "aggregate",
            "title": "aggregate",
            "default": true,
            "description": "`aggregate` will return aggregate available data for each graph (e.g. min, max, mean)."
          }
        },
        "additionalProperties": false,
        "_name_": "reporting_query",
        "title": "reporting_query",
        "default": {},
        "_attrs_order_": [
          "unit",
          "page",
          "start",
          "end",
          "aggregate"
        ]
      },
      "reporting_get_data": {
        "type": "object",
        "properties": {
          "graphs": {
            "$ref": "#/components/schemas/reporting_get_data_0"
          },
          "reporting_query": {
            "$ref": "#/components/schemas/reporting_get_data_1"
          }
        }
      },
      "route_ipv4gw_reachable_0": {
        "_name_": "ipv4_gateway",
        "title": "ipv4_gateway",
        "type": "string"
      },
      "rsyncd_update_0": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "auxiliary": {
            "_name_": "auxiliary",
            "title": "auxiliary",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "rsyncd_update",
        "title": "rsyncd_entry",
        "default": {},
        "_attrs_order_": [
          "port",
          "auxiliary"
        ]
      },
      "rsyncmod_create_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "`path` represents the path to a dataset. Path length is limited to 1023 characters maximum as per the limit\nenforced by FreeBSD. It is possible that we reach this max length recursively while transferring data. In that\ncase, the user must ensure the maximum path will not be too long or modify the recursed path to shorter\nthan the limit."
          },
          "mode": {
            "_name_": "mode",
            "title": "mode",
            "type": "string",
            "enum": [
              "RO",
              "RW",
              "WO"
            ]
          },
          "maxconn": {
            "type": "integer",
            "_name_": "maxconn",
            "title": "maxconn",
            "description": "`maxconn` is an integer value representing the maximum number of simultaneous connections. Zero represents\nunlimited."
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "default": "nobody",
            "type": "string"
          },
          "group": {
            "_name_": "group",
            "title": "group",
            "default": "nobody",
            "type": "string"
          },
          "hostsallow": {
            "_name_": "hostsallow",
            "title": "hostsallow",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "hostsallow",
              "title": "hostsallow",
              "_required_": false,
              "type": "string"
            },
            "description": "`hostsallow` is a list of patterns to match hostname/ip address of a connecting client. If list is empty,\nall hosts are allowed."
          },
          "hostsdeny": {
            "_name_": "hostsdeny",
            "title": "hostsdeny",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "hostdeny",
              "title": "hostdeny",
              "_required_": false,
              "type": "string"
            },
            "description": "`hostsdeny` is a list of patterns to match hostname/ip address of a connecting client. If the pattern is\nmatched, access is denied to the client. If no client should be denied, this should be left empty."
          },
          "auxiliary": {
            "_name_": "auxiliary",
            "title": "auxiliary",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "rsyncmod_create",
        "title": "rsyncmod_create",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "name",
          "comment",
          "path",
          "mode",
          "maxconn",
          "user",
          "group",
          "hostsallow",
          "hostsdeny",
          "auxiliary"
        ]
      },
      "rsyncmod_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "rsyncmod_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "rsyncmod_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/rsyncmod_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/rsyncmod_get_instance_1"
          }
        }
      },
      "rsynctask_create_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "See the comment in Rsyncmod about `path` length limits."
          },
          "user": {
            "_name_": "user",
            "title": "user",
            "type": "string",
            "description": "In SSH mode, if `ssh_credentials` (a keychain credential of `SSH_CREDENTIALS` type) is specified then it is used\nto connect to the remote host. If it is not specified, then keys in `user`'s .ssh directory are used."
          },
          "mode": {
            "_name_": "mode",
            "title": "mode",
            "default": "MODULE",
            "type": "string",
            "enum": [
              "MODULE",
              "SSH"
            ],
            "description": "`mode` represents different operating mechanisms for Rsync i.e Rsync Module mode / Rsync SSH mode.\n`remotemodule` is the name of remote module, this attribute should be specified when `mode` is set to MODULE."
          },
          "remotehost": {
            "_name_": "remotehost",
            "title": "remotehost",
            "default": null,
            "type": "string",
            "description": "`remotehost` is ip address or hostname of the remote system. If username differs on the remote host,\n\"username@remote_host\" format should be used.\n`remotehost` and `remoteport` are not used in this case.",
            "nullable": true
          },
          "remoteport": {
            "type": "integer",
            "_name_": "remoteport",
            "title": "remoteport",
            "default": null,
            "description": "`remotehost` and `remoteport` are not used in this case.",
            "nullable": true
          },
          "remotemodule": {
            "_name_": "remotemodule",
            "title": "remotemodule",
            "default": null,
            "type": "string",
            "description": "`remotemodule` is the name of remote module, this attribute should be specified when `mode` is set to MODULE.",
            "nullable": true
          },
          "ssh_credentials": {
            "type": "integer",
            "_name_": "ssh_credentials",
            "title": "ssh_credentials",
            "default": null,
            "description": "In SSH mode, if `ssh_credentials` (a keychain credential of `SSH_CREDENTIALS` type) is specified then it is used\nto connect to the remote host. If it is not specified, then keys in `user`'s .ssh directory are used.",
            "nullable": true
          },
          "remotepath": {
            "_name_": "remotepath",
            "title": "remotepath",
            "type": "string",
            "description": "`remotepath` specifies the path on the remote system."
          },
          "validate_rpath": {
            "type": "boolean",
            "_name_": "validate_rpath",
            "title": "validate_rpath",
            "default": true,
            "description": "`validate_rpath` is a boolean which when sets validates the existence of the remote path."
          },
          "direction": {
            "_name_": "direction",
            "title": "direction",
            "default": "PUSH",
            "type": "string",
            "enum": [
              "PULL",
              "PUSH"
            ],
            "description": "`direction` specifies if data should be PULLED or PUSHED from the remote system."
          },
          "desc": {
            "_name_": "desc",
            "title": "desc",
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "minute": {
                "_name_": "minute",
                "title": "minute",
                "default": "00",
                "type": "string"
              },
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "minute",
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive"
          },
          "times": {
            "type": "boolean",
            "_name_": "times",
            "title": "times"
          },
          "compress": {
            "type": "boolean",
            "_name_": "compress",
            "title": "compress",
            "description": "`compress` when set reduces the size of the data which is to be transmitted."
          },
          "archive": {
            "type": "boolean",
            "_name_": "archive",
            "title": "archive",
            "description": "`archive` when set makes rsync run recursively, preserving symlinks, permissions, modification times, group,\nand special files."
          },
          "delete": {
            "type": "boolean",
            "_name_": "delete",
            "title": "delete",
            "description": "`delete` when set deletes files in the destination directory which do not exist in the source directory."
          },
          "quiet": {
            "type": "boolean",
            "_name_": "quiet",
            "title": "quiet"
          },
          "preserveperm": {
            "type": "boolean",
            "_name_": "preserveperm",
            "title": "preserveperm",
            "description": "`preserveperm` when set preserves original file permissions."
          },
          "preserveattr": {
            "type": "boolean",
            "_name_": "preserveattr",
            "title": "preserveattr"
          },
          "delayupdates": {
            "type": "boolean",
            "_name_": "delayupdates",
            "title": "delayupdates"
          },
          "extra": {
            "_name_": "extra",
            "title": "extra",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "extra",
              "title": "extra",
              "_required_": false,
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "rsync_task_create",
        "title": "rsync_task_create",
        "default": {},
        "_attrs_order_": [
          "path",
          "user",
          "mode",
          "remotehost",
          "remoteport",
          "remotemodule",
          "ssh_credentials",
          "remotepath",
          "validate_rpath",
          "direction",
          "desc",
          "schedule",
          "recursive",
          "times",
          "compress",
          "archive",
          "delete",
          "quiet",
          "preserveperm",
          "preserveattr",
          "delayupdates",
          "extra",
          "enabled"
        ]
      },
      "rsynctask_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "rsynctask_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "rsynctask_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/rsynctask_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/rsynctask_get_instance_1"
          }
        }
      },
      "s3_update_0": {
        "type": "object",
        "properties": {
          "bindip": {
            "_name_": "bindip",
            "title": "bindip",
            "type": "string"
          },
          "bindport": {
            "type": "integer",
            "_name_": "bindport",
            "title": "bindport"
          },
          "console_bindport": {
            "type": "integer",
            "_name_": "console_bindport",
            "title": "console_bindport"
          },
          "access_key": {
            "_name_": "access_key",
            "title": "access_key",
            "type": "string",
            "description": "`access_key` must only contain alphanumeric characters and should be between 5 and 20 characters."
          },
          "secret_key": {
            "_name_": "secret_key",
            "title": "secret_key",
            "type": "string",
            "description": "`secret_key` must only contain alphanumeric characters and should be between 8 and 40 characters."
          },
          "browser": {
            "type": "boolean",
            "_name_": "browser",
            "title": "browser",
            "description": "`browser` when set, enables the web user interface for the S3 Service."
          },
          "tls_server_uri": {
            "_name_": "tls_server_uri",
            "title": "tls_server_uri",
            "type": "string",
            "nullable": true
          },
          "storage_path": {
            "_name_": "storage_path",
            "title": "storage_path",
            "type": "string"
          },
          "certificate": {
            "type": "integer",
            "_name_": "certificate",
            "title": "certificate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "s3_update",
        "title": "s3_entry",
        "default": {},
        "_attrs_order_": [
          "bindip",
          "bindport",
          "console_bindport",
          "access_key",
          "secret_key",
          "browser",
          "tls_server_uri",
          "storage_path",
          "certificate"
        ]
      },
      "service_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "service_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "service_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/service_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/service_get_instance_1"
          }
        }
      },
      "service_reload_0": {
        "_name_": "service",
        "title": "service",
        "type": "string"
      },
      "service_reload_1": {
        "type": "object",
        "properties": {
          "ha_propagate": {
            "type": "boolean",
            "_name_": "ha_propagate",
            "title": "ha_propagate",
            "default": true
          },
          "silent": {
            "type": "boolean",
            "_name_": "silent",
            "title": "silent",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "service-control",
        "title": "service-control",
        "default": {},
        "_attrs_order_": [
          "ha_propagate",
          "silent"
        ]
      },
      "service_reload": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/service_reload_0"
          },
          "service-control": {
            "$ref": "#/components/schemas/service_reload_1"
          }
        }
      },
      "service_restart_0": {
        "_name_": "service",
        "title": "service",
        "type": "string"
      },
      "service_restart_1": {
        "type": "object",
        "properties": {
          "ha_propagate": {
            "type": "boolean",
            "_name_": "ha_propagate",
            "title": "ha_propagate",
            "default": true
          },
          "silent": {
            "type": "boolean",
            "_name_": "silent",
            "title": "silent",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "service-control",
        "title": "service-control",
        "default": {},
        "_attrs_order_": [
          "ha_propagate",
          "silent"
        ]
      },
      "service_restart": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/service_restart_0"
          },
          "service-control": {
            "$ref": "#/components/schemas/service_restart_1"
          }
        }
      },
      "service_start_0": {
        "_name_": "service",
        "title": "service",
        "type": "string",
        "description": "Start the service specified by `service`."
      },
      "service_start_1": {
        "type": "object",
        "properties": {
          "ha_propagate": {
            "type": "boolean",
            "_name_": "ha_propagate",
            "title": "ha_propagate",
            "default": true
          },
          "silent": {
            "type": "boolean",
            "_name_": "silent",
            "title": "silent",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "service-control",
        "title": "service-control",
        "default": {},
        "_attrs_order_": [
          "ha_propagate",
          "silent"
        ]
      },
      "service_start": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/service_start_0"
          },
          "service-control": {
            "$ref": "#/components/schemas/service_start_1"
          }
        }
      },
      "service_started_0": {
        "_name_": "service",
        "title": "service",
        "type": "string"
      },
      "service_started_or_enabled_0": {
        "_name_": "service",
        "title": "service",
        "type": "string"
      },
      "service_stop_0": {
        "_name_": "service",
        "title": "service",
        "type": "string"
      },
      "service_stop_1": {
        "type": "object",
        "properties": {
          "ha_propagate": {
            "type": "boolean",
            "_name_": "ha_propagate",
            "title": "ha_propagate",
            "default": true
          },
          "silent": {
            "type": "boolean",
            "_name_": "silent",
            "title": "silent",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "service-control",
        "title": "service-control",
        "default": {},
        "_attrs_order_": [
          "ha_propagate",
          "silent"
        ]
      },
      "service_stop": {
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/service_stop_0"
          },
          "service-control": {
            "$ref": "#/components/schemas/service_stop_1"
          }
        }
      },
      "service_terminate_process_0": {
        "type": "integer",
        "_name_": "pid",
        "title": "pid",
        "description": "Terminate process by `pid`."
      },
      "service_terminate_process_1": {
        "type": "integer",
        "_name_": "timeout",
        "title": "timeout",
        "default": 10
      },
      "service_terminate_process": {
        "type": "object",
        "properties": {
          "pid": {
            "$ref": "#/components/schemas/service_terminate_process_0"
          },
          "timeout": {
            "$ref": "#/components/schemas/service_terminate_process_1"
          }
        }
      },
      "sharing_nfs_create_0": {
        "type": "object",
        "properties": {
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "`path` local path to be exported."
          },
          "aliases": {
            "_name_": "aliases",
            "title": "aliases",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "path",
              "title": "path",
              "_required_": false,
              "type": "string"
            },
            "description": "`aliases` IGNORED, for now."
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "default": "",
            "type": "string"
          },
          "networks": {
            "_name_": "networks",
            "title": "networks",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "network",
              "title": "network",
              "_required_": false,
              "type": "string"
            },
            "description": "`networks` is a list of authorized networks that are allowed to access the share having format\n\"network/mask\" CIDR notation. If empty, all networks are allowed."
          },
          "hosts": {
            "_name_": "hosts",
            "title": "hosts",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "host",
              "title": "host",
              "_required_": false,
              "type": "string"
            }
          },
          "ro": {
            "type": "boolean",
            "_name_": "ro",
            "title": "ro",
            "default": false
          },
          "quiet": {
            "type": "boolean",
            "_name_": "quiet",
            "title": "quiet",
            "default": false
          },
          "maproot_user": {
            "_name_": "maproot_user",
            "title": "maproot_user",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "maproot_group": {
            "_name_": "maproot_group",
            "title": "maproot_group",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "mapall_user": {
            "_name_": "mapall_user",
            "title": "mapall_user",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "mapall_group": {
            "_name_": "mapall_group",
            "title": "mapall_group",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "security": {
            "_name_": "security",
            "title": "security",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "provider",
              "title": "provider",
              "_required_": false,
              "type": "string",
              "enum": [
                "SYS",
                "KRB5",
                "KRB5I",
                "KRB5P"
              ]
            }
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "sharingnfs_create",
        "title": "sharingnfs_create",
        "default": {},
        "_attrs_order_": [
          "path",
          "aliases",
          "comment",
          "networks",
          "hosts",
          "ro",
          "quiet",
          "maproot_user",
          "maproot_group",
          "mapall_user",
          "mapall_group",
          "security",
          "enabled"
        ]
      },
      "sharing_nfs_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "sharing_nfs_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "sharing_nfs_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/sharing_nfs_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/sharing_nfs_get_instance_1"
          }
        }
      },
      "sharing_smb_create_0": {
        "type": "object",
        "properties": {
          "purpose": {
            "_name_": "purpose",
            "title": "purpose",
            "default": "DEFAULT_SHARE",
            "type": "string",
            "enum": [
              "NO_PRESET",
              "DEFAULT_CLUSTER_SHARE",
              "DEFAULT_SHARE",
              "TIMEMACHINE",
              "ENHANCED_TIMEMACHINE",
              "MULTI_PROTOCOL_NFS",
              "PRIVATE_DATASETS",
              "READ_ONLY",
              "WORM_DROPBOX"
            ],
            "description": "`purpose` applies common configuration presets depending on intended purpose."
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string",
            "description": "`path` path to export over the SMB protocol. If server is clustered, then this path will be\nrelative to the `cluster_volname`."
          },
          "path_suffix": {
            "_name_": "path_suffix",
            "title": "path_suffix",
            "default": "",
            "type": "string"
          },
          "home": {
            "type": "boolean",
            "_name_": "home",
            "title": "home",
            "default": false
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "default": "",
            "type": "string"
          },
          "ro": {
            "type": "boolean",
            "_name_": "ro",
            "title": "ro",
            "default": false,
            "description": "`ro` when enabled, prohibits write access to the share."
          },
          "browsable": {
            "type": "boolean",
            "_name_": "browsable",
            "title": "browsable",
            "default": true
          },
          "timemachine": {
            "type": "boolean",
            "_name_": "timemachine",
            "title": "timemachine",
            "default": false,
            "description": "`timemachine` when set, enables Time Machine backups for this share."
          },
          "timemachine_quota": {
            "type": "integer",
            "_name_": "timemachine_quota",
            "title": "timemachine_quota",
            "default": 0
          },
          "recyclebin": {
            "type": "boolean",
            "_name_": "recyclebin",
            "title": "recyclebin",
            "default": false
          },
          "guestok": {
            "type": "boolean",
            "_name_": "guestok",
            "title": "guestok",
            "default": false,
            "description": "`guestok` when enabled, allows access to this share without a password."
          },
          "abe": {
            "type": "boolean",
            "_name_": "abe",
            "title": "abe",
            "default": false
          },
          "hostsallow": {
            "_name_": "hostsallow",
            "title": "hostsallow",
            "default": [],
            "type": "array",
            "items": {},
            "description": "`hostsallow` is a list of hostnames / IP addresses which have access to this share.\n`hostsdeny` is a list of hostnames / IP addresses which are not allowed access to this share. If a handful\nof hostnames are to be only allowed access, `hostsdeny` can be passed \"ALL\" which means that it will deny\naccess to ALL hostnames except for the ones which have been listed in `hostsallow`."
          },
          "hostsdeny": {
            "_name_": "hostsdeny",
            "title": "hostsdeny",
            "default": [],
            "type": "array",
            "items": {},
            "description": "`hostsdeny` is a list of hostnames / IP addresses which are not allowed access to this share. If a handful\nof hostnames are to be only allowed access, `hostsdeny` can be passed \"ALL\" which means that it will deny\naccess to ALL hostnames except for the ones which have been listed in `hostsallow`."
          },
          "aapl_name_mangling": {
            "type": "boolean",
            "_name_": "aapl_name_mangling",
            "title": "aapl_name_mangling",
            "default": false
          },
          "acl": {
            "type": "boolean",
            "_name_": "acl",
            "title": "acl",
            "default": true,
            "description": "`acl` enables support for storing the SMB Security Descriptor as a Filesystem ACL."
          },
          "durablehandle": {
            "type": "boolean",
            "_name_": "durablehandle",
            "title": "durablehandle",
            "default": true
          },
          "shadowcopy": {
            "type": "boolean",
            "_name_": "shadowcopy",
            "title": "shadowcopy",
            "default": true,
            "description": "`shadowcopy` enables support for the volume shadow copy service."
          },
          "streams": {
            "type": "boolean",
            "_name_": "streams",
            "title": "streams",
            "default": true,
            "description": "`streams` enables support for storing alternate datastreams as filesystem extended attributes."
          },
          "fsrvp": {
            "type": "boolean",
            "_name_": "fsrvp",
            "title": "fsrvp",
            "default": false,
            "description": "`fsrvp` enables support for the filesystem remote VSS protocol. This allows clients to create\nZFS snapshots through RPC."
          },
          "auxsmbconf": {
            "_name_": "auxsmbconf",
            "title": "auxsmbconf",
            "default": "",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          },
          "cluster_volname": {
            "_name_": "cluster_volname",
            "title": "cluster_volname",
            "default": "",
            "type": "string",
            "description": "`path` path to export over the SMB protocol. If server is clustered, then this path will be\nrelative to the `cluster_volname`."
          },
          "afp": {
            "type": "boolean",
            "_name_": "afp",
            "title": "afp",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "sharingsmb_create",
        "title": "sharingsmb_create",
        "default": {},
        "_attrs_order_": [
          "purpose",
          "path",
          "path_suffix",
          "home",
          "name",
          "comment",
          "ro",
          "browsable",
          "timemachine",
          "timemachine_quota",
          "recyclebin",
          "guestok",
          "abe",
          "hostsallow",
          "hostsdeny",
          "aapl_name_mangling",
          "acl",
          "durablehandle",
          "shadowcopy",
          "streams",
          "fsrvp",
          "auxsmbconf",
          "enabled",
          "cluster_volname",
          "afp"
        ]
      },
      "sharing_smb_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "sharing_smb_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "sharing_smb_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/sharing_smb_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/sharing_smb_get_instance_1"
          }
        }
      },
      "sharing_webdav_create_0": {
        "type": "object",
        "properties": {
          "perm": {
            "type": "boolean",
            "_name_": "perm",
            "title": "perm",
            "default": true
          },
          "ro": {
            "type": "boolean",
            "_name_": "ro",
            "title": "ro",
            "default": false,
            "description": "`ro` when enabled prohibits users from writing to this share."
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "type": "string"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "webdav_share_create",
        "title": "webdav_share_create",
        "default": {},
        "_attrs_order_": [
          "perm",
          "ro",
          "comment",
          "name",
          "path",
          "enabled"
        ]
      },
      "sharing_webdav_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "sharing_webdav_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "sharing_webdav_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/sharing_webdav_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/sharing_webdav_get_instance_1"
          }
        }
      },
      "smart_update_0": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "_name_": "interval",
            "title": "interval",
            "description": "`interval` is an integer value in minutes which defines how often smartd activates to check if any tests\nare configured to run."
          },
          "powermode": {
            "_name_": "powermode",
            "title": "powermode",
            "type": "string",
            "enum": [
              "NEVER",
              "SLEEP",
              "STANDBY",
              "IDLE"
            ]
          },
          "difference": {
            "type": "integer",
            "_name_": "difference",
            "title": "difference"
          },
          "informational": {
            "type": "integer",
            "_name_": "informational",
            "title": "informational"
          },
          "critical": {
            "type": "integer",
            "_name_": "critical",
            "title": "critical"
          }
        },
        "additionalProperties": false,
        "_name_": "smart_update",
        "title": "smart_entry",
        "default": {},
        "_attrs_order_": [
          "interval",
          "powermode",
          "difference",
          "informational",
          "critical"
        ]
      },
      "smart_test_create_0": {
        "type": "object",
        "properties": {
          "schedule": {
            "type": "object",
            "properties": {
              "hour": {
                "_name_": "hour",
                "title": "hour",
                "default": "*",
                "type": "string"
              },
              "dom": {
                "_name_": "dom",
                "title": "dom",
                "default": "*",
                "type": "string"
              },
              "month": {
                "_name_": "month",
                "title": "month",
                "default": "*",
                "type": "string"
              },
              "dow": {
                "_name_": "dow",
                "title": "dow",
                "default": "*",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "schedule",
            "title": "schedule",
            "default": {},
            "_attrs_order_": [
              "hour",
              "dom",
              "month",
              "dow"
            ]
          },
          "desc": {
            "_name_": "desc",
            "title": "desc",
            "type": "string"
          },
          "all_disks": {
            "type": "boolean",
            "_name_": "all_disks",
            "title": "all_disks",
            "default": false,
            "description": "`all_disks` when enabled sets the task to cover all disks in which case `disks` is not required."
          },
          "disks": {
            "_name_": "disks",
            "title": "disks",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "disk",
              "title": "disk",
              "_required_": false,
              "type": "string"
            },
            "description": "`disks` is a list of valid disks which should be monitored in this task.\n`all_disks` when enabled sets the task to cover all disks in which case `disks` is not required."
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "enum": [
              "LONG",
              "SHORT",
              "CONVEYANCE",
              "OFFLINE"
            ],
            "description": "`type` is specified to represent the type of SMART test to be executed."
          }
        },
        "additionalProperties": false,
        "_name_": "smart_task_create",
        "title": "smart_task_create",
        "default": {},
        "_attrs_order_": [
          "schedule",
          "desc",
          "all_disks",
          "disks",
          "type"
        ]
      },
      "smart_test_disk_choices_0": {
        "type": "boolean",
        "_name_": "full_disk",
        "title": "full_disk",
        "default": false
      },
      "smart_test_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "smart_test_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "smart_test_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/smart_test_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/smart_test_get_instance_1"
          }
        }
      },
      "smart_test_manual_test_0": {
        "_name_": "disks",
        "title": "disks",
        "default": [],
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "identifier": {
              "_name_": "identifier",
              "title": "identifier",
              "_required_": true,
              "type": "string"
            },
            "mode": {
              "_name_": "mode",
              "title": "mode",
              "default": "BACKGROUND",
              "_required_": false,
              "type": "string",
              "enum": [
                "FOREGROUND",
                "BACKGROUND"
              ]
            },
            "type": {
              "_name_": "type",
              "title": "type",
              "_required_": true,
              "type": "string",
              "enum": [
                "LONG",
                "SHORT",
                "CONVEYANCE",
                "OFFLINE"
              ]
            }
          },
          "additionalProperties": false,
          "_name_": "disk_run",
          "title": "disk_run",
          "default": {},
          "_required_": false,
          "_attrs_order_": [
            "identifier",
            "mode",
            "type"
          ]
        },
        "description": "Run manual SMART tests for `disks`."
      },
      "smart_test_query_for_disk_0": {
        "_name_": "disk",
        "title": "disk",
        "type": "string"
      },
      "smb_update_0": {
        "type": "object",
        "properties": {
          "netbiosname": {
            "_name_": "netbiosname",
            "title": "netbiosname",
            "type": "string",
            "description": "`netbiosname` defaults to the original hostname of the system.\n`workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be\nautomatically set to the correct value during the process of joining an AD domain.\nNOTE: `workgroup` and `netbiosname` should have different values."
          },
          "netbiosname_b": {
            "_name_": "netbiosname_b",
            "title": "netbiosname_b",
            "type": "string"
          },
          "netbiosalias": {
            "_name_": "netbiosalias",
            "title": "netbiosalias",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "netbios_alias",
              "title": "netbios_alias",
              "_required_": false,
              "type": "string"
            },
            "description": "`netbiosalias` a list of netbios aliases. If Server is joined to an AD domain, additional Kerberos\nService Principal Names will be generated for these aliases."
          },
          "workgroup": {
            "_name_": "workgroup",
            "title": "workgroup",
            "type": "string",
            "description": "`workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be\nautomatically set to the correct value during the process of joining an AD domain.\nNOTE: `workgroup` and `netbiosname` should have different values."
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "type": "string"
          },
          "enable_smb1": {
            "type": "boolean",
            "_name_": "enable_smb1",
            "title": "enable_smb1",
            "description": "`enable_smb1` allows legacy SMB clients to connect to the server when enabled."
          },
          "unixcharset": {
            "_name_": "unixcharset",
            "title": "unixcharset",
            "type": "string"
          },
          "loglevel": {
            "_name_": "loglevel",
            "title": "loglevel",
            "type": "string",
            "enum": [
              "NONE",
              "MINIMUM",
              "NORMAL",
              "FULL",
              "DEBUG"
            ]
          },
          "syslog": {
            "type": "boolean",
            "_name_": "syslog",
            "title": "syslog"
          },
          "aapl_extensions": {
            "type": "boolean",
            "_name_": "aapl_extensions",
            "title": "aapl_extensions",
            "description": "`aapl_extensions` enables support for SMB2 protocol extensions for MacOS clients. This is not a\nrequirement for MacOS support, but is currently a requirement for time machine support."
          },
          "localmaster": {
            "type": "boolean",
            "_name_": "localmaster",
            "title": "localmaster",
            "description": "`localmaster` when set, determines if the system participates in a browser election."
          },
          "guest": {
            "_name_": "guest",
            "title": "guest",
            "type": "string",
            "description": "`guest` attribute is specified to select the account to be used for guest access. It defaults to \"nobody\"."
          },
          "admin_group": {
            "_name_": "admin_group",
            "title": "admin_group",
            "default": null,
            "type": "string",
            "description": "The group specified as the SMB `admin_group` will be automatically added as a foreign group member\nof S-1-5-32-544 (builtin\u0007dmins). This will afford the group all privileges granted to a local admin.\nAny SMB group may be selected (including AD groups).",
            "nullable": true
          },
          "filemask": {
            "_name_": "filemask",
            "title": "filemask",
            "type": "string"
          },
          "dirmask": {
            "_name_": "dirmask",
            "title": "dirmask",
            "type": "string"
          },
          "ntlmv1_auth": {
            "type": "boolean",
            "_name_": "ntlmv1_auth",
            "title": "ntlmv1_auth",
            "description": "`ntlmv1_auth` enables a legacy and insecure authentication method, which may be required for legacy or\npoorly-implemented SMB clients."
          },
          "multichannel": {
            "type": "boolean",
            "_name_": "multichannel",
            "title": "multichannel",
            "default": false
          },
          "bindip": {
            "_name_": "bindip",
            "title": "bindip",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "ip",
              "title": "ip",
              "_required_": false,
              "type": "string"
            }
          },
          "smb_options": {
            "_name_": "smb_options",
            "title": "smb_options",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "smb_update",
        "title": "smb_update",
        "default": {},
        "_attrs_order_": [
          "netbiosname",
          "netbiosname_b",
          "netbiosalias",
          "workgroup",
          "description",
          "enable_smb1",
          "unixcharset",
          "loglevel",
          "syslog",
          "aapl_extensions",
          "localmaster",
          "guest",
          "admin_group",
          "filemask",
          "dirmask",
          "ntlmv1_auth",
          "multichannel",
          "bindip",
          "smb_options"
        ]
      },
      "smb_get_remote_acl_0": {
        "type": "object",
        "properties": {
          "server": {
            "_name_": "server",
            "title": "server",
            "type": "string",
            "description": "`server` IP Address or hostname of the remote server"
          },
          "share": {
            "_name_": "share",
            "title": "share",
            "type": "string",
            "description": "`share` Share name"
          },
          "path": {
            "_name_": "path",
            "title": "path",
            "default": "\\",
            "type": "string",
            "description": "`path` path on the remote SMB server. Use \"\" to separate path components"
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string",
            "description": "`username` username to use for authentication"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string",
            "description": "`password` password to use for authentication"
          },
          "options": {
            "type": "object",
            "properties": {
              "use_kerberos": {
                "type": "boolean",
                "_name_": "use_kerberos",
                "title": "use_kerberos",
                "default": false
              },
              "output_format": {
                "_name_": "output_format",
                "title": "output_format",
                "default": "SMB",
                "type": "string",
                "enum": [
                  "SMB",
                  "LOCAL"
                ]
              }
            },
            "additionalProperties": false,
            "_name_": "options",
            "title": "options",
            "default": {},
            "_attrs_order_": [
              "use_kerberos",
              "output_format"
            ]
          }
        },
        "additionalProperties": false,
        "_name_": "get_remote_acl",
        "title": "get_remote_acl",
        "default": {},
        "_attrs_order_": [
          "server",
          "share",
          "path",
          "username",
          "password",
          "options"
        ]
      },
      "smb_status_0": {
        "_name_": "info_level",
        "title": "info_level",
        "default": "ALL",
        "type": "string",
        "enum": [
          "AUTH_LOG",
          "ALL",
          "SESSIONS",
          "SHARES",
          "LOCKS",
          "BYTERANGE",
          "NOTIFICATIONS"
        ],
        "description": "`info_level` type of information requests. Defaults to ALL."
      },
      "smb_status_1": {
        "_name_": "query-filters",
        "title": "query-filters",
        "default": [],
        "type": "array",
        "items": {}
      },
      "smb_status_2": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "query-options",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "smb_status_3": {
        "type": "object",
        "properties": {
          "verbose": {
            "type": "boolean",
            "_name_": "verbose",
            "title": "verbose",
            "default": true,
            "description": "`status_options` additional options to filter query results. Supported\nvalues are as follows: `verbose` gives more verbose status output"
          },
          "fast": {
            "type": "boolean",
            "_name_": "fast",
            "title": "fast",
            "default": false
          },
          "restrict_user": {
            "_name_": "restrict_user",
            "title": "restrict_user",
            "default": "",
            "type": "string"
          },
          "restrict_session": {
            "_name_": "restrict_session",
            "title": "restrict_session",
            "default": "",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "status_options",
        "title": "status_options",
        "default": {},
        "_attrs_order_": [
          "verbose",
          "fast",
          "restrict_user",
          "restrict_session"
        ],
        "description": "`status_options` additional options to filter query results. Supported\nvalues are as follows: `verbose` gives more verbose status output"
      },
      "smb_status": {
        "type": "object",
        "properties": {
          "info_level": {
            "$ref": "#/components/schemas/smb_status_0"
          },
          "query-filters": {
            "$ref": "#/components/schemas/smb_status_1"
          },
          "query-options": {
            "$ref": "#/components/schemas/smb_status_2"
          },
          "status_options": {
            "$ref": "#/components/schemas/smb_status_3"
          }
        }
      },
      "smb_sharesec_create_0": {
        "type": "object",
        "properties": {
          "share_name": {
            "_name_": "share_name",
            "title": "share_name",
            "type": "string",
            "description": "`share_name` - name of SMB share."
          },
          "share_acl": {
            "_name_": "share_acl",
            "title": "share_acl",
            "default": [
              {
                "ae_who_sid": "S-1-1-0",
                "ae_perm": "FULL",
                "ae_type": "ALLOWED"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ae_who_sid": {
                  "_name_": "ae_who_sid",
                  "title": "ae_who_sid",
                  "default": null,
                  "_required_": false,
                  "type": "string"
                },
                "ae_who_name": {
                  "type": "object",
                  "properties": {
                    "domain": {
                      "_name_": "domain",
                      "title": "domain",
                      "default": "",
                      "_required_": false,
                      "type": "string"
                    },
                    "name": {
                      "_name_": "name",
                      "title": "name",
                      "default": "",
                      "_required_": false,
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "_name_": "ae_who_name",
                  "title": "ae_who_name",
                  "default": null,
                  "_required_": false,
                  "_attrs_order_": [
                    "domain",
                    "name"
                  ]
                },
                "ae_perm": {
                  "_name_": "ae_perm",
                  "title": "ae_perm",
                  "_required_": false,
                  "type": "string",
                  "enum": [
                    "FULL",
                    "CHANGE",
                    "READ"
                  ]
                },
                "ae_type": {
                  "_name_": "ae_type",
                  "title": "ae_type",
                  "_required_": false,
                  "type": "string",
                  "enum": [
                    "ALLOWED",
                    "DENIED"
                  ]
                }
              },
              "additionalProperties": false,
              "_name_": "aclentry",
              "title": "aclentry",
              "default": {},
              "_required_": false,
              "_attrs_order_": [
                "ae_who_sid",
                "ae_who_name",
                "ae_perm",
                "ae_type"
              ]
            },
            "description": "`share_acl` a list of ACL entries (dictionaries) with the following keys:"
          }
        },
        "additionalProperties": false,
        "_name_": "smbsharesec_create",
        "title": "smbsharesec_create",
        "default": {},
        "_attrs_order_": [
          "share_name",
          "share_acl"
        ]
      },
      "smb_sharesec_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "smb_sharesec_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "smb_sharesec_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/smb_sharesec_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/smb_sharesec_get_instance_1"
          }
        }
      },
      "smb_sharesec_getacl_0": {
        "_name_": "share_name",
        "title": "share_name",
        "type": "string",
        "description": "View the ACL information for `share_name`. The share ACL is distinct from filesystem\nACLs which can be viewed by calling `filesystem.getacl`. `ae_who_name` will appear\nas `None` if the SMB service is stopped or if winbind is unable  to resolve the SID\nto a name."
      },
      "smb_sharesec_getacl_1": {
        "type": "object",
        "properties": {
          "resolve_sids": {
            "type": "boolean",
            "_name_": "resolve_sids",
            "title": "resolve_sids",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "resolve_sids"
        ]
      },
      "smb_sharesec_getacl": {
        "type": "object",
        "properties": {
          "share_name": {
            "$ref": "#/components/schemas/smb_sharesec_getacl_0"
          },
          "options": {
            "$ref": "#/components/schemas/smb_sharesec_getacl_1"
          }
        }
      },
      "snmp_update_0": {
        "type": "object",
        "properties": {
          "location": {
            "_name_": "location",
            "title": "location",
            "type": "string"
          },
          "contact": {
            "_name_": "contact",
            "title": "contact",
            "type": "string"
          },
          "traps": {
            "type": "boolean",
            "_name_": "traps",
            "title": "traps"
          },
          "v3": {
            "type": "boolean",
            "_name_": "v3",
            "title": "v3",
            "description": "`v3` when set enables SNMP version 3."
          },
          "community": {
            "_name_": "community",
            "title": "community",
            "default": "public",
            "type": "string"
          },
          "v3_username": {
            "_name_": "v3_username",
            "title": "v3_username",
            "type": "string"
          },
          "v3_authtype": {
            "_name_": "v3_authtype",
            "title": "v3_authtype",
            "type": "string",
            "enum": [
              "",
              "MD5",
              "SHA"
            ]
          },
          "v3_password": {
            "_name_": "v3_password",
            "title": "v3_password",
            "type": "string"
          },
          "v3_privproto": {
            "_name_": "v3_privproto",
            "title": "v3_privproto",
            "type": "string",
            "enum": [
              null,
              "AES",
              "DES"
            ],
            "nullable": true
          },
          "v3_privpassphrase": {
            "_name_": "v3_privpassphrase",
            "title": "v3_privpassphrase",
            "type": "string",
            "nullable": true
          },
          "loglevel": {
            "type": "integer",
            "_name_": "loglevel",
            "title": "loglevel"
          },
          "options": {
            "_name_": "options",
            "title": "options",
            "type": "string"
          },
          "zilstat": {
            "type": "boolean",
            "_name_": "zilstat",
            "title": "zilstat"
          }
        },
        "additionalProperties": false,
        "_name_": "snmp_update",
        "title": "snmp_entry",
        "default": {},
        "_attrs_order_": [
          "location",
          "contact",
          "traps",
          "v3",
          "community",
          "v3_username",
          "v3_authtype",
          "v3_password",
          "v3_privproto",
          "v3_privpassphrase",
          "loglevel",
          "options",
          "zilstat"
        ]
      },
      "ssh_update_0": {
        "type": "object",
        "properties": {
          "bindiface": {
            "_name_": "bindiface",
            "title": "bindiface",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "iface",
              "title": "iface",
              "_required_": false,
              "type": "string"
            },
            "description": "If `bindiface` is empty it will listen for all available addresses."
          },
          "tcpport": {
            "type": "integer",
            "_name_": "tcpport",
            "title": "tcpport"
          },
          "rootlogin": {
            "type": "boolean",
            "_name_": "rootlogin",
            "title": "rootlogin"
          },
          "adminlogin": {
            "type": "boolean",
            "_name_": "adminlogin",
            "title": "adminlogin"
          },
          "passwordauth": {
            "type": "boolean",
            "_name_": "passwordauth",
            "title": "passwordauth"
          },
          "kerberosauth": {
            "type": "boolean",
            "_name_": "kerberosauth",
            "title": "kerberosauth"
          },
          "tcpfwd": {
            "type": "boolean",
            "_name_": "tcpfwd",
            "title": "tcpfwd"
          },
          "compression": {
            "type": "boolean",
            "_name_": "compression",
            "title": "compression"
          },
          "sftp_log_level": {
            "_name_": "sftp_log_level",
            "title": "sftp_log_level",
            "type": "string",
            "enum": [
              "",
              "QUIET",
              "FATAL",
              "ERROR",
              "INFO",
              "VERBOSE",
              "DEBUG",
              "DEBUG2",
              "DEBUG3"
            ]
          },
          "sftp_log_facility": {
            "_name_": "sftp_log_facility",
            "title": "sftp_log_facility",
            "type": "string",
            "enum": [
              "",
              "DAEMON",
              "USER",
              "AUTH",
              "LOCAL0",
              "LOCAL1",
              "LOCAL2",
              "LOCAL3",
              "LOCAL4",
              "LOCAL5",
              "LOCAL6",
              "LOCAL7"
            ]
          },
          "weak_ciphers": {
            "_name_": "weak_ciphers",
            "title": "weak_ciphers",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "cipher",
              "title": "cipher",
              "_required_": false,
              "type": "string",
              "enum": [
                "AES128-CBC",
                "NONE"
              ]
            }
          },
          "options": {
            "_name_": "options",
            "title": "options",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "ssh_update",
        "title": "ssh_entry",
        "default": {},
        "_attrs_order_": [
          "bindiface",
          "tcpport",
          "rootlogin",
          "adminlogin",
          "passwordauth",
          "kerberosauth",
          "tcpfwd",
          "compression",
          "sftp_log_level",
          "sftp_log_facility",
          "weak_ciphers",
          "options"
        ]
      },
      "staticroute_create_0": {
        "type": "object",
        "properties": {
          "destination": {
            "_name_": "destination",
            "title": "destination",
            "type": "string",
            "description": "Address families of `gateway` and `destination` should match when creating a static route."
          },
          "gateway": {
            "_name_": "gateway",
            "title": "gateway",
            "type": "string",
            "description": "Address families of `gateway` and `destination` should match when creating a static route."
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "default": "",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "staticroute_create",
        "title": "staticroute_entry",
        "default": {},
        "_attrs_order_": [
          "destination",
          "gateway",
          "description"
        ]
      },
      "staticroute_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "staticroute_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "staticroute_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/staticroute_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/staticroute_get_instance_1"
          }
        }
      },
      "stats_get_data_0": {
        "_name_": "stats_list",
        "title": "stats_list",
        "default": [],
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "source": {
              "_name_": "source",
              "title": "source",
              "_required_": false,
              "type": "string"
            },
            "type": {
              "_name_": "type",
              "title": "type",
              "_required_": false,
              "type": "string"
            },
            "dataset": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            },
            "cf": {
              "_name_": "cf",
              "title": "cf",
              "default": "AVERAGE",
              "_required_": false,
              "type": "string"
            }
          },
          "additionalProperties": false,
          "_name_": "stats-data",
          "title": "stats-data",
          "default": {},
          "_required_": false,
          "_attrs_order_": [
            "source",
            "type",
            "dataset",
            "cf"
          ]
        }
      },
      "stats_get_data_1": {
        "type": "object",
        "properties": {
          "step": {
            "type": "integer",
            "_name_": "step",
            "title": "step",
            "default": 10
          },
          "start": {
            "_name_": "start",
            "title": "start",
            "default": "now-1h",
            "type": "string"
          },
          "end": {
            "_name_": "end",
            "title": "end",
            "default": "now",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "stats-filter",
        "title": "stats-filter",
        "default": {},
        "_attrs_order_": [
          "step",
          "start",
          "end"
        ]
      },
      "stats_get_data": {
        "type": "object",
        "properties": {
          "stats_list": {
            "$ref": "#/components/schemas/stats_get_data_0"
          },
          "stats-filter": {
            "$ref": "#/components/schemas/stats_get_data_1"
          }
        }
      },
      "stats_get_dataset_info_0": {
        "_name_": "source",
        "title": "source",
        "type": "string"
      },
      "stats_get_dataset_info_1": {
        "_name_": "type",
        "title": "type",
        "type": "string"
      },
      "stats_get_dataset_info": {
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/stats_get_dataset_info_0"
          },
          "type": {
            "$ref": "#/components/schemas/stats_get_dataset_info_1"
          }
        }
      },
      "support_update_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "nullable": true
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "title": {
            "_name_": "title",
            "title": "title",
            "type": "string"
          },
          "email": {
            "_name_": "email",
            "title": "email",
            "type": "string"
          },
          "phone": {
            "_name_": "phone",
            "title": "phone",
            "type": "string"
          },
          "secondary_name": {
            "_name_": "secondary_name",
            "title": "secondary_name",
            "type": "string"
          },
          "secondary_title": {
            "_name_": "secondary_title",
            "title": "secondary_title",
            "type": "string"
          },
          "secondary_email": {
            "_name_": "secondary_email",
            "title": "secondary_email",
            "type": "string"
          },
          "secondary_phone": {
            "_name_": "secondary_phone",
            "title": "secondary_phone",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "support_update",
        "title": "support_entry",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "name",
          "title",
          "email",
          "phone",
          "secondary_name",
          "secondary_title",
          "secondary_email",
          "secondary_phone"
        ]
      },
      "support_attach_ticket_0": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "integer",
            "_name_": "ticket",
            "title": "ticket"
          },
          "filename": {
            "_name_": "filename",
            "title": "filename",
            "type": "string"
          },
          "token": {
            "_name_": "token",
            "title": "token",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "attach_ticket",
        "title": "attach_ticket",
        "default": {},
        "_attrs_order_": [
          "ticket",
          "filename",
          "token"
        ]
      },
      "support_fetch_categories_0": {
        "_name_": "token",
        "title": "token",
        "default": "",
        "type": "string"
      },
      "support_new_ticket_0": {
        "type": "object",
        "properties": {
          "title": {
            "_name_": "title",
            "title": "title",
            "type": "string"
          },
          "body": {
            "_name_": "body",
            "title": "body",
            "type": "string"
          },
          "category": {
            "_name_": "category",
            "title": "category",
            "type": "string"
          },
          "attach_debug": {
            "type": "boolean",
            "_name_": "attach_debug",
            "title": "attach_debug",
            "default": false
          },
          "token": {
            "_name_": "token",
            "title": "token",
            "type": "string"
          },
          "type": {
            "_name_": "type",
            "title": "type",
            "type": "string",
            "enum": [
              "BUG",
              "FEATURE"
            ]
          },
          "criticality": {
            "_name_": "criticality",
            "title": "criticality",
            "type": "string",
            "description": "For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required."
          },
          "environment": {
            "_name_": "environment",
            "title": "environment",
            "type": "string",
            "description": "For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required."
          },
          "phone": {
            "_name_": "phone",
            "title": "phone",
            "type": "string",
            "description": "For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required."
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string",
            "description": "For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required."
          },
          "email": {
            "_name_": "email",
            "title": "email",
            "type": "string",
            "description": "For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required."
          },
          "cc": {
            "_name_": "cc",
            "title": "cc",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "email",
              "title": "email",
              "_required_": false,
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "_name_": "new_ticket",
        "title": "new_ticket",
        "default": {},
        "_attrs_order_": [
          "title",
          "body",
          "category",
          "attach_debug",
          "token",
          "type",
          "criticality",
          "environment",
          "phone",
          "name",
          "email",
          "cc"
        ]
      },
      "system_feature_enabled_0": {
        "_name_": "feature",
        "title": "feature",
        "type": "string",
        "enum": [
          "DEDUP",
          "FIBRECHANNEL",
          "VM"
        ]
      },
      "system_license_update_0": {
        "_name_": "license",
        "title": "license",
        "type": "string"
      },
      "system_reboot_0": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "integer",
            "_name_": "delay",
            "title": "delay"
          }
        },
        "additionalProperties": false,
        "_name_": "system-reboot",
        "title": "system-reboot",
        "default": {},
        "_attrs_order_": [
          "delay"
        ]
      },
      "system_shutdown_0": {
        "type": "object",
        "properties": {
          "delay": {
            "type": "integer",
            "_name_": "delay",
            "title": "delay"
          }
        },
        "additionalProperties": false,
        "_name_": "system-shutdown",
        "title": "system-shutdown",
        "default": {},
        "_attrs_order_": [
          "delay"
        ]
      },
      "system_advanced_update_0": {
        "type": "object",
        "properties": {
          "advancedmode": {
            "type": "boolean",
            "_name_": "advancedmode",
            "title": "advancedmode"
          },
          "autotune": {
            "type": "boolean",
            "_name_": "autotune",
            "title": "autotune",
            "description": "`autotune` when enabled executes autotune script which attempts to optimize the system based on the installed\nhardware."
          },
          "kdump_enabled": {
            "type": "boolean",
            "_name_": "kdump_enabled",
            "title": "kdump_enabled"
          },
          "boot_scrub": {
            "type": "integer",
            "_name_": "boot_scrub",
            "title": "boot_scrub"
          },
          "consolemenu": {
            "type": "boolean",
            "_name_": "consolemenu",
            "title": "consolemenu",
            "description": "`consolemenu` should be disabled if the menu at console is not desired. It will default to standard login\nin the console if disabled."
          },
          "consolemsg": {
            "type": "boolean",
            "_name_": "consolemsg",
            "title": "consolemsg",
            "description": "`consolemsg` is a deprecated attribute and will be removed in further releases. Please, use `consolemsg`\nattribute in the `system.general` plugin."
          },
          "debugkernel": {
            "type": "boolean",
            "_name_": "debugkernel",
            "title": "debugkernel"
          },
          "fqdn_syslog": {
            "type": "boolean",
            "_name_": "fqdn_syslog",
            "title": "fqdn_syslog"
          },
          "motd": {
            "_name_": "motd",
            "title": "motd",
            "type": "string"
          },
          "powerdaemon": {
            "type": "boolean",
            "_name_": "powerdaemon",
            "title": "powerdaemon"
          },
          "serialconsole": {
            "type": "boolean",
            "_name_": "serialconsole",
            "title": "serialconsole"
          },
          "serialport": {
            "_name_": "serialport",
            "title": "serialport",
            "type": "string"
          },
          "serialspeed": {
            "_name_": "serialspeed",
            "title": "serialspeed",
            "type": "string",
            "enum": [
              "9600",
              "19200",
              "38400",
              "57600",
              "115200"
            ]
          },
          "swapondrive": {
            "type": "integer",
            "_name_": "swapondrive",
            "title": "swapondrive"
          },
          "overprovision": {
            "type": "integer",
            "_name_": "overprovision",
            "title": "overprovision",
            "nullable": true
          },
          "traceback": {
            "type": "boolean",
            "_name_": "traceback",
            "title": "traceback"
          },
          "uploadcrash": {
            "type": "boolean",
            "_name_": "uploadcrash",
            "title": "uploadcrash"
          },
          "anonstats": {
            "type": "boolean",
            "_name_": "anonstats",
            "title": "anonstats"
          },
          "sed_user": {
            "_name_": "sed_user",
            "title": "sed_user",
            "type": "string",
            "enum": [
              "USER",
              "MASTER"
            ]
          },
          "sysloglevel": {
            "_name_": "sysloglevel",
            "title": "sysloglevel",
            "type": "string",
            "enum": [
              "F_EMERG",
              "F_ALERT",
              "F_CRIT",
              "F_ERR",
              "F_WARNING",
              "F_NOTICE",
              "F_INFO",
              "F_DEBUG"
            ],
            "description": "When `syslogserver` is defined, logs of `sysloglevel` or above are sent."
          },
          "syslogserver": {
            "_name_": "syslogserver",
            "title": "syslogserver",
            "type": "string",
            "description": "When `syslogserver` is defined, logs of `sysloglevel` or above are sent."
          },
          "syslog_transport": {
            "_name_": "syslog_transport",
            "title": "syslog_transport",
            "type": "string",
            "enum": [
              "UDP",
              "TCP",
              "TLS"
            ]
          },
          "syslog_tls_certificate": {
            "type": "integer",
            "_name_": "syslog_tls_certificate",
            "title": "syslog_tls_certificate",
            "nullable": true
          },
          "syslog_tls_certificate_authority": {
            "type": "integer",
            "_name_": "syslog_tls_certificate_authority",
            "title": "syslog_tls_certificate_authority",
            "nullable": true
          },
          "isolated_gpu_pci_ids": {
            "_name_": "isolated_gpu_pci_ids",
            "title": "isolated_gpu_pci_ids",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "pci_id",
              "title": "pci_id",
              "_required_": false,
              "type": "string"
            }
          },
          "kernel_extra_options": {
            "_name_": "kernel_extra_options",
            "title": "kernel_extra_options",
            "type": "string"
          },
          "sed_passwd": {
            "_name_": "sed_passwd",
            "title": "sed_passwd",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "system_advanced_update",
        "title": "system_advanced_entry",
        "default": {},
        "_attrs_order_": [
          "advancedmode",
          "autotune",
          "kdump_enabled",
          "boot_scrub",
          "consolemenu",
          "consolemsg",
          "debugkernel",
          "fqdn_syslog",
          "motd",
          "powerdaemon",
          "serialconsole",
          "serialport",
          "serialspeed",
          "swapondrive",
          "overprovision",
          "traceback",
          "uploadcrash",
          "anonstats",
          "sed_user",
          "sysloglevel",
          "syslogserver",
          "syslog_transport",
          "syslog_tls_certificate",
          "syslog_tls_certificate_authority",
          "isolated_gpu_pci_ids",
          "kernel_extra_options",
          "sed_passwd"
        ]
      },
      "system_advanced_update_gpu_pci_ids_0": {
        "_name_": "isolated_gpu_pci_ids",
        "title": "isolated_gpu_pci_ids",
        "default": [],
        "type": "array",
        "items": {
          "_name_": "pci_id",
          "title": "pci_id",
          "_required_": false,
          "type": "string"
        }
      },
      "system_general_update_0": {
        "type": "object",
        "properties": {
          "ui_httpsport": {
            "type": "integer",
            "_name_": "ui_httpsport",
            "title": "ui_httpsport"
          },
          "ui_httpsredirect": {
            "type": "boolean",
            "_name_": "ui_httpsredirect",
            "title": "ui_httpsredirect",
            "description": "`ui_httpsredirect` when set, makes sure that all HTTP requests are converted to HTTPS requests to better\nenhance security."
          },
          "ui_httpsprotocols": {
            "_name_": "ui_httpsprotocols",
            "title": "ui_httpsprotocols",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "protocol",
              "title": "protocol",
              "_required_": false,
              "type": "string",
              "enum": [
                "TLSv1",
                "TLSv1.1",
                "TLSv1.2",
                "TLSv1.3"
              ]
            }
          },
          "ui_port": {
            "type": "integer",
            "_name_": "ui_port",
            "title": "ui_port"
          },
          "ui_address": {
            "_name_": "ui_address",
            "title": "ui_address",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "addr",
              "title": "addr",
              "_required_": false,
              "type": "string"
            },
            "description": "`ui_address` and `ui_v6address` are a list of valid ipv4/ipv6 addresses respectively which the system will\nlisten on."
          },
          "ui_v6address": {
            "_name_": "ui_v6address",
            "title": "ui_v6address",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "addr",
              "title": "addr",
              "_required_": false,
              "type": "string"
            },
            "description": "`ui_address` and `ui_v6address` are a list of valid ipv4/ipv6 addresses respectively which the system will\nlisten on."
          },
          "ui_allowlist": {
            "_name_": "ui_allowlist",
            "title": "ui_allowlist",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "addr",
              "title": "addr",
              "_required_": false,
              "type": "string"
            },
            "description": "`ui_allowlist` is a list of IP addresses and networks that are allow to use API and UI. If this list is empty,\nthen all IP addresses are allowed to use API and UI."
          },
          "ui_consolemsg": {
            "type": "boolean",
            "_name_": "ui_consolemsg",
            "title": "ui_consolemsg"
          },
          "ui_x_frame_options": {
            "_name_": "ui_x_frame_options",
            "title": "ui_x_frame_options",
            "type": "string",
            "enum": [
              "SAMEORIGIN",
              "DENY",
              "ALLOW_ALL"
            ]
          },
          "kbdmap": {
            "_name_": "kbdmap",
            "title": "kbdmap",
            "type": "string"
          },
          "language": {
            "_name_": "language",
            "title": "language",
            "type": "string"
          },
          "timezone": {
            "_name_": "timezone",
            "title": "timezone",
            "type": "string"
          },
          "crash_reporting": {
            "type": "boolean",
            "_name_": "crash_reporting",
            "title": "crash_reporting",
            "nullable": true
          },
          "usage_collection": {
            "type": "boolean",
            "_name_": "usage_collection",
            "title": "usage_collection",
            "nullable": true
          },
          "birthday": {
            "_name_": "birthday",
            "title": "birthday",
            "type": "string"
          },
          "ds_auth": {
            "type": "boolean",
            "_name_": "ds_auth",
            "title": "ds_auth",
            "description": "`ds_auth` controls whether configured Directory Service users that are granted with Privileges are allowed to\nlog in to the Web UI or use TrueNAS API."
          },
          "ui_certificate": {
            "type": "integer",
            "_name_": "ui_certificate",
            "title": "ui_certificate",
            "description": "`ui_certificate` is used to enable HTTPS access to the system. If `ui_certificate` is not configured on boot,\nit is automatically created by the system.",
            "nullable": true
          },
          "rollback_timeout": {
            "type": "integer",
            "_name_": "rollback_timeout",
            "title": "rollback_timeout",
            "nullable": true
          },
          "ui_restart_delay": {
            "type": "integer",
            "_name_": "ui_restart_delay",
            "title": "ui_restart_delay",
            "description": "HTTP connections will be aborted) or specify `ui_restart_delay` (in seconds) to automatically apply them after\nsome small amount of time necessary you might need to receive the response for your settings update request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "general_settings",
        "title": "system_general_entry",
        "default": {},
        "_attrs_order_": [
          "ui_httpsport",
          "ui_httpsredirect",
          "ui_httpsprotocols",
          "ui_port",
          "ui_address",
          "ui_v6address",
          "ui_allowlist",
          "ui_consolemsg",
          "ui_x_frame_options",
          "kbdmap",
          "language",
          "timezone",
          "crash_reporting",
          "usage_collection",
          "birthday",
          "ds_auth",
          "ui_certificate",
          "rollback_timeout",
          "ui_restart_delay"
        ]
      },
      "system_general_ui_restart_0": {
        "type": "integer",
        "_name_": "delay",
        "title": "delay",
        "default": 3
      },
      "system_ntpserver_create_0": {
        "type": "object",
        "properties": {
          "address": {
            "_name_": "address",
            "title": "address",
            "type": "string",
            "description": "`address` specifies the hostname/IP address of the NTP server."
          },
          "burst": {
            "type": "boolean",
            "_name_": "burst",
            "title": "burst",
            "default": false,
            "description": "`burst` when enabled makes sure that if server is reachable, sends a burst of eight packets instead of one.\nThis is designed to improve timekeeping quality with the server command."
          },
          "iburst": {
            "type": "boolean",
            "_name_": "iburst",
            "title": "iburst",
            "default": true,
            "description": "`iburst` when enabled speeds up the initial synchronization, taking seconds rather than minutes."
          },
          "prefer": {
            "type": "boolean",
            "_name_": "prefer",
            "title": "prefer",
            "default": false,
            "description": "`prefer` marks the specified server as preferred. When all other things are equal, this host is chosen\nfor synchronization acquisition with the server command. It is recommended that they be used for servers with\ntime monitoring hardware."
          },
          "minpoll": {
            "type": "integer",
            "_name_": "minpoll",
            "title": "minpoll",
            "default": 6,
            "description": "`minpoll` is minimum polling time in seconds. It must be a power of 2 and less than `maxpoll`.\n`maxpoll` is maximum polling time in seconds. It must be a power of 2 and greater than `minpoll`."
          },
          "maxpoll": {
            "type": "integer",
            "_name_": "maxpoll",
            "title": "maxpoll",
            "default": 10,
            "description": "`minpoll` is minimum polling time in seconds. It must be a power of 2 and less than `maxpoll`.\n`maxpoll` is maximum polling time in seconds. It must be a power of 2 and greater than `minpoll`."
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force"
          }
        },
        "additionalProperties": false,
        "_name_": "ntp_create",
        "title": "ntp_create",
        "default": {},
        "_attrs_order_": [
          "address",
          "burst",
          "iburst",
          "prefer",
          "minpoll",
          "maxpoll",
          "force"
        ]
      },
      "system_ntpserver_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "system_ntpserver_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "system_ntpserver_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/system_ntpserver_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/system_ntpserver_get_instance_1"
          }
        }
      },
      "systemdataset_update_0": {
        "type": "object",
        "properties": {
          "pool": {
            "_name_": "pool",
            "title": "pool",
            "type": "string",
            "description": "`pool` is the name of a valid pool configured in the system which will be used to host the system dataset.",
            "nullable": true
          },
          "pool_exclude": {
            "_name_": "pool_exclude",
            "title": "pool_exclude",
            "type": "string",
            "nullable": true
          },
          "syslog": {
            "type": "boolean",
            "_name_": "syslog",
            "title": "syslog"
          }
        },
        "additionalProperties": false,
        "_name_": "sysdataset_update",
        "title": "sysdataset_update",
        "default": {},
        "_attrs_order_": [
          "pool",
          "pool_exclude",
          "syslog"
        ]
      },
      "systemdataset_pool_choices_0": {
        "type": "boolean",
        "_name_": "include_current_pool",
        "title": "include_current_pool",
        "default": true
      },
      "tftp_update_0": {
        "type": "object",
        "properties": {
          "newfiles": {
            "type": "boolean",
            "_name_": "newfiles",
            "title": "newfiles",
            "description": "`newfiles` when set enables network devices to send files to the system."
          },
          "host": {
            "_name_": "host",
            "title": "host",
            "type": "string"
          },
          "port": {
            "type": "integer",
            "_name_": "port",
            "title": "port"
          },
          "options": {
            "_name_": "options",
            "title": "options",
            "type": "string"
          },
          "umask": {
            "_name_": "umask",
            "title": "umask",
            "type": "string"
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "directory": {
            "_name_": "directory",
            "title": "directory",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "tftp_update",
        "title": "tftp_entry",
        "default": {},
        "_attrs_order_": [
          "newfiles",
          "host",
          "port",
          "options",
          "umask",
          "username",
          "directory"
        ]
      },
      "truecommand_update_0": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled"
          },
          "api_key": {
            "_name_": "api_key",
            "title": "api_key",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "truecommand_update",
        "title": "truecommand_update",
        "default": {},
        "_attrs_order_": [
          "enabled",
          "api_key"
        ]
      },
      "truenas_set_production_0": {
        "type": "boolean",
        "_name_": "production",
        "title": "production"
      },
      "truenas_set_production_1": {
        "type": "boolean",
        "_name_": "attach_debug",
        "title": "attach_debug",
        "default": false
      },
      "truenas_set_production": {
        "type": "object",
        "properties": {
          "production": {
            "$ref": "#/components/schemas/truenas_set_production_0"
          },
          "attach_debug": {
            "$ref": "#/components/schemas/truenas_set_production_1"
          }
        }
      },
      "truenas_update_customer_information_0": {
        "type": "object",
        "properties": {
          "company": {
            "_name_": "company",
            "title": "company",
            "type": "string"
          },
          "administrative_user": {
            "type": "object",
            "properties": {
              "first_name": {
                "_name_": "first_name",
                "title": "first_name",
                "type": "string"
              },
              "last_name": {
                "_name_": "last_name",
                "title": "last_name",
                "type": "string"
              },
              "title": {
                "_name_": "title",
                "title": "title",
                "type": "string"
              },
              "office_phone": {
                "_name_": "office_phone",
                "title": "office_phone",
                "type": "string"
              },
              "mobile_phone": {
                "_name_": "mobile_phone",
                "title": "mobile_phone",
                "type": "string"
              },
              "primary_email": {
                "_name_": "primary_email",
                "title": "primary_email",
                "type": "string"
              },
              "secondary_email": {
                "_name_": "secondary_email",
                "title": "secondary_email",
                "type": "string"
              },
              "address": {
                "_name_": "address",
                "title": "address",
                "type": "string"
              },
              "city": {
                "_name_": "city",
                "title": "city",
                "type": "string"
              },
              "state": {
                "_name_": "state",
                "title": "state",
                "type": "string"
              },
              "zip": {
                "_name_": "zip",
                "title": "zip",
                "type": "string"
              },
              "country": {
                "_name_": "country",
                "title": "country",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "administrative_user",
            "title": "administrative_user",
            "default": {},
            "_attrs_order_": [
              "first_name",
              "last_name",
              "title",
              "office_phone",
              "mobile_phone",
              "primary_email",
              "secondary_email",
              "address",
              "city",
              "state",
              "zip",
              "country"
            ]
          },
          "technical_user": {
            "type": "object",
            "properties": {
              "first_name": {
                "_name_": "first_name",
                "title": "first_name",
                "type": "string"
              },
              "last_name": {
                "_name_": "last_name",
                "title": "last_name",
                "type": "string"
              },
              "title": {
                "_name_": "title",
                "title": "title",
                "type": "string"
              },
              "office_phone": {
                "_name_": "office_phone",
                "title": "office_phone",
                "type": "string"
              },
              "mobile_phone": {
                "_name_": "mobile_phone",
                "title": "mobile_phone",
                "type": "string"
              },
              "primary_email": {
                "_name_": "primary_email",
                "title": "primary_email",
                "type": "string"
              },
              "secondary_email": {
                "_name_": "secondary_email",
                "title": "secondary_email",
                "type": "string"
              },
              "address": {
                "_name_": "address",
                "title": "address",
                "type": "string"
              },
              "city": {
                "_name_": "city",
                "title": "city",
                "type": "string"
              },
              "state": {
                "_name_": "state",
                "title": "state",
                "type": "string"
              },
              "zip": {
                "_name_": "zip",
                "title": "zip",
                "type": "string"
              },
              "country": {
                "_name_": "country",
                "title": "country",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "technical_user",
            "title": "technical_user",
            "default": {},
            "_attrs_order_": [
              "first_name",
              "last_name",
              "title",
              "office_phone",
              "mobile_phone",
              "primary_email",
              "secondary_email",
              "address",
              "city",
              "state",
              "zip",
              "country"
            ]
          },
          "reseller": {
            "type": "object",
            "properties": {
              "company": {
                "_name_": "company",
                "title": "company",
                "type": "string"
              },
              "first_name": {
                "_name_": "first_name",
                "title": "first_name",
                "type": "string"
              },
              "last_name": {
                "_name_": "last_name",
                "title": "last_name",
                "type": "string"
              },
              "title": {
                "_name_": "title",
                "title": "title",
                "type": "string"
              },
              "office_phone": {
                "_name_": "office_phone",
                "title": "office_phone",
                "type": "string"
              },
              "mobile_phone": {
                "_name_": "mobile_phone",
                "title": "mobile_phone",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "reseller",
            "title": "reseller",
            "default": {},
            "_attrs_order_": [
              "company",
              "first_name",
              "last_name",
              "title",
              "office_phone",
              "mobile_phone"
            ]
          },
          "physical_location": {
            "type": "object",
            "properties": {
              "address": {
                "_name_": "address",
                "title": "address",
                "type": "string"
              },
              "city": {
                "_name_": "city",
                "title": "city",
                "type": "string"
              },
              "state": {
                "_name_": "state",
                "title": "state",
                "type": "string"
              },
              "zip": {
                "_name_": "zip",
                "title": "zip",
                "type": "string"
              },
              "country": {
                "_name_": "country",
                "title": "country",
                "type": "string"
              },
              "contact_name": {
                "_name_": "contact_name",
                "title": "contact_name",
                "type": "string"
              },
              "contact_phone_number": {
                "_name_": "contact_phone_number",
                "title": "contact_phone_number",
                "type": "string"
              },
              "contact_email": {
                "_name_": "contact_email",
                "title": "contact_email",
                "type": "string"
              }
            },
            "additionalProperties": false,
            "_name_": "physical_location",
            "title": "physical_location",
            "default": {},
            "_attrs_order_": [
              "address",
              "city",
              "state",
              "zip",
              "country",
              "contact_name",
              "contact_phone_number",
              "contact_email"
            ]
          },
          "primary_use_case": {
            "_name_": "primary_use_case",
            "title": "primary_use_case",
            "type": "string"
          },
          "other_primary_use_case": {
            "_name_": "other_primary_use_case",
            "title": "other_primary_use_case",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "customer_information_update",
        "title": "customer_information_update",
        "default": {},
        "_attrs_order_": [
          "company",
          "administrative_user",
          "technical_user",
          "reseller",
          "physical_location",
          "primary_use_case",
          "other_primary_use_case"
        ]
      },
      "tunable_create_0": {
        "type": "object",
        "properties": {
          "type": {
            "_name_": "type",
            "title": "type",
            "default": "SYSCTL",
            "type": "string",
            "enum": [
              "SYSCTL",
              "UDEV"
            ],
            "description": "If `type` is `SYSCTL` then `var` is a sysctl name (e.g. `kernel.watchdog`) and `value` is its corresponding\nvalue (e.g. `0`)."
          },
          "var": {
            "_name_": "var",
            "title": "var",
            "type": "string",
            "description": "If `type` is `SYSCTL` then `var` is a sysctl name (e.g. `kernel.watchdog`) and `value` is its corresponding\nvalue (e.g. `0`)."
          },
          "value": {
            "_name_": "value",
            "title": "value",
            "type": "string",
            "description": "If `type` is `SYSCTL` then `var` is a sysctl name (e.g. `kernel.watchdog`) and `value` is its corresponding\nvalue (e.g. `0`)."
          },
          "comment": {
            "_name_": "comment",
            "title": "comment",
            "default": "",
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "_name_": "enabled",
            "title": "enabled",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "tunable_create",
        "title": "tunable_create",
        "default": {},
        "_attrs_order_": [
          "type",
          "var",
          "value",
          "comment",
          "enabled"
        ]
      },
      "tunable_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "tunable_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "tunable_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/tunable_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/tunable_get_instance_1"
          }
        }
      },
      "update_check_available_0": {
        "type": "object",
        "properties": {
          "train": {
            "_name_": "train",
            "title": "train",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "update-check-available",
        "title": "update-check-available",
        "default": {},
        "_attrs_order_": [
          "train"
        ]
      },
      "update_file_0": {
        "type": "object",
        "properties": {
          "destination": {
            "_name_": "destination",
            "title": "destination",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "updatefile",
        "title": "updatefile",
        "default": {},
        "_attrs_order_": [
          "destination"
        ]
      },
      "update_get_pending_0": {
        "_name_": "path",
        "title": "path",
        "default": null,
        "type": "string",
        "nullable": true
      },
      "update_manual_0": {
        "_name_": "path",
        "title": "path",
        "type": "string"
      },
      "update_manual_1": {
        "type": "object",
        "properties": {
          "cleanup": {
            "type": "boolean",
            "_name_": "cleanup",
            "title": "cleanup",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "cleanup"
        ]
      },
      "update_manual": {
        "type": "object",
        "properties": {
          "path": {
            "$ref": "#/components/schemas/update_manual_0"
          },
          "options": {
            "$ref": "#/components/schemas/update_manual_1"
          }
        }
      },
      "update_set_auto_download_0": {
        "type": "boolean",
        "_name_": "autocheck",
        "title": "autocheck"
      },
      "update_set_train_0": {
        "_name_": "train",
        "title": "train",
        "type": "string"
      },
      "update_update_0": {
        "type": "object",
        "properties": {
          "train": {
            "_name_": "train",
            "title": "train",
            "type": "string"
          },
          "reboot": {
            "type": "boolean",
            "_name_": "reboot",
            "title": "reboot",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "update",
        "title": "update",
        "default": {},
        "_attrs_order_": [
          "train",
          "reboot"
        ]
      },
      "ups_update_0": {
        "type": "object",
        "properties": {
          "powerdown": {
            "type": "boolean",
            "_name_": "powerdown",
            "title": "powerdown",
            "description": "`powerdown` when enabled, sets UPS to power off after shutting down the system."
          },
          "rmonitor": {
            "type": "boolean",
            "_name_": "rmonitor",
            "title": "rmonitor"
          },
          "nocommwarntime": {
            "type": "integer",
            "_name_": "nocommwarntime",
            "title": "nocommwarntime",
            "description": "`nocommwarntime` is a value in seconds which makes UPS Service wait the specified seconds before alerting that\nthe Service cannot reach configured UPS.",
            "nullable": true
          },
          "remoteport": {
            "type": "integer",
            "_name_": "remoteport",
            "title": "remoteport"
          },
          "shutdowntimer": {
            "type": "integer",
            "_name_": "shutdowntimer",
            "title": "shutdowntimer",
            "description": "`shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before\ninitiating a shutdown. This only applies when `shutdown` is set to \"BATT\"."
          },
          "hostsync": {
            "type": "integer",
            "_name_": "hostsync",
            "title": "hostsync"
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "type": "string"
          },
          "driver": {
            "_name_": "driver",
            "title": "driver",
            "type": "string"
          },
          "extrausers": {
            "_name_": "extrausers",
            "title": "extrausers",
            "type": "string"
          },
          "identifier": {
            "_name_": "identifier",
            "title": "identifier",
            "type": "string"
          },
          "mode": {
            "_name_": "mode",
            "title": "mode",
            "type": "string",
            "enum": [
              "MASTER",
              "SLAVE"
            ]
          },
          "monpwd": {
            "_name_": "monpwd",
            "title": "monpwd",
            "type": "string"
          },
          "monuser": {
            "_name_": "monuser",
            "title": "monuser",
            "type": "string"
          },
          "options": {
            "_name_": "options",
            "title": "options",
            "type": "string"
          },
          "optionsupsd": {
            "_name_": "optionsupsd",
            "title": "optionsupsd",
            "type": "string"
          },
          "port": {
            "_name_": "port",
            "title": "port",
            "type": "string"
          },
          "remotehost": {
            "_name_": "remotehost",
            "title": "remotehost",
            "type": "string"
          },
          "shutdown": {
            "_name_": "shutdown",
            "title": "shutdown",
            "type": "string",
            "enum": [
              "LOWBATT",
              "BATT"
            ],
            "description": "`shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before\ninitiating a shutdown. This only applies when `shutdown` is set to \"BATT\"."
          },
          "shutdowncmd": {
            "_name_": "shutdowncmd",
            "title": "shutdowncmd",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "ups_update",
        "title": "ups_entry",
        "default": {},
        "_attrs_order_": [
          "powerdown",
          "rmonitor",
          "nocommwarntime",
          "remoteport",
          "shutdowntimer",
          "hostsync",
          "description",
          "driver",
          "extrausers",
          "identifier",
          "mode",
          "monpwd",
          "monuser",
          "options",
          "optionsupsd",
          "port",
          "remotehost",
          "shutdown",
          "shutdowncmd"
        ]
      },
      "user_create_0": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "integer",
            "_name_": "uid",
            "title": "uid",
            "description": "If `uid` is not provided it is automatically filled with the next one available."
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "group": {
            "type": "integer",
            "_name_": "group",
            "title": "group",
            "description": "`group` is required if `group_create` is false."
          },
          "group_create": {
            "type": "boolean",
            "_name_": "group_create",
            "title": "group_create",
            "default": false,
            "description": "`group` is required if `group_create` is false."
          },
          "home": {
            "_name_": "home",
            "title": "home",
            "default": "/nonexistent",
            "type": "string"
          },
          "home_mode": {
            "_name_": "home_mode",
            "title": "home_mode",
            "default": "700",
            "type": "string"
          },
          "shell": {
            "_name_": "shell",
            "title": "shell",
            "default": "/usr/bin/zsh",
            "type": "string",
            "description": "Available choices for `shell` can be retrieved with `user.shell_choices`."
          },
          "full_name": {
            "_name_": "full_name",
            "title": "full_name",
            "type": "string"
          },
          "email": {
            "_name_": "email",
            "title": "email",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string",
            "description": "`password` is required if `password_disabled` is false."
          },
          "password_disabled": {
            "type": "boolean",
            "_name_": "password_disabled",
            "title": "password_disabled",
            "default": false,
            "description": "`password` is required if `password_disabled` is false."
          },
          "locked": {
            "type": "boolean",
            "_name_": "locked",
            "title": "locked",
            "default": false
          },
          "smb": {
            "type": "boolean",
            "_name_": "smb",
            "title": "smb",
            "default": true
          },
          "sudo_commands": {
            "_name_": "sudo_commands",
            "title": "sudo_commands",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "command",
              "title": "command",
              "_required_": false,
              "type": "string"
            }
          },
          "sudo_commands_nopasswd": {
            "_name_": "sudo_commands_nopasswd",
            "title": "sudo_commands_nopasswd",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "command",
              "title": "command",
              "_required_": false,
              "type": "string"
            }
          },
          "sshpubkey": {
            "_name_": "sshpubkey",
            "title": "sshpubkey",
            "type": "string",
            "nullable": true
          },
          "groups": {
            "_name_": "groups",
            "title": "groups",
            "default": [],
            "type": "array",
            "items": {
              "type": "integer",
              "_name_": "group",
              "title": "group",
              "_required_": false
            }
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": {},
            "_attrs_order_": [],
            "description": "`attributes` is a general-purpose object for storing arbitrary user information."
          }
        },
        "additionalProperties": false,
        "_name_": "user_create",
        "title": "user_create",
        "default": {},
        "_attrs_order_": [
          "uid",
          "username",
          "group",
          "group_create",
          "home",
          "home_mode",
          "shell",
          "full_name",
          "email",
          "password",
          "password_disabled",
          "locked",
          "smb",
          "sudo_commands",
          "sudo_commands_nopasswd",
          "sshpubkey",
          "groups",
          "attributes"
        ]
      },
      "user_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "user_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "user_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/user_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/user_get_instance_1"
          }
        }
      },
      "user_get_user_obj_0": {
        "type": "object",
        "properties": {
          "username": {
            "_name_": "username",
            "title": "username",
            "default": null,
            "type": "string"
          },
          "uid": {
            "type": "integer",
            "_name_": "uid",
            "title": "uid",
            "default": null
          },
          "get_groups": {
            "type": "boolean",
            "_name_": "get_groups",
            "title": "get_groups",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "get_user_obj",
        "title": "get_user_obj",
        "default": {},
        "_attrs_order_": [
          "username",
          "uid",
          "get_groups"
        ]
      },
      "user_shell_choices_0": {
        "type": "integer",
        "_name_": "user_id",
        "title": "user_id",
        "default": null,
        "nullable": true
      },
      "vm_create_0": {
        "type": "object",
        "properties": {
          "command_line_args": {
            "_name_": "command_line_args",
            "title": "command_line_args",
            "default": "",
            "type": "string"
          },
          "cpu_mode": {
            "_name_": "cpu_mode",
            "title": "cpu_mode",
            "default": "CUSTOM",
            "type": "string",
            "enum": [
              "CUSTOM",
              "HOST-MODEL",
              "HOST-PASSTHROUGH"
            ]
          },
          "cpu_model": {
            "_name_": "cpu_model",
            "title": "cpu_model",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "description": {
            "_name_": "description",
            "title": "description",
            "type": "string"
          },
          "vcpus": {
            "type": "integer",
            "_name_": "vcpus",
            "title": "vcpus",
            "default": 1,
            "description": "Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a\nseparate package. Multiple cores can be configured per CPU by specifying `cores` attributes.\n`vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads`\nspecifies number of threads per core."
          },
          "cores": {
            "type": "integer",
            "_name_": "cores",
            "title": "cores",
            "default": 1,
            "description": "Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a\nseparate package. Multiple cores can be configured per CPU by specifying `cores` attributes.\n`vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads`\nspecifies number of threads per core."
          },
          "threads": {
            "type": "integer",
            "_name_": "threads",
            "title": "threads",
            "default": 1,
            "description": "Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a\nseparate package. Multiple cores can be configured per CPU by specifying `cores` attributes.\n`vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads`\nspecifies number of threads per core."
          },
          "cpuset": {
            "_name_": "cpuset",
            "title": "cpuset",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "nodeset": {
            "_name_": "nodeset",
            "title": "nodeset",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "pin_vcpus": {
            "type": "boolean",
            "_name_": "pin_vcpus",
            "title": "pin_vcpus",
            "default": false
          },
          "suspend_on_snapshot": {
            "type": "boolean",
            "_name_": "suspend_on_snapshot",
            "title": "suspend_on_snapshot",
            "default": false
          },
          "memory": {
            "type": "integer",
            "_name_": "memory",
            "title": "memory"
          },
          "min_memory": {
            "type": "integer",
            "_name_": "min_memory",
            "title": "min_memory",
            "default": null,
            "nullable": true
          },
          "hyperv_enlightenments": {
            "type": "boolean",
            "_name_": "hyperv_enlightenments",
            "title": "hyperv_enlightenments",
            "default": false,
            "description": "`hyperv_enlightenments` can be used to enable subset of predefined Hyper-V enlightenments for Windows guests.\nThese enlightenments improve performance and enable otherwise missing features."
          },
          "bootloader": {
            "_name_": "bootloader",
            "title": "bootloader",
            "default": "UEFI",
            "type": "string",
            "enum": [
              "UEFI",
              "UEFI_CSM"
            ]
          },
          "bootloader_ovmf": {
            "_name_": "bootloader_ovmf",
            "title": "bootloader_ovmf",
            "default": "OVMF_CODE.fd",
            "type": "string"
          },
          "autostart": {
            "type": "boolean",
            "_name_": "autostart",
            "title": "autostart",
            "default": true
          },
          "hide_from_msr": {
            "type": "boolean",
            "_name_": "hide_from_msr",
            "title": "hide_from_msr",
            "default": false,
            "description": "`hide_from_msr` is a boolean which when set will hide the KVM hypervisor from standard MSR based discovery and\nis useful to enable when doing GPU passthrough."
          },
          "ensure_display_device": {
            "type": "boolean",
            "_name_": "ensure_display_device",
            "title": "ensure_display_device",
            "default": true,
            "description": "`ensure_display_device` when set ( the default ) will ensure that the guest always has access to a video device.\nFor headless installations like ubuntu server this is required for the guest to operate properly. However\nfor cases where consumer would like to use GPU passthrough and does not want a display device added should set\nthis to `false`."
          },
          "time": {
            "_name_": "time",
            "title": "time",
            "default": "LOCAL",
            "type": "string",
            "enum": [
              "LOCAL",
              "UTC"
            ]
          },
          "shutdown_timeout": {
            "type": "integer",
            "_name_": "shutdown_timeout",
            "title": "shutdown_timeout",
            "default": 90,
            "description": "`shutdown_timeout` indicates the time in seconds the system waits for the VM to cleanly shutdown. During system\nshutdown, if the VM hasn't exited after a hardware shutdown signal has been sent by the system within\n`shutdown_timeout` seconds, system initiates poweroff for the VM to stop it."
          },
          "arch_type": {
            "_name_": "arch_type",
            "title": "arch_type",
            "default": null,
            "type": "string",
            "description": "`arch_type` refers to architecture type and can be specified for the guest. By default the value is `null` and\nsystem in this case will choose a reasonable default based on host.\n`machine_type` refers to machine type of the guest based on the architecture type selected with `arch_type`.\nBy default the value is `null` and system in this case will choose a reasonable default based on `arch_type`\nconfiguration.",
            "nullable": true
          },
          "machine_type": {
            "_name_": "machine_type",
            "title": "machine_type",
            "default": null,
            "type": "string",
            "description": "`machine_type` refers to machine type of the guest based on the architecture type selected with `arch_type`.\nBy default the value is `null` and system in this case will choose a reasonable default based on `arch_type`\nconfiguration.",
            "nullable": true
          },
          "uuid": {
            "_name_": "uuid",
            "title": "uuid",
            "default": null,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "vm_create",
        "title": "vm_create",
        "default": {},
        "_attrs_order_": [
          "command_line_args",
          "cpu_mode",
          "cpu_model",
          "name",
          "description",
          "vcpus",
          "cores",
          "threads",
          "cpuset",
          "nodeset",
          "pin_vcpus",
          "suspend_on_snapshot",
          "memory",
          "min_memory",
          "hyperv_enlightenments",
          "bootloader",
          "bootloader_ovmf",
          "autostart",
          "hide_from_msr",
          "ensure_display_device",
          "time",
          "shutdown_timeout",
          "arch_type",
          "machine_type",
          "uuid"
        ]
      },
      "vm_get_available_memory_0": {
        "type": "boolean",
        "_name_": "overcommit",
        "title": "overcommit",
        "default": false,
        "description": "In case of `overcommit` being `true`, calculations are done in the following manner:\n1. If a VM has requested 10G but is only consuming 5G, only 5G will be counted\n2. System will consider shrinkable ZFS ARC as free memory ( shrinkable ZFS ARC is current ZFS ARC\n   minus ZFS ARC minimum )\nIn case of `overcommit` being `false`, calculations are done in the following manner:\n1. Complete VM requested memory will be taken into account regardless of how much actual physical\n   memory the VM is consuming\n2. System will not consider shrinkable ZFS ARC as free memory"
      },
      "vm_get_console_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "vm_get_display_devices_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id"
      },
      "vm_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "vm_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "vm_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/vm_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/vm_get_instance_1"
          }
        }
      },
      "vm_get_memory_usage_0": {
        "type": "integer",
        "_name_": "vm_id",
        "title": "vm_id"
      },
      "vm_get_vm_memory_info_0": {
        "type": "integer",
        "_name_": "vm_id",
        "title": "vm_id",
        "description": "Returns memory information for `vm_id` VM if it is going to be started."
      },
      "vm_log_file_path_0": {
        "type": "integer",
        "_name_": "id",
        "title": "id",
        "description": "Retrieve log file path of `id` VM."
      },
      "vm_device_create_0": {
        "type": "object",
        "properties": {
          "dtype": {
            "_name_": "dtype",
            "title": "dtype",
            "type": "string",
            "enum": [
              "NIC",
              "DISK",
              "CDROM",
              "PCI",
              "DISPLAY",
              "RAW",
              "USB"
            ],
            "description": "If `dtype` is the `RAW` type and a new raw file is to be created, `attributes.exists` will be passed as false.\nThis means the API handles creating the raw file and raises the appropriate exception if file creation fails."
          },
          "vm": {
            "type": "integer",
            "_name_": "vm",
            "title": "vm",
            "description": "Create a new device for the VM of id `vm`."
          },
          "attributes": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "attributes",
            "title": "attributes",
            "default": null,
            "_attrs_order_": []
          },
          "order": {
            "type": "integer",
            "_name_": "order",
            "title": "order",
            "default": null,
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "vmdevice_create",
        "title": "vmdevice_create",
        "default": {},
        "_attrs_order_": [
          "dtype",
          "vm",
          "attributes",
          "order"
        ]
      },
      "vm_device_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "vm_device_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "vm_device_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/vm_device_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/vm_device_get_instance_1"
          }
        }
      },
      "vm_device_passthrough_device_0": {
        "_name_": "device",
        "title": "device",
        "type": "string"
      },
      "vm_device_usb_passthrough_device_0": {
        "_name_": "device",
        "title": "device",
        "type": "string"
      },
      "vmware_create_0": {
        "type": "object",
        "properties": {
          "datastore": {
            "_name_": "datastore",
            "title": "datastore",
            "type": "string"
          },
          "filesystem": {
            "_name_": "filesystem",
            "title": "filesystem",
            "type": "string"
          },
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string",
            "description": "`hostname` is a valid IP address / hostname of a VMWare host. When clustering, this is the vCenter server for\nthe cluster."
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string",
            "description": "`username` and `password` are the credentials used to authorize access to the VMWare host."
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string",
            "description": "`username` and `password` are the credentials used to authorize access to the VMWare host."
          }
        },
        "additionalProperties": false,
        "_name_": "vmware_create",
        "title": "vmware_create",
        "default": {},
        "_attrs_order_": [
          "datastore",
          "filesystem",
          "hostname",
          "password",
          "username"
        ]
      },
      "vmware_dataset_has_vms_0": {
        "_name_": "dataset",
        "title": "dataset",
        "type": "string"
      },
      "vmware_dataset_has_vms_1": {
        "type": "boolean",
        "_name_": "recursive",
        "title": "recursive"
      },
      "vmware_dataset_has_vms": {
        "type": "object",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/vmware_dataset_has_vms_0"
          },
          "recursive": {
            "$ref": "#/components/schemas/vmware_dataset_has_vms_1"
          }
        }
      },
      "vmware_get_datastores_0": {
        "type": "object",
        "properties": {
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string"
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "vmware-creds",
        "title": "vmware-creds",
        "default": {},
        "_attrs_order_": [
          "hostname",
          "username",
          "password"
        ]
      },
      "vmware_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "vmware_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "vmware_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/vmware_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/vmware_get_instance_1"
          }
        }
      },
      "vmware_get_virtual_machines_0": {
        "type": "integer",
        "_name_": "pk",
        "title": "pk"
      },
      "vmware_match_datastores_with_datasets_0": {
        "type": "object",
        "properties": {
          "hostname": {
            "_name_": "hostname",
            "title": "hostname",
            "type": "string"
          },
          "username": {
            "_name_": "username",
            "title": "username",
            "type": "string"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "vmware-creds",
        "title": "vmware-creds",
        "default": {},
        "_attrs_order_": [
          "hostname",
          "username",
          "password"
        ]
      },
      "webdav_update_0": {
        "type": "object",
        "properties": {
          "protocol": {
            "_name_": "protocol",
            "title": "protocol",
            "type": "string",
            "enum": [
              "HTTP",
              "HTTPS",
              "HTTPHTTPS"
            ],
            "description": "`protocol` specifies which protocol should be used for connecting to Webdav Serivce. Value of \"HTTPHTTPS\"\nallows both HTTP and HTTPS connections to the share."
          },
          "tcpport": {
            "type": "integer",
            "_name_": "tcpport",
            "title": "tcpport"
          },
          "tcpportssl": {
            "type": "integer",
            "_name_": "tcpportssl",
            "title": "tcpportssl"
          },
          "password": {
            "_name_": "password",
            "title": "password",
            "type": "string"
          },
          "htauth": {
            "_name_": "htauth",
            "title": "htauth",
            "type": "string",
            "enum": [
              "NONE",
              "BASIC",
              "DIGEST"
            ]
          },
          "certssl": {
            "type": "integer",
            "_name_": "certssl",
            "title": "certssl",
            "description": "`certssl` is a valid id of a certificate configured in the system. This is required if HTTPS connection is\ndesired with Webdave Service.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "_name_": "webdav_update",
        "title": "webdav_entry",
        "default": {},
        "_attrs_order_": [
          "protocol",
          "tcpport",
          "tcpportssl",
          "password",
          "htauth",
          "certssl"
        ]
      },
      "webui_image_create_0": {
        "type": "object",
        "properties": {
          "identifier": {
            "_name_": "identifier",
            "title": "identifier",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "identifier"
        ]
      },
      "webui_image_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "webui_image_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "webui_image_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/webui_image_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/webui_image_get_instance_1"
          }
        }
      },
      "zfs_snapshot_create_0": {
        "type": "object",
        "properties": {
          "dataset": {
            "_name_": "dataset",
            "title": "dataset",
            "type": "string"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "naming_schema": {
            "_name_": "naming_schema",
            "title": "naming_schema",
            "type": "string"
          },
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false
          },
          "exclude": {
            "_name_": "exclude",
            "title": "exclude",
            "default": [],
            "type": "array",
            "items": {
              "_name_": "dataset",
              "title": "dataset",
              "_required_": false,
              "type": "string"
            }
          },
          "suspend_vms": {
            "type": "boolean",
            "_name_": "suspend_vms",
            "title": "suspend_vms",
            "default": false
          },
          "vmware_sync": {
            "type": "boolean",
            "_name_": "vmware_sync",
            "title": "vmware_sync",
            "default": false
          },
          "properties": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "properties",
            "title": "properties",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "snapshot_create",
        "title": "snapshot_create",
        "default": {},
        "_attrs_order_": [
          "dataset",
          "name",
          "naming_schema",
          "recursive",
          "exclude",
          "suspend_vms",
          "vmware_sync",
          "properties"
        ]
      },
      "zfs_snapshot_clone_0": {
        "type": "object",
        "properties": {
          "snapshot": {
            "_name_": "snapshot",
            "title": "snapshot",
            "type": "string"
          },
          "dataset_dst": {
            "_name_": "dataset_dst",
            "title": "dataset_dst",
            "type": "string"
          },
          "dataset_properties": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "dataset_properties",
            "title": "dataset_properties",
            "default": {},
            "_attrs_order_": []
          }
        },
        "additionalProperties": false,
        "_name_": "snapshot_clone",
        "title": "snapshot_clone",
        "default": {},
        "_attrs_order_": [
          "snapshot",
          "dataset_dst",
          "dataset_properties"
        ]
      },
      "zfs_snapshot_get_instance_0": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ],
        "nullable": false,
        "_name_": "id",
        "title": "id",
        "description": "Returns instance matching `id`. If `id` is not found, Validation error is raised."
      },
      "zfs_snapshot_get_instance_1": {
        "type": "object",
        "properties": {
          "relationships": {
            "type": "boolean",
            "_name_": "relationships",
            "title": "relationships",
            "default": true
          },
          "extend": {
            "_name_": "extend",
            "title": "extend",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extend_context": {
            "_name_": "extend_context",
            "title": "extend_context",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "_name_": "prefix",
            "title": "prefix",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "extra": {
            "type": "object",
            "properties": {},
            "additionalProperties": true,
            "_name_": "extra",
            "title": "extra",
            "default": {},
            "_attrs_order_": []
          },
          "order_by": {
            "_name_": "order_by",
            "title": "order_by",
            "default": [],
            "type": "array",
            "items": {}
          },
          "select": {
            "_name_": "select",
            "title": "select",
            "default": [],
            "type": "array",
            "items": {}
          },
          "count": {
            "type": "boolean",
            "_name_": "count",
            "title": "count",
            "default": false
          },
          "get": {
            "type": "boolean",
            "_name_": "get",
            "title": "get",
            "default": false
          },
          "offset": {
            "type": "integer",
            "_name_": "offset",
            "title": "offset",
            "default": 0
          },
          "limit": {
            "type": "integer",
            "_name_": "limit",
            "title": "limit",
            "default": 0
          },
          "force_sql_filters": {
            "type": "boolean",
            "_name_": "force_sql_filters",
            "title": "force_sql_filters",
            "default": true
          }
        },
        "additionalProperties": false,
        "_name_": "query-options-get_instance",
        "title": "query-options",
        "default": {},
        "_attrs_order_": [
          "relationships",
          "extend",
          "extend_context",
          "prefix",
          "extra",
          "order_by",
          "select",
          "count",
          "get",
          "offset",
          "limit",
          "force_sql_filters"
        ]
      },
      "zfs_snapshot_get_instance": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/zfs_snapshot_get_instance_0"
          },
          "query-options": {
            "$ref": "#/components/schemas/zfs_snapshot_get_instance_1"
          }
        }
      },
      "zfs_snapshot_hold_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Holds snapshot `id`."
      },
      "zfs_snapshot_hold_1": {
        "type": "object",
        "properties": {
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "recursive"
        ]
      },
      "zfs_snapshot_hold": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/zfs_snapshot_hold_0"
          },
          "options": {
            "$ref": "#/components/schemas/zfs_snapshot_hold_1"
          }
        }
      },
      "zfs_snapshot_release_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Release held snapshot `id`."
      },
      "zfs_snapshot_release_1": {
        "type": "object",
        "properties": {
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "recursive"
        ]
      },
      "zfs_snapshot_release": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/zfs_snapshot_release_0"
          },
          "options": {
            "$ref": "#/components/schemas/zfs_snapshot_release_1"
          }
        }
      },
      "zfs_snapshot_remove_0": {
        "type": "object",
        "properties": {
          "dataset": {
            "_name_": "dataset",
            "title": "dataset",
            "type": "string"
          },
          "name": {
            "_name_": "name",
            "title": "name",
            "type": "string"
          },
          "defer_delete": {
            "type": "boolean",
            "_name_": "defer_delete",
            "title": "defer_delete"
          }
        },
        "additionalProperties": false,
        "_name_": "snapshot_remove",
        "title": "snapshot_remove",
        "default": {},
        "_attrs_order_": [
          "dataset",
          "name",
          "defer_delete"
        ]
      },
      "zfs_snapshot_rollback_0": {
        "_name_": "id",
        "title": "id",
        "type": "string",
        "description": "Rollback to a given snapshot `id`."
      },
      "zfs_snapshot_rollback_1": {
        "type": "object",
        "properties": {
          "recursive": {
            "type": "boolean",
            "_name_": "recursive",
            "title": "recursive",
            "default": false,
            "description": "`options.recursive_clones` is just like `recursive` but will also destroy any clones."
          },
          "recursive_clones": {
            "type": "boolean",
            "_name_": "recursive_clones",
            "title": "recursive_clones",
            "default": false
          },
          "force": {
            "type": "boolean",
            "_name_": "force",
            "title": "force",
            "default": false
          },
          "recursive_rollback": {
            "type": "boolean",
            "_name_": "recursive_rollback",
            "title": "recursive_rollback",
            "default": false
          }
        },
        "additionalProperties": false,
        "_name_": "options",
        "title": "options",
        "default": {},
        "_attrs_order_": [
          "recursive",
          "recursive_clones",
          "force",
          "recursive_rollback"
        ]
      },
      "zfs_snapshot_rollback": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/zfs_snapshot_rollback_0"
          },
          "options": {
            "$ref": "#/components/schemas/zfs_snapshot_rollback_1"
          }
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "Endpoint not found"
      },
      "Unauthorized": {
        "description": "No authorization for this endpoint"
      },
      "Success": {
        "description": "Operation succeeded"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "basic": []
    }
  ]
}