/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ZfsSnapshotHold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZfsSnapshotHold{}

// ZfsSnapshotHold struct for ZfsSnapshotHold
type ZfsSnapshotHold struct {
	// Holds snapshot `id`.
	Id                   *string           `json:"id,omitempty"`
	Options              *ZfsSnapshotHold1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZfsSnapshotHold ZfsSnapshotHold

// NewZfsSnapshotHold instantiates a new ZfsSnapshotHold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZfsSnapshotHold() *ZfsSnapshotHold {
	this := ZfsSnapshotHold{}
	var options ZfsSnapshotHold1
	this.Options = &options
	return &this
}

// NewZfsSnapshotHoldWithDefaults instantiates a new ZfsSnapshotHold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZfsSnapshotHoldWithDefaults() *ZfsSnapshotHold {
	this := ZfsSnapshotHold{}
	var options ZfsSnapshotHold1
	this.Options = &options
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ZfsSnapshotHold) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotHold) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ZfsSnapshotHold) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ZfsSnapshotHold) SetId(v string) {
	o.Id = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ZfsSnapshotHold) GetOptions() ZfsSnapshotHold1 {
	if o == nil || IsNil(o.Options) {
		var ret ZfsSnapshotHold1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotHold) GetOptionsOk() (*ZfsSnapshotHold1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ZfsSnapshotHold) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given ZfsSnapshotHold1 and assigns it to the Options field.
func (o *ZfsSnapshotHold) SetOptions(v ZfsSnapshotHold1) {
	o.Options = &v
}

func (o ZfsSnapshotHold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZfsSnapshotHold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZfsSnapshotHold) UnmarshalJSON(bytes []byte) (err error) {
	varZfsSnapshotHold := _ZfsSnapshotHold{}

	if err = json.Unmarshal(bytes, &varZfsSnapshotHold); err == nil {
		*o = ZfsSnapshotHold(varZfsSnapshotHold)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZfsSnapshotHold struct {
	value *ZfsSnapshotHold
	isSet bool
}

func (v NullableZfsSnapshotHold) Get() *ZfsSnapshotHold {
	return v.value
}

func (v *NullableZfsSnapshotHold) Set(val *ZfsSnapshotHold) {
	v.value = val
	v.isSet = true
}

func (v NullableZfsSnapshotHold) IsSet() bool {
	return v.isSet
}

func (v *NullableZfsSnapshotHold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZfsSnapshotHold(val *ZfsSnapshotHold) *NullableZfsSnapshotHold {
	return &NullableZfsSnapshotHold{value: val, isSet: true}
}

func (v NullableZfsSnapshotHold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZfsSnapshotHold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
