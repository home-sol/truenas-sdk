/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CtdbPrivateIpsApiService CtdbPrivateIpsApi service
type CtdbPrivateIpsApiService service

type ApiCtdbPrivateIpsGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPrivateIpsApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiCtdbPrivateIpsGetRequest) Limit(limit int32) ApiCtdbPrivateIpsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiCtdbPrivateIpsGetRequest) Offset(offset int32) ApiCtdbPrivateIpsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiCtdbPrivateIpsGetRequest) Count(count bool) ApiCtdbPrivateIpsGetRequest {
	r.count = &count
	return r
}

func (r ApiCtdbPrivateIpsGetRequest) Sort(sort string) ApiCtdbPrivateIpsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiCtdbPrivateIpsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPrivateIpsGetExecute(r)
}

/*
CtdbPrivateIpsGet Method for CtdbPrivateIpsGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPrivateIpsGetRequest
*/
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsGet(ctx context.Context) ApiCtdbPrivateIpsGetRequest {
	return ApiCtdbPrivateIpsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsGetExecute(r ApiCtdbPrivateIpsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPrivateIpsApiService.CtdbPrivateIpsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/private/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPrivateIpsGetInstancePostRequest struct {
	ctx                       context.Context
	ApiService                *CtdbPrivateIpsApiService
	ctdbPrivateIpsGetInstance *CtdbPrivateIpsGetInstance
}

func (r ApiCtdbPrivateIpsGetInstancePostRequest) CtdbPrivateIpsGetInstance(ctdbPrivateIpsGetInstance CtdbPrivateIpsGetInstance) ApiCtdbPrivateIpsGetInstancePostRequest {
	r.ctdbPrivateIpsGetInstance = &ctdbPrivateIpsGetInstance
	return r
}

func (r ApiCtdbPrivateIpsGetInstancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPrivateIpsGetInstancePostExecute(r)
}

/*
CtdbPrivateIpsGetInstancePost Method for CtdbPrivateIpsGetInstancePost

Returns instance matching `id`. If `id` is not found, Validation error is raised.

Please see `query` method documentation for `options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPrivateIpsGetInstancePostRequest
*/
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsGetInstancePost(ctx context.Context) ApiCtdbPrivateIpsGetInstancePostRequest {
	return ApiCtdbPrivateIpsGetInstancePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsGetInstancePostExecute(r ApiCtdbPrivateIpsGetInstancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPrivateIpsApiService.CtdbPrivateIpsGetInstancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/private/ips/get_instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbPrivateIpsGetInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPrivateIpsIdIdGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPrivateIpsApiService
	id         int32
}

func (r ApiCtdbPrivateIpsIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPrivateIpsIdIdGetExecute(r)
}

/*
CtdbPrivateIpsIdIdGet Method for CtdbPrivateIpsIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCtdbPrivateIpsIdIdGetRequest
*/
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsIdIdGet(ctx context.Context, id int32) ApiCtdbPrivateIpsIdIdGetRequest {
	return ApiCtdbPrivateIpsIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsIdIdGetExecute(r ApiCtdbPrivateIpsIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPrivateIpsApiService.CtdbPrivateIpsIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/private/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPrivateIpsIdIdPutRequest struct {
	ctx        context.Context
	ApiService *CtdbPrivateIpsApiService
	id         int32
}

func (r ApiCtdbPrivateIpsIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPrivateIpsIdIdPutExecute(r)
}

/*
CtdbPrivateIpsIdIdPut Method for CtdbPrivateIpsIdIdPut

Update Private IP address from the ctdb cluster with pnn value of `id`.

`id` integer representing the PNN value for the node.
`enable` boolean. When True, enable the node else disable the node.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCtdbPrivateIpsIdIdPutRequest
*/
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsIdIdPut(ctx context.Context, id int32) ApiCtdbPrivateIpsIdIdPutRequest {
	return ApiCtdbPrivateIpsIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsIdIdPutExecute(r ApiCtdbPrivateIpsIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPrivateIpsApiService.CtdbPrivateIpsIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/private/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPrivateIpsPostRequest struct {
	ctx                   context.Context
	ApiService            *CtdbPrivateIpsApiService
	ctdbPrivateIpsCreate0 *CtdbPrivateIpsCreate0
}

func (r ApiCtdbPrivateIpsPostRequest) CtdbPrivateIpsCreate0(ctdbPrivateIpsCreate0 CtdbPrivateIpsCreate0) ApiCtdbPrivateIpsPostRequest {
	r.ctdbPrivateIpsCreate0 = &ctdbPrivateIpsCreate0
	return r
}

func (r ApiCtdbPrivateIpsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPrivateIpsPostExecute(r)
}

/*
CtdbPrivateIpsPost Method for CtdbPrivateIpsPost

# Add a ctdb private address to the cluster

`ip` string representing an IP v4/v6 address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPrivateIpsPostRequest
*/
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsPost(ctx context.Context) ApiCtdbPrivateIpsPostRequest {
	return ApiCtdbPrivateIpsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPrivateIpsApiService) CtdbPrivateIpsPostExecute(r ApiCtdbPrivateIpsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPrivateIpsApiService.CtdbPrivateIpsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/private/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbPrivateIpsCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
