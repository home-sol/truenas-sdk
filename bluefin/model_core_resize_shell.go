/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CoreResizeShell type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreResizeShell{}

// CoreResizeShell struct for CoreResizeShell
type CoreResizeShell struct {
	Id                   *string `json:"id,omitempty"`
	Cols                 *int32  `json:"cols,omitempty"`
	Rows                 *int32  `json:"rows,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CoreResizeShell CoreResizeShell

// NewCoreResizeShell instantiates a new CoreResizeShell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreResizeShell() *CoreResizeShell {
	this := CoreResizeShell{}
	return &this
}

// NewCoreResizeShellWithDefaults instantiates a new CoreResizeShell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreResizeShellWithDefaults() *CoreResizeShell {
	this := CoreResizeShell{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CoreResizeShell) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreResizeShell) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CoreResizeShell) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CoreResizeShell) SetId(v string) {
	o.Id = &v
}

// GetCols returns the Cols field value if set, zero value otherwise.
func (o *CoreResizeShell) GetCols() int32 {
	if o == nil || IsNil(o.Cols) {
		var ret int32
		return ret
	}
	return *o.Cols
}

// GetColsOk returns a tuple with the Cols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreResizeShell) GetColsOk() (*int32, bool) {
	if o == nil || IsNil(o.Cols) {
		return nil, false
	}
	return o.Cols, true
}

// HasCols returns a boolean if a field has been set.
func (o *CoreResizeShell) HasCols() bool {
	if o != nil && !IsNil(o.Cols) {
		return true
	}

	return false
}

// SetCols gets a reference to the given int32 and assigns it to the Cols field.
func (o *CoreResizeShell) SetCols(v int32) {
	o.Cols = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *CoreResizeShell) GetRows() int32 {
	if o == nil || IsNil(o.Rows) {
		var ret int32
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreResizeShell) GetRowsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *CoreResizeShell) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given int32 and assigns it to the Rows field.
func (o *CoreResizeShell) SetRows(v int32) {
	o.Rows = &v
}

func (o CoreResizeShell) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreResizeShell) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Cols) {
		toSerialize["cols"] = o.Cols
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreResizeShell) UnmarshalJSON(bytes []byte) (err error) {
	varCoreResizeShell := _CoreResizeShell{}

	if err = json.Unmarshal(bytes, &varCoreResizeShell); err == nil {
		*o = CoreResizeShell(varCoreResizeShell)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "cols")
		delete(additionalProperties, "rows")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreResizeShell struct {
	value *CoreResizeShell
	isSet bool
}

func (v NullableCoreResizeShell) Get() *CoreResizeShell {
	return v.value
}

func (v *NullableCoreResizeShell) Set(val *CoreResizeShell) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreResizeShell) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreResizeShell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreResizeShell(val *CoreResizeShell) *NullableCoreResizeShell {
	return &NullableCoreResizeShell{value: val, isSet: true}
}

func (v NullableCoreResizeShell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreResizeShell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
