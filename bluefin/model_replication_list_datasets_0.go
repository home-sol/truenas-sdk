/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// ReplicationListDatasets0 Accepts `transport` and SSH credentials ID (for non-local transport)
type ReplicationListDatasets0 string

// List of replication_list_datasets_0
const (
	SSH       ReplicationListDatasets0 = "SSH"
	SSHNETCAT ReplicationListDatasets0 = "SSH+NETCAT"
	LOCAL     ReplicationListDatasets0 = "LOCAL"
)

// All allowed values of ReplicationListDatasets0 enum
var AllowedReplicationListDatasets0EnumValues = []ReplicationListDatasets0{
	"SSH",
	"SSH+NETCAT",
	"LOCAL",
}

func (v *ReplicationListDatasets0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationListDatasets0(value)
	for _, existing := range AllowedReplicationListDatasets0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationListDatasets0", value)
}

// NewReplicationListDatasets0FromValue returns a pointer to a valid ReplicationListDatasets0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationListDatasets0FromValue(v string) (*ReplicationListDatasets0, error) {
	ev := ReplicationListDatasets0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationListDatasets0: valid values are %v", v, AllowedReplicationListDatasets0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationListDatasets0) IsValid() bool {
	for _, existing := range AllowedReplicationListDatasets0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to replication_list_datasets_0 value
func (v ReplicationListDatasets0) Ptr() *ReplicationListDatasets0 {
	return &v
}

type NullableReplicationListDatasets0 struct {
	value *ReplicationListDatasets0
	isSet bool
}

func (v NullableReplicationListDatasets0) Get() *ReplicationListDatasets0 {
	return v.value
}

func (v *NullableReplicationListDatasets0) Set(val *ReplicationListDatasets0) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationListDatasets0) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationListDatasets0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationListDatasets0(val *ReplicationListDatasets0) *NullableReplicationListDatasets0 {
	return &NullableReplicationListDatasets0{value: val, isSet: true}
}

func (v NullableReplicationListDatasets0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationListDatasets0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
