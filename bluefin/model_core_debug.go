/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CoreDebug type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreDebug{}

// CoreDebug struct for CoreDebug
type CoreDebug struct {
	Engine               *CoreDebug0 `json:"engine,omitempty"`
	Options              *CoreDebug1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CoreDebug CoreDebug

// NewCoreDebug instantiates a new CoreDebug object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreDebug() *CoreDebug {
	this := CoreDebug{}
	var options CoreDebug1
	this.Options = &options
	return &this
}

// NewCoreDebugWithDefaults instantiates a new CoreDebug object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreDebugWithDefaults() *CoreDebug {
	this := CoreDebug{}
	var options CoreDebug1
	this.Options = &options
	return &this
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *CoreDebug) GetEngine() CoreDebug0 {
	if o == nil || IsNil(o.Engine) {
		var ret CoreDebug0
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug) GetEngineOk() (*CoreDebug0, bool) {
	if o == nil || IsNil(o.Engine) {
		return nil, false
	}
	return o.Engine, true
}

// HasEngine returns a boolean if a field has been set.
func (o *CoreDebug) HasEngine() bool {
	if o != nil && !IsNil(o.Engine) {
		return true
	}

	return false
}

// SetEngine gets a reference to the given CoreDebug0 and assigns it to the Engine field.
func (o *CoreDebug) SetEngine(v CoreDebug0) {
	o.Engine = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CoreDebug) GetOptions() CoreDebug1 {
	if o == nil || IsNil(o.Options) {
		var ret CoreDebug1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug) GetOptionsOk() (*CoreDebug1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CoreDebug) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given CoreDebug1 and assigns it to the Options field.
func (o *CoreDebug) SetOptions(v CoreDebug1) {
	o.Options = &v
}

func (o CoreDebug) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreDebug) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Engine) {
		toSerialize["engine"] = o.Engine
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreDebug) UnmarshalJSON(bytes []byte) (err error) {
	varCoreDebug := _CoreDebug{}

	if err = json.Unmarshal(bytes, &varCoreDebug); err == nil {
		*o = CoreDebug(varCoreDebug)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "engine")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreDebug struct {
	value *CoreDebug
	isSet bool
}

func (v NullableCoreDebug) Get() *CoreDebug {
	return v.value
}

func (v *NullableCoreDebug) Set(val *CoreDebug) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDebug) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDebug) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDebug(val *CoreDebug) *NullableCoreDebug {
	return &NullableCoreDebug{value: val, isSet: true}
}

func (v NullableCoreDebug) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDebug) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
