/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SmartTestCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartTestCreate0{}

// SmartTestCreate0 struct for SmartTestCreate0
type SmartTestCreate0 struct {
	Schedule *Schedule6 `json:"schedule,omitempty"`
	Desc     *string    `json:"desc,omitempty"`
	// `all_disks` when enabled sets the task to cover all disks in which case `disks` is not required.
	AllDisks *bool `json:"all_disks,omitempty"`
	// `disks` is a list of valid disks which should be monitored in this task. `all_disks` when enabled sets the task to cover all disks in which case `disks` is not required.
	Disks []string `json:"disks,omitempty"`
	// `type` is specified to represent the type of SMART test to be executed.
	Type *string `json:"type,omitempty"`
}

// NewSmartTestCreate0 instantiates a new SmartTestCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartTestCreate0() *SmartTestCreate0 {
	this := SmartTestCreate0{}
	var schedule Schedule6
	this.Schedule = &schedule
	var allDisks bool
	this.AllDisks = &allDisks
	return &this
}

// NewSmartTestCreate0WithDefaults instantiates a new SmartTestCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartTestCreate0WithDefaults() *SmartTestCreate0 {
	this := SmartTestCreate0{}
	var schedule Schedule6
	this.Schedule = &schedule
	var allDisks bool
	this.AllDisks = &allDisks
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *SmartTestCreate0) GetSchedule() Schedule6 {
	if o == nil || IsNil(o.Schedule) {
		var ret Schedule6
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestCreate0) GetScheduleOk() (*Schedule6, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *SmartTestCreate0) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule6 and assigns it to the Schedule field.
func (o *SmartTestCreate0) SetSchedule(v Schedule6) {
	o.Schedule = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *SmartTestCreate0) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestCreate0) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *SmartTestCreate0) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *SmartTestCreate0) SetDesc(v string) {
	o.Desc = &v
}

// GetAllDisks returns the AllDisks field value if set, zero value otherwise.
func (o *SmartTestCreate0) GetAllDisks() bool {
	if o == nil || IsNil(o.AllDisks) {
		var ret bool
		return ret
	}
	return *o.AllDisks
}

// GetAllDisksOk returns a tuple with the AllDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestCreate0) GetAllDisksOk() (*bool, bool) {
	if o == nil || IsNil(o.AllDisks) {
		return nil, false
	}
	return o.AllDisks, true
}

// HasAllDisks returns a boolean if a field has been set.
func (o *SmartTestCreate0) HasAllDisks() bool {
	if o != nil && !IsNil(o.AllDisks) {
		return true
	}

	return false
}

// SetAllDisks gets a reference to the given bool and assigns it to the AllDisks field.
func (o *SmartTestCreate0) SetAllDisks(v bool) {
	o.AllDisks = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *SmartTestCreate0) GetDisks() []string {
	if o == nil || IsNil(o.Disks) {
		var ret []string
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestCreate0) GetDisksOk() ([]string, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *SmartTestCreate0) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []string and assigns it to the Disks field.
func (o *SmartTestCreate0) SetDisks(v []string) {
	o.Disks = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SmartTestCreate0) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartTestCreate0) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SmartTestCreate0) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SmartTestCreate0) SetType(v string) {
	o.Type = &v
}

func (o SmartTestCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartTestCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.AllDisks) {
		toSerialize["all_disks"] = o.AllDisks
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSmartTestCreate0 struct {
	value *SmartTestCreate0
	isSet bool
}

func (v NullableSmartTestCreate0) Get() *SmartTestCreate0 {
	return v.value
}

func (v *NullableSmartTestCreate0) Set(val *SmartTestCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartTestCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartTestCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartTestCreate0(val *SmartTestCreate0) *NullableSmartTestCreate0 {
	return &NullableSmartTestCreate0{value: val, isSet: true}
}

func (v NullableSmartTestCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartTestCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
