/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the S3Update0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Update0{}

// S3Update0 struct for S3Update0
type S3Update0 struct {
	Bindip          *string `json:"bindip,omitempty"`
	Bindport        *int32  `json:"bindport,omitempty"`
	ConsoleBindport *int32  `json:"console_bindport,omitempty"`
	// `access_key` must only contain alphanumeric characters and should be between 5 and 20 characters.
	AccessKey *string `json:"access_key,omitempty"`
	// `secret_key` must only contain alphanumeric characters and should be between 8 and 40 characters.
	SecretKey *string `json:"secret_key,omitempty"`
	// `browser` when set, enables the web user interface for the S3 Service.
	Browser      *bool          `json:"browser,omitempty"`
	TlsServerUri NullableString `json:"tls_server_uri,omitempty"`
	StoragePath  *string        `json:"storage_path,omitempty"`
	Certificate  NullableInt32  `json:"certificate,omitempty"`
}

// NewS3Update0 instantiates a new S3Update0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Update0() *S3Update0 {
	this := S3Update0{}
	return &this
}

// NewS3Update0WithDefaults instantiates a new S3Update0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3Update0WithDefaults() *S3Update0 {
	this := S3Update0{}
	return &this
}

// GetBindip returns the Bindip field value if set, zero value otherwise.
func (o *S3Update0) GetBindip() string {
	if o == nil || IsNil(o.Bindip) {
		var ret string
		return ret
	}
	return *o.Bindip
}

// GetBindipOk returns a tuple with the Bindip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetBindipOk() (*string, bool) {
	if o == nil || IsNil(o.Bindip) {
		return nil, false
	}
	return o.Bindip, true
}

// HasBindip returns a boolean if a field has been set.
func (o *S3Update0) HasBindip() bool {
	if o != nil && !IsNil(o.Bindip) {
		return true
	}

	return false
}

// SetBindip gets a reference to the given string and assigns it to the Bindip field.
func (o *S3Update0) SetBindip(v string) {
	o.Bindip = &v
}

// GetBindport returns the Bindport field value if set, zero value otherwise.
func (o *S3Update0) GetBindport() int32 {
	if o == nil || IsNil(o.Bindport) {
		var ret int32
		return ret
	}
	return *o.Bindport
}

// GetBindportOk returns a tuple with the Bindport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetBindportOk() (*int32, bool) {
	if o == nil || IsNil(o.Bindport) {
		return nil, false
	}
	return o.Bindport, true
}

// HasBindport returns a boolean if a field has been set.
func (o *S3Update0) HasBindport() bool {
	if o != nil && !IsNil(o.Bindport) {
		return true
	}

	return false
}

// SetBindport gets a reference to the given int32 and assigns it to the Bindport field.
func (o *S3Update0) SetBindport(v int32) {
	o.Bindport = &v
}

// GetConsoleBindport returns the ConsoleBindport field value if set, zero value otherwise.
func (o *S3Update0) GetConsoleBindport() int32 {
	if o == nil || IsNil(o.ConsoleBindport) {
		var ret int32
		return ret
	}
	return *o.ConsoleBindport
}

// GetConsoleBindportOk returns a tuple with the ConsoleBindport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetConsoleBindportOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsoleBindport) {
		return nil, false
	}
	return o.ConsoleBindport, true
}

// HasConsoleBindport returns a boolean if a field has been set.
func (o *S3Update0) HasConsoleBindport() bool {
	if o != nil && !IsNil(o.ConsoleBindport) {
		return true
	}

	return false
}

// SetConsoleBindport gets a reference to the given int32 and assigns it to the ConsoleBindport field.
func (o *S3Update0) SetConsoleBindport(v int32) {
	o.ConsoleBindport = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *S3Update0) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *S3Update0) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *S3Update0) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *S3Update0) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *S3Update0) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *S3Update0) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *S3Update0) GetBrowser() bool {
	if o == nil || IsNil(o.Browser) {
		var ret bool
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetBrowserOk() (*bool, bool) {
	if o == nil || IsNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *S3Update0) HasBrowser() bool {
	if o != nil && !IsNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given bool and assigns it to the Browser field.
func (o *S3Update0) SetBrowser(v bool) {
	o.Browser = &v
}

// GetTlsServerUri returns the TlsServerUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3Update0) GetTlsServerUri() string {
	if o == nil || IsNil(o.TlsServerUri.Get()) {
		var ret string
		return ret
	}
	return *o.TlsServerUri.Get()
}

// GetTlsServerUriOk returns a tuple with the TlsServerUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Update0) GetTlsServerUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TlsServerUri.Get(), o.TlsServerUri.IsSet()
}

// HasTlsServerUri returns a boolean if a field has been set.
func (o *S3Update0) HasTlsServerUri() bool {
	if o != nil && o.TlsServerUri.IsSet() {
		return true
	}

	return false
}

// SetTlsServerUri gets a reference to the given NullableString and assigns it to the TlsServerUri field.
func (o *S3Update0) SetTlsServerUri(v string) {
	o.TlsServerUri.Set(&v)
}

// SetTlsServerUriNil sets the value for TlsServerUri to be an explicit nil
func (o *S3Update0) SetTlsServerUriNil() {
	o.TlsServerUri.Set(nil)
}

// UnsetTlsServerUri ensures that no value is present for TlsServerUri, not even an explicit nil
func (o *S3Update0) UnsetTlsServerUri() {
	o.TlsServerUri.Unset()
}

// GetStoragePath returns the StoragePath field value if set, zero value otherwise.
func (o *S3Update0) GetStoragePath() string {
	if o == nil || IsNil(o.StoragePath) {
		var ret string
		return ret
	}
	return *o.StoragePath
}

// GetStoragePathOk returns a tuple with the StoragePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Update0) GetStoragePathOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePath) {
		return nil, false
	}
	return o.StoragePath, true
}

// HasStoragePath returns a boolean if a field has been set.
func (o *S3Update0) HasStoragePath() bool {
	if o != nil && !IsNil(o.StoragePath) {
		return true
	}

	return false
}

// SetStoragePath gets a reference to the given string and assigns it to the StoragePath field.
func (o *S3Update0) SetStoragePath(v string) {
	o.StoragePath = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3Update0) GetCertificate() int32 {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret int32
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Update0) GetCertificateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *S3Update0) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableInt32 and assigns it to the Certificate field.
func (o *S3Update0) SetCertificate(v int32) {
	o.Certificate.Set(&v)
}

// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *S3Update0) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *S3Update0) UnsetCertificate() {
	o.Certificate.Unset()
}

func (o S3Update0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Update0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bindip) {
		toSerialize["bindip"] = o.Bindip
	}
	if !IsNil(o.Bindport) {
		toSerialize["bindport"] = o.Bindport
	}
	if !IsNil(o.ConsoleBindport) {
		toSerialize["console_bindport"] = o.ConsoleBindport
	}
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	if !IsNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	if o.TlsServerUri.IsSet() {
		toSerialize["tls_server_uri"] = o.TlsServerUri.Get()
	}
	if !IsNil(o.StoragePath) {
		toSerialize["storage_path"] = o.StoragePath
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	return toSerialize, nil
}

type NullableS3Update0 struct {
	value *S3Update0
	isSet bool
}

func (v NullableS3Update0) Get() *S3Update0 {
	return v.value
}

func (v *NullableS3Update0) Set(val *S3Update0) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Update0) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Update0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Update0(val *S3Update0) *NullableS3Update0 {
	return &NullableS3Update0{value: val, isSet: true}
}

func (v NullableS3Update0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Update0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
