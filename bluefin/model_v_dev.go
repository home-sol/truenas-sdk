/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the VDev type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDev{}

// VDev struct for VDev
type VDev struct {
	Guid                 string         `json:"guid"`
	Name                 string         `json:"name"`
	Type                 string         `json:"type"`
	Path                 NullableString `json:"path"`
	Status               string         `json:"status"`
	Children             []Device       `json:"children,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VDev VDev

// NewVDev instantiates a new VDev object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDev(guid string, name string, type_ string, path NullableString, status string) *VDev {
	this := VDev{}
	this.Guid = guid
	this.Name = name
	this.Type = type_
	this.Path = path
	this.Status = status
	return &this
}

// NewVDevWithDefaults instantiates a new VDev object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDevWithDefaults() *VDev {
	this := VDev{}
	return &this
}

// GetGuid returns the Guid field value
func (o *VDev) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *VDev) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *VDev) SetGuid(v string) {
	o.Guid = v
}

// GetName returns the Name field value
func (o *VDev) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VDev) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VDev) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *VDev) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VDev) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VDev) SetType(v string) {
	o.Type = v
}

// GetPath returns the Path field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VDev) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}

	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VDev) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// SetPath sets field value
func (o *VDev) SetPath(v string) {
	o.Path.Set(&v)
}

// GetStatus returns the Status field value
func (o *VDev) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VDev) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VDev) SetStatus(v string) {
	o.Status = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *VDev) GetChildren() []Device {
	if o == nil || IsNil(o.Children) {
		var ret []Device
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDev) GetChildrenOk() ([]Device, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *VDev) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Device and assigns it to the Children field.
func (o *VDev) SetChildren(v []Device) {
	o.Children = v
}

func (o VDev) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDev) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["guid"] = o.Guid
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["path"] = o.Path.Get()
	toSerialize["status"] = o.Status
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VDev) UnmarshalJSON(bytes []byte) (err error) {
	varVDev := _VDev{}

	if err = json.Unmarshal(bytes, &varVDev); err == nil {
		*o = VDev(varVDev)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "guid")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "path")
		delete(additionalProperties, "status")
		delete(additionalProperties, "children")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVDev struct {
	value *VDev
	isSet bool
}

func (v NullableVDev) Get() *VDev {
	return v.value
}

func (v *NullableVDev) Set(val *VDev) {
	v.value = val
	v.isSet = true
}

func (v NullableVDev) IsSet() bool {
	return v.isSet
}

func (v *NullableVDev) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDev(val *VDev) *NullableVDev {
	return &NullableVDev{value: val, isSet: true}
}

func (v NullableVDev) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDev) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
