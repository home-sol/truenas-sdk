/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolScrubScrub type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolScrubScrub{}

// PoolScrubScrub struct for PoolScrubScrub
type PoolScrubScrub struct {
	Name                 *string          `json:"name,omitempty"`
	Action               *PoolScrubScrub1 `json:"action,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PoolScrubScrub PoolScrubScrub

// NewPoolScrubScrub instantiates a new PoolScrubScrub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolScrubScrub() *PoolScrubScrub {
	this := PoolScrubScrub{}
	var action PoolScrubScrub1
	this.Action = &action
	return &this
}

// NewPoolScrubScrubWithDefaults instantiates a new PoolScrubScrub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolScrubScrubWithDefaults() *PoolScrubScrub {
	this := PoolScrubScrub{}
	var action PoolScrubScrub1
	this.Action = &action
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PoolScrubScrub) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolScrubScrub) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PoolScrubScrub) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PoolScrubScrub) SetName(v string) {
	o.Name = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PoolScrubScrub) GetAction() PoolScrubScrub1 {
	if o == nil || IsNil(o.Action) {
		var ret PoolScrubScrub1
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolScrubScrub) GetActionOk() (*PoolScrubScrub1, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PoolScrubScrub) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given PoolScrubScrub1 and assigns it to the Action field.
func (o *PoolScrubScrub) SetAction(v PoolScrubScrub1) {
	o.Action = &v
}

func (o PoolScrubScrub) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolScrubScrub) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PoolScrubScrub) UnmarshalJSON(bytes []byte) (err error) {
	varPoolScrubScrub := _PoolScrubScrub{}

	if err = json.Unmarshal(bytes, &varPoolScrubScrub); err == nil {
		*o = PoolScrubScrub(varPoolScrubScrub)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoolScrubScrub struct {
	value *PoolScrubScrub
	isSet bool
}

func (v NullablePoolScrubScrub) Get() *PoolScrubScrub {
	return v.value
}

func (v *NullablePoolScrubScrub) Set(val *PoolScrubScrub) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolScrubScrub) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolScrubScrub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolScrubScrub(val *PoolScrubScrub) *NullablePoolScrubScrub {
	return &NullablePoolScrubScrub{value: val, isSet: true}
}

func (v NullablePoolScrubScrub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolScrubScrub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
