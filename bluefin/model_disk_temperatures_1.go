/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the DiskTemperatures1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskTemperatures1{}

// DiskTemperatures1 struct for DiskTemperatures1
type DiskTemperatures1 struct {
	Cache      NullableInt32 `json:"cache,omitempty"`
	OnlyCached *bool         `json:"only_cached,omitempty"`
	Powermode  *string       `json:"powermode,omitempty"`
}

// NewDiskTemperatures1 instantiates a new DiskTemperatures1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskTemperatures1() *DiskTemperatures1 {
	this := DiskTemperatures1{}
	var cache int32 = 290
	this.Cache = *NewNullableInt32(&cache)
	var onlyCached bool
	this.OnlyCached = &onlyCached
	var powermode string
	this.Powermode = &powermode
	return &this
}

// NewDiskTemperatures1WithDefaults instantiates a new DiskTemperatures1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskTemperatures1WithDefaults() *DiskTemperatures1 {
	this := DiskTemperatures1{}
	var cache int32 = 290
	this.Cache = *NewNullableInt32(&cache)
	var onlyCached bool
	this.OnlyCached = &onlyCached
	var powermode string
	this.Powermode = &powermode
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskTemperatures1) GetCache() int32 {
	if o == nil || IsNil(o.Cache.Get()) {
		var ret int32
		return ret
	}
	return *o.Cache.Get()
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskTemperatures1) GetCacheOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cache.Get(), o.Cache.IsSet()
}

// HasCache returns a boolean if a field has been set.
func (o *DiskTemperatures1) HasCache() bool {
	if o != nil && o.Cache.IsSet() {
		return true
	}

	return false
}

// SetCache gets a reference to the given NullableInt32 and assigns it to the Cache field.
func (o *DiskTemperatures1) SetCache(v int32) {
	o.Cache.Set(&v)
}

// SetCacheNil sets the value for Cache to be an explicit nil
func (o *DiskTemperatures1) SetCacheNil() {
	o.Cache.Set(nil)
}

// UnsetCache ensures that no value is present for Cache, not even an explicit nil
func (o *DiskTemperatures1) UnsetCache() {
	o.Cache.Unset()
}

// GetOnlyCached returns the OnlyCached field value if set, zero value otherwise.
func (o *DiskTemperatures1) GetOnlyCached() bool {
	if o == nil || IsNil(o.OnlyCached) {
		var ret bool
		return ret
	}
	return *o.OnlyCached
}

// GetOnlyCachedOk returns a tuple with the OnlyCached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatures1) GetOnlyCachedOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyCached) {
		return nil, false
	}
	return o.OnlyCached, true
}

// HasOnlyCached returns a boolean if a field has been set.
func (o *DiskTemperatures1) HasOnlyCached() bool {
	if o != nil && !IsNil(o.OnlyCached) {
		return true
	}

	return false
}

// SetOnlyCached gets a reference to the given bool and assigns it to the OnlyCached field.
func (o *DiskTemperatures1) SetOnlyCached(v bool) {
	o.OnlyCached = &v
}

// GetPowermode returns the Powermode field value if set, zero value otherwise.
func (o *DiskTemperatures1) GetPowermode() string {
	if o == nil || IsNil(o.Powermode) {
		var ret string
		return ret
	}
	return *o.Powermode
}

// GetPowermodeOk returns a tuple with the Powermode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTemperatures1) GetPowermodeOk() (*string, bool) {
	if o == nil || IsNil(o.Powermode) {
		return nil, false
	}
	return o.Powermode, true
}

// HasPowermode returns a boolean if a field has been set.
func (o *DiskTemperatures1) HasPowermode() bool {
	if o != nil && !IsNil(o.Powermode) {
		return true
	}

	return false
}

// SetPowermode gets a reference to the given string and assigns it to the Powermode field.
func (o *DiskTemperatures1) SetPowermode(v string) {
	o.Powermode = &v
}

func (o DiskTemperatures1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskTemperatures1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cache.IsSet() {
		toSerialize["cache"] = o.Cache.Get()
	}
	if !IsNil(o.OnlyCached) {
		toSerialize["only_cached"] = o.OnlyCached
	}
	if !IsNil(o.Powermode) {
		toSerialize["powermode"] = o.Powermode
	}
	return toSerialize, nil
}

type NullableDiskTemperatures1 struct {
	value *DiskTemperatures1
	isSet bool
}

func (v NullableDiskTemperatures1) Get() *DiskTemperatures1 {
	return v.value
}

func (v *NullableDiskTemperatures1) Set(val *DiskTemperatures1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTemperatures1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTemperatures1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTemperatures1(val *DiskTemperatures1) *NullableDiskTemperatures1 {
	return &NullableDiskTemperatures1{value: val, isSet: true}
}

func (v NullableDiskTemperatures1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTemperatures1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
