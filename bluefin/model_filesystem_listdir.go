/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemListdir type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemListdir{}

// FilesystemListdir struct for FilesystemListdir
type FilesystemListdir struct {
	Path                 *string             `json:"path,omitempty"`
	QueryFilters         []interface{}       `json:"query-filters,omitempty"`
	QueryOptions         *FilesystemListdir2 `json:"query-options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesystemListdir FilesystemListdir

// NewFilesystemListdir instantiates a new FilesystemListdir object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemListdir() *FilesystemListdir {
	this := FilesystemListdir{}
	var queryOptions FilesystemListdir2
	this.QueryOptions = &queryOptions
	return &this
}

// NewFilesystemListdirWithDefaults instantiates a new FilesystemListdir object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemListdirWithDefaults() *FilesystemListdir {
	this := FilesystemListdir{}
	var queryOptions FilesystemListdir2
	this.QueryOptions = &queryOptions
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FilesystemListdir) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemListdir) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FilesystemListdir) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FilesystemListdir) SetPath(v string) {
	o.Path = &v
}

// GetQueryFilters returns the QueryFilters field value if set, zero value otherwise.
func (o *FilesystemListdir) GetQueryFilters() []interface{} {
	if o == nil || IsNil(o.QueryFilters) {
		var ret []interface{}
		return ret
	}
	return o.QueryFilters
}

// GetQueryFiltersOk returns a tuple with the QueryFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemListdir) GetQueryFiltersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.QueryFilters) {
		return nil, false
	}
	return o.QueryFilters, true
}

// HasQueryFilters returns a boolean if a field has been set.
func (o *FilesystemListdir) HasQueryFilters() bool {
	if o != nil && !IsNil(o.QueryFilters) {
		return true
	}

	return false
}

// SetQueryFilters gets a reference to the given []interface{} and assigns it to the QueryFilters field.
func (o *FilesystemListdir) SetQueryFilters(v []interface{}) {
	o.QueryFilters = v
}

// GetQueryOptions returns the QueryOptions field value if set, zero value otherwise.
func (o *FilesystemListdir) GetQueryOptions() FilesystemListdir2 {
	if o == nil || IsNil(o.QueryOptions) {
		var ret FilesystemListdir2
		return ret
	}
	return *o.QueryOptions
}

// GetQueryOptionsOk returns a tuple with the QueryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemListdir) GetQueryOptionsOk() (*FilesystemListdir2, bool) {
	if o == nil || IsNil(o.QueryOptions) {
		return nil, false
	}
	return o.QueryOptions, true
}

// HasQueryOptions returns a boolean if a field has been set.
func (o *FilesystemListdir) HasQueryOptions() bool {
	if o != nil && !IsNil(o.QueryOptions) {
		return true
	}

	return false
}

// SetQueryOptions gets a reference to the given FilesystemListdir2 and assigns it to the QueryOptions field.
func (o *FilesystemListdir) SetQueryOptions(v FilesystemListdir2) {
	o.QueryOptions = &v
}

func (o FilesystemListdir) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemListdir) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.QueryFilters) {
		toSerialize["query-filters"] = o.QueryFilters
	}
	if !IsNil(o.QueryOptions) {
		toSerialize["query-options"] = o.QueryOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesystemListdir) UnmarshalJSON(bytes []byte) (err error) {
	varFilesystemListdir := _FilesystemListdir{}

	if err = json.Unmarshal(bytes, &varFilesystemListdir); err == nil {
		*o = FilesystemListdir(varFilesystemListdir)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "path")
		delete(additionalProperties, "query-filters")
		delete(additionalProperties, "query-options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesystemListdir struct {
	value *FilesystemListdir
	isSet bool
}

func (v NullableFilesystemListdir) Get() *FilesystemListdir {
	return v.value
}

func (v *NullableFilesystemListdir) Set(val *FilesystemListdir) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemListdir) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemListdir) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemListdir(val *FilesystemListdir) *NullableFilesystemListdir {
	return &NullableFilesystemListdir{value: val, isSet: true}
}

func (v NullableFilesystemListdir) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemListdir) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
