/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SmartUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmartUpdate0{}

// SmartUpdate0 struct for SmartUpdate0
type SmartUpdate0 struct {
	// `interval` is an integer value in minutes which defines how often smartd activates to check if any tests are configured to run.
	Interval      *int32  `json:"interval,omitempty"`
	Powermode     *string `json:"powermode,omitempty"`
	Difference    *int32  `json:"difference,omitempty"`
	Informational *int32  `json:"informational,omitempty"`
	Critical      *int32  `json:"critical,omitempty"`
}

// NewSmartUpdate0 instantiates a new SmartUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartUpdate0() *SmartUpdate0 {
	this := SmartUpdate0{}
	return &this
}

// NewSmartUpdate0WithDefaults instantiates a new SmartUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartUpdate0WithDefaults() *SmartUpdate0 {
	this := SmartUpdate0{}
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *SmartUpdate0) GetInterval() int32 {
	if o == nil || IsNil(o.Interval) {
		var ret int32
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUpdate0) GetIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *SmartUpdate0) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int32 and assigns it to the Interval field.
func (o *SmartUpdate0) SetInterval(v int32) {
	o.Interval = &v
}

// GetPowermode returns the Powermode field value if set, zero value otherwise.
func (o *SmartUpdate0) GetPowermode() string {
	if o == nil || IsNil(o.Powermode) {
		var ret string
		return ret
	}
	return *o.Powermode
}

// GetPowermodeOk returns a tuple with the Powermode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUpdate0) GetPowermodeOk() (*string, bool) {
	if o == nil || IsNil(o.Powermode) {
		return nil, false
	}
	return o.Powermode, true
}

// HasPowermode returns a boolean if a field has been set.
func (o *SmartUpdate0) HasPowermode() bool {
	if o != nil && !IsNil(o.Powermode) {
		return true
	}

	return false
}

// SetPowermode gets a reference to the given string and assigns it to the Powermode field.
func (o *SmartUpdate0) SetPowermode(v string) {
	o.Powermode = &v
}

// GetDifference returns the Difference field value if set, zero value otherwise.
func (o *SmartUpdate0) GetDifference() int32 {
	if o == nil || IsNil(o.Difference) {
		var ret int32
		return ret
	}
	return *o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUpdate0) GetDifferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Difference) {
		return nil, false
	}
	return o.Difference, true
}

// HasDifference returns a boolean if a field has been set.
func (o *SmartUpdate0) HasDifference() bool {
	if o != nil && !IsNil(o.Difference) {
		return true
	}

	return false
}

// SetDifference gets a reference to the given int32 and assigns it to the Difference field.
func (o *SmartUpdate0) SetDifference(v int32) {
	o.Difference = &v
}

// GetInformational returns the Informational field value if set, zero value otherwise.
func (o *SmartUpdate0) GetInformational() int32 {
	if o == nil || IsNil(o.Informational) {
		var ret int32
		return ret
	}
	return *o.Informational
}

// GetInformationalOk returns a tuple with the Informational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUpdate0) GetInformationalOk() (*int32, bool) {
	if o == nil || IsNil(o.Informational) {
		return nil, false
	}
	return o.Informational, true
}

// HasInformational returns a boolean if a field has been set.
func (o *SmartUpdate0) HasInformational() bool {
	if o != nil && !IsNil(o.Informational) {
		return true
	}

	return false
}

// SetInformational gets a reference to the given int32 and assigns it to the Informational field.
func (o *SmartUpdate0) SetInformational(v int32) {
	o.Informational = &v
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *SmartUpdate0) GetCritical() int32 {
	if o == nil || IsNil(o.Critical) {
		var ret int32
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmartUpdate0) GetCriticalOk() (*int32, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *SmartUpdate0) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given int32 and assigns it to the Critical field.
func (o *SmartUpdate0) SetCritical(v int32) {
	o.Critical = &v
}

func (o SmartUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmartUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.Powermode) {
		toSerialize["powermode"] = o.Powermode
	}
	if !IsNil(o.Difference) {
		toSerialize["difference"] = o.Difference
	}
	if !IsNil(o.Informational) {
		toSerialize["informational"] = o.Informational
	}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	return toSerialize, nil
}

type NullableSmartUpdate0 struct {
	value *SmartUpdate0
	isSet bool
}

func (v NullableSmartUpdate0) Get() *SmartUpdate0 {
	return v.value
}

func (v *NullableSmartUpdate0) Set(val *SmartUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartUpdate0(val *SmartUpdate0) *NullableSmartUpdate0 {
	return &NullableSmartUpdate0{value: val, isSet: true}
}

func (v NullableSmartUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
