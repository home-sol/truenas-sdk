/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// FailoverControl0 the model 'FailoverControl0'
type FailoverControl0 string

// List of failover_control_0
const (
	ENABLE  FailoverControl0 = "ENABLE"
	DISABLE FailoverControl0 = "DISABLE"
)

// All allowed values of FailoverControl0 enum
var AllowedFailoverControl0EnumValues = []FailoverControl0{
	"ENABLE",
	"DISABLE",
}

func (v *FailoverControl0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FailoverControl0(value)
	for _, existing := range AllowedFailoverControl0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FailoverControl0", value)
}

// NewFailoverControl0FromValue returns a pointer to a valid FailoverControl0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFailoverControl0FromValue(v string) (*FailoverControl0, error) {
	ev := FailoverControl0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FailoverControl0: valid values are %v", v, AllowedFailoverControl0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FailoverControl0) IsValid() bool {
	for _, existing := range AllowedFailoverControl0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to failover_control_0 value
func (v FailoverControl0) Ptr() *FailoverControl0 {
	return &v
}

type NullableFailoverControl0 struct {
	value *FailoverControl0
	isSet bool
}

func (v NullableFailoverControl0) Get() *FailoverControl0 {
	return v.value
}

func (v *NullableFailoverControl0) Set(val *FailoverControl0) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverControl0) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverControl0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverControl0(val *FailoverControl0) *NullableFailoverControl0 {
	return &NullableFailoverControl0{value: val, isSet: true}
}

func (v NullableFailoverControl0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverControl0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
