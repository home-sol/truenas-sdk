/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemSetacl0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemSetacl0{}

// FilesystemSetacl0 struct for FilesystemSetacl0
type FilesystemSetacl0 struct {
	// `path` full path to directory or file.
	Path *string `json:"path,omitempty"`
	// `uid` the desired UID of the file user. If set to None (the default), then user is not changed.
	Uid NullableInt32 `json:"uid,omitempty"`
	// `gid` the desired GID of the file group. If set to None (the default), then group is not changed.
	Gid        NullableInt32          `json:"gid,omitempty"`
	Dacl       *FilesystemSetacl0Dacl `json:"dacl,omitempty"`
	Nfs41Flags *Nfs41Flags            `json:"nfs41_flags,omitempty"`
	// `dacl` ACL entries. Formatting depends on the underlying `acltype`. NFS4ACL requires NFSv4 entries. POSIX1e requires POSIX1e entries.
	Acltype NullableString `json:"acltype,omitempty"`
	Options *Options1      `json:"options,omitempty"`
}

// NewFilesystemSetacl0 instantiates a new FilesystemSetacl0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemSetacl0() *FilesystemSetacl0 {
	this := FilesystemSetacl0{}
	var nfs41Flags Nfs41Flags
	this.Nfs41Flags = &nfs41Flags
	var options Options1
	this.Options = &options
	return &this
}

// NewFilesystemSetacl0WithDefaults instantiates a new FilesystemSetacl0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemSetacl0WithDefaults() *FilesystemSetacl0 {
	this := FilesystemSetacl0{}
	var nfs41Flags Nfs41Flags
	this.Nfs41Flags = &nfs41Flags
	var options Options1
	this.Options = &options
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FilesystemSetacl0) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetacl0) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FilesystemSetacl0) SetPath(v string) {
	o.Path = &v
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemSetacl0) GetUid() int32 {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret int32
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemSetacl0) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt32 and assigns it to the Uid field.
func (o *FilesystemSetacl0) SetUid(v int32) {
	o.Uid.Set(&v)
}

// SetUidNil sets the value for Uid to be an explicit nil
func (o *FilesystemSetacl0) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *FilesystemSetacl0) UnsetUid() {
	o.Uid.Unset()
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemSetacl0) GetGid() int32 {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret int32
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemSetacl0) GetGidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt32 and assigns it to the Gid field.
func (o *FilesystemSetacl0) SetGid(v int32) {
	o.Gid.Set(&v)
}

// SetGidNil sets the value for Gid to be an explicit nil
func (o *FilesystemSetacl0) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *FilesystemSetacl0) UnsetGid() {
	o.Gid.Unset()
}

// GetDacl returns the Dacl field value if set, zero value otherwise.
func (o *FilesystemSetacl0) GetDacl() FilesystemSetacl0Dacl {
	if o == nil || IsNil(o.Dacl) {
		var ret FilesystemSetacl0Dacl
		return ret
	}
	return *o.Dacl
}

// GetDaclOk returns a tuple with the Dacl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetacl0) GetDaclOk() (*FilesystemSetacl0Dacl, bool) {
	if o == nil || IsNil(o.Dacl) {
		return nil, false
	}
	return o.Dacl, true
}

// HasDacl returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasDacl() bool {
	if o != nil && !IsNil(o.Dacl) {
		return true
	}

	return false
}

// SetDacl gets a reference to the given FilesystemSetacl0Dacl and assigns it to the Dacl field.
func (o *FilesystemSetacl0) SetDacl(v FilesystemSetacl0Dacl) {
	o.Dacl = &v
}

// GetNfs41Flags returns the Nfs41Flags field value if set, zero value otherwise.
func (o *FilesystemSetacl0) GetNfs41Flags() Nfs41Flags {
	if o == nil || IsNil(o.Nfs41Flags) {
		var ret Nfs41Flags
		return ret
	}
	return *o.Nfs41Flags
}

// GetNfs41FlagsOk returns a tuple with the Nfs41Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetacl0) GetNfs41FlagsOk() (*Nfs41Flags, bool) {
	if o == nil || IsNil(o.Nfs41Flags) {
		return nil, false
	}
	return o.Nfs41Flags, true
}

// HasNfs41Flags returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasNfs41Flags() bool {
	if o != nil && !IsNil(o.Nfs41Flags) {
		return true
	}

	return false
}

// SetNfs41Flags gets a reference to the given Nfs41Flags and assigns it to the Nfs41Flags field.
func (o *FilesystemSetacl0) SetNfs41Flags(v Nfs41Flags) {
	o.Nfs41Flags = &v
}

// GetAcltype returns the Acltype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemSetacl0) GetAcltype() string {
	if o == nil || IsNil(o.Acltype.Get()) {
		var ret string
		return ret
	}
	return *o.Acltype.Get()
}

// GetAcltypeOk returns a tuple with the Acltype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemSetacl0) GetAcltypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Acltype.Get(), o.Acltype.IsSet()
}

// HasAcltype returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasAcltype() bool {
	if o != nil && o.Acltype.IsSet() {
		return true
	}

	return false
}

// SetAcltype gets a reference to the given NullableString and assigns it to the Acltype field.
func (o *FilesystemSetacl0) SetAcltype(v string) {
	o.Acltype.Set(&v)
}

// SetAcltypeNil sets the value for Acltype to be an explicit nil
func (o *FilesystemSetacl0) SetAcltypeNil() {
	o.Acltype.Set(nil)
}

// UnsetAcltype ensures that no value is present for Acltype, not even an explicit nil
func (o *FilesystemSetacl0) UnsetAcltype() {
	o.Acltype.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FilesystemSetacl0) GetOptions() Options1 {
	if o == nil || IsNil(o.Options) {
		var ret Options1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetacl0) GetOptionsOk() (*Options1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FilesystemSetacl0) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given Options1 and assigns it to the Options field.
func (o *FilesystemSetacl0) SetOptions(v Options1) {
	o.Options = &v
}

func (o FilesystemSetacl0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemSetacl0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if !IsNil(o.Dacl) {
		toSerialize["dacl"] = o.Dacl
	}
	if !IsNil(o.Nfs41Flags) {
		toSerialize["nfs41_flags"] = o.Nfs41Flags
	}
	if o.Acltype.IsSet() {
		toSerialize["acltype"] = o.Acltype.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableFilesystemSetacl0 struct {
	value *FilesystemSetacl0
	isSet bool
}

func (v NullableFilesystemSetacl0) Get() *FilesystemSetacl0 {
	return v.value
}

func (v *NullableFilesystemSetacl0) Set(val *FilesystemSetacl0) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemSetacl0) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemSetacl0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemSetacl0(val *FilesystemSetacl0) *NullableFilesystemSetacl0 {
	return &NullableFilesystemSetacl0{value: val, isSet: true}
}

func (v NullableFilesystemSetacl0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemSetacl0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
