/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the UpdateManual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateManual{}

// UpdateManual struct for UpdateManual
type UpdateManual struct {
	Path                 *string        `json:"path,omitempty"`
	Options              *UpdateManual1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateManual UpdateManual

// NewUpdateManual instantiates a new UpdateManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateManual() *UpdateManual {
	this := UpdateManual{}
	var options UpdateManual1
	this.Options = &options
	return &this
}

// NewUpdateManualWithDefaults instantiates a new UpdateManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateManualWithDefaults() *UpdateManual {
	this := UpdateManual{}
	var options UpdateManual1
	this.Options = &options
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *UpdateManual) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateManual) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *UpdateManual) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *UpdateManual) SetPath(v string) {
	o.Path = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateManual) GetOptions() UpdateManual1 {
	if o == nil || IsNil(o.Options) {
		var ret UpdateManual1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateManual) GetOptionsOk() (*UpdateManual1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateManual) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given UpdateManual1 and assigns it to the Options field.
func (o *UpdateManual) SetOptions(v UpdateManual1) {
	o.Options = &v
}

func (o UpdateManual) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateManual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateManual) UnmarshalJSON(bytes []byte) (err error) {
	varUpdateManual := _UpdateManual{}

	if err = json.Unmarshal(bytes, &varUpdateManual); err == nil {
		*o = UpdateManual(varUpdateManual)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "path")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateManual struct {
	value *UpdateManual
	isSet bool
}

func (v NullableUpdateManual) Get() *UpdateManual {
	return v.value
}

func (v *NullableUpdateManual) Set(val *UpdateManual) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateManual) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateManual(val *UpdateManual) *NullableUpdateManual {
	return &NullableUpdateManual{value: val, isSet: true}
}

func (v NullableUpdateManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
