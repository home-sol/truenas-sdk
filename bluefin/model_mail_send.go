/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the MailSend type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailSend{}

// MailSend struct for MailSend
type MailSend struct {
	MailMessage          *MailSend0 `json:"mail_message,omitempty"`
	MailEntry            *MailSend1 `json:"mail_entry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MailSend MailSend

// NewMailSend instantiates a new MailSend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailSend() *MailSend {
	this := MailSend{}
	var mailMessage MailSend0
	this.MailMessage = &mailMessage
	var mailEntry MailSend1
	this.MailEntry = &mailEntry
	return &this
}

// NewMailSendWithDefaults instantiates a new MailSend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailSendWithDefaults() *MailSend {
	this := MailSend{}
	var mailMessage MailSend0
	this.MailMessage = &mailMessage
	var mailEntry MailSend1
	this.MailEntry = &mailEntry
	return &this
}

// GetMailMessage returns the MailMessage field value if set, zero value otherwise.
func (o *MailSend) GetMailMessage() MailSend0 {
	if o == nil || IsNil(o.MailMessage) {
		var ret MailSend0
		return ret
	}
	return *o.MailMessage
}

// GetMailMessageOk returns a tuple with the MailMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend) GetMailMessageOk() (*MailSend0, bool) {
	if o == nil || IsNil(o.MailMessage) {
		return nil, false
	}
	return o.MailMessage, true
}

// HasMailMessage returns a boolean if a field has been set.
func (o *MailSend) HasMailMessage() bool {
	if o != nil && !IsNil(o.MailMessage) {
		return true
	}

	return false
}

// SetMailMessage gets a reference to the given MailSend0 and assigns it to the MailMessage field.
func (o *MailSend) SetMailMessage(v MailSend0) {
	o.MailMessage = &v
}

// GetMailEntry returns the MailEntry field value if set, zero value otherwise.
func (o *MailSend) GetMailEntry() MailSend1 {
	if o == nil || IsNil(o.MailEntry) {
		var ret MailSend1
		return ret
	}
	return *o.MailEntry
}

// GetMailEntryOk returns a tuple with the MailEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend) GetMailEntryOk() (*MailSend1, bool) {
	if o == nil || IsNil(o.MailEntry) {
		return nil, false
	}
	return o.MailEntry, true
}

// HasMailEntry returns a boolean if a field has been set.
func (o *MailSend) HasMailEntry() bool {
	if o != nil && !IsNil(o.MailEntry) {
		return true
	}

	return false
}

// SetMailEntry gets a reference to the given MailSend1 and assigns it to the MailEntry field.
func (o *MailSend) SetMailEntry(v MailSend1) {
	o.MailEntry = &v
}

func (o MailSend) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailSend) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MailMessage) {
		toSerialize["mail_message"] = o.MailMessage
	}
	if !IsNil(o.MailEntry) {
		toSerialize["mail_entry"] = o.MailEntry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MailSend) UnmarshalJSON(bytes []byte) (err error) {
	varMailSend := _MailSend{}

	if err = json.Unmarshal(bytes, &varMailSend); err == nil {
		*o = MailSend(varMailSend)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "mail_message")
		delete(additionalProperties, "mail_entry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMailSend struct {
	value *MailSend
	isSet bool
}

func (v NullableMailSend) Get() *MailSend {
	return v.value
}

func (v *NullableMailSend) Set(val *MailSend) {
	v.value = val
	v.isSet = true
}

func (v NullableMailSend) IsSet() bool {
	return v.isSet
}

func (v *NullableMailSend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailSend(val *MailSend) *NullableMailSend {
	return &NullableMailSend{value: val, isSet: true}
}

func (v NullableMailSend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailSend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
