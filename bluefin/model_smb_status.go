/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SmbStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbStatus{}

// SmbStatus struct for SmbStatus
type SmbStatus struct {
	InfoLevel            *SmbStatus0   `json:"info_level,omitempty"`
	QueryFilters         []interface{} `json:"query-filters,omitempty"`
	QueryOptions         *SmbStatus2   `json:"query-options,omitempty"`
	StatusOptions        *SmbStatus3   `json:"status_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmbStatus SmbStatus

// NewSmbStatus instantiates a new SmbStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbStatus() *SmbStatus {
	this := SmbStatus{}
	var infoLevel SmbStatus0
	this.InfoLevel = &infoLevel
	var queryOptions SmbStatus2
	this.QueryOptions = &queryOptions
	var statusOptions SmbStatus3
	this.StatusOptions = &statusOptions
	return &this
}

// NewSmbStatusWithDefaults instantiates a new SmbStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbStatusWithDefaults() *SmbStatus {
	this := SmbStatus{}
	var infoLevel SmbStatus0
	this.InfoLevel = &infoLevel
	var queryOptions SmbStatus2
	this.QueryOptions = &queryOptions
	var statusOptions SmbStatus3
	this.StatusOptions = &statusOptions
	return &this
}

// GetInfoLevel returns the InfoLevel field value if set, zero value otherwise.
func (o *SmbStatus) GetInfoLevel() SmbStatus0 {
	if o == nil || IsNil(o.InfoLevel) {
		var ret SmbStatus0
		return ret
	}
	return *o.InfoLevel
}

// GetInfoLevelOk returns a tuple with the InfoLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbStatus) GetInfoLevelOk() (*SmbStatus0, bool) {
	if o == nil || IsNil(o.InfoLevel) {
		return nil, false
	}
	return o.InfoLevel, true
}

// HasInfoLevel returns a boolean if a field has been set.
func (o *SmbStatus) HasInfoLevel() bool {
	if o != nil && !IsNil(o.InfoLevel) {
		return true
	}

	return false
}

// SetInfoLevel gets a reference to the given SmbStatus0 and assigns it to the InfoLevel field.
func (o *SmbStatus) SetInfoLevel(v SmbStatus0) {
	o.InfoLevel = &v
}

// GetQueryFilters returns the QueryFilters field value if set, zero value otherwise.
func (o *SmbStatus) GetQueryFilters() []interface{} {
	if o == nil || IsNil(o.QueryFilters) {
		var ret []interface{}
		return ret
	}
	return o.QueryFilters
}

// GetQueryFiltersOk returns a tuple with the QueryFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbStatus) GetQueryFiltersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.QueryFilters) {
		return nil, false
	}
	return o.QueryFilters, true
}

// HasQueryFilters returns a boolean if a field has been set.
func (o *SmbStatus) HasQueryFilters() bool {
	if o != nil && !IsNil(o.QueryFilters) {
		return true
	}

	return false
}

// SetQueryFilters gets a reference to the given []interface{} and assigns it to the QueryFilters field.
func (o *SmbStatus) SetQueryFilters(v []interface{}) {
	o.QueryFilters = v
}

// GetQueryOptions returns the QueryOptions field value if set, zero value otherwise.
func (o *SmbStatus) GetQueryOptions() SmbStatus2 {
	if o == nil || IsNil(o.QueryOptions) {
		var ret SmbStatus2
		return ret
	}
	return *o.QueryOptions
}

// GetQueryOptionsOk returns a tuple with the QueryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbStatus) GetQueryOptionsOk() (*SmbStatus2, bool) {
	if o == nil || IsNil(o.QueryOptions) {
		return nil, false
	}
	return o.QueryOptions, true
}

// HasQueryOptions returns a boolean if a field has been set.
func (o *SmbStatus) HasQueryOptions() bool {
	if o != nil && !IsNil(o.QueryOptions) {
		return true
	}

	return false
}

// SetQueryOptions gets a reference to the given SmbStatus2 and assigns it to the QueryOptions field.
func (o *SmbStatus) SetQueryOptions(v SmbStatus2) {
	o.QueryOptions = &v
}

// GetStatusOptions returns the StatusOptions field value if set, zero value otherwise.
func (o *SmbStatus) GetStatusOptions() SmbStatus3 {
	if o == nil || IsNil(o.StatusOptions) {
		var ret SmbStatus3
		return ret
	}
	return *o.StatusOptions
}

// GetStatusOptionsOk returns a tuple with the StatusOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbStatus) GetStatusOptionsOk() (*SmbStatus3, bool) {
	if o == nil || IsNil(o.StatusOptions) {
		return nil, false
	}
	return o.StatusOptions, true
}

// HasStatusOptions returns a boolean if a field has been set.
func (o *SmbStatus) HasStatusOptions() bool {
	if o != nil && !IsNil(o.StatusOptions) {
		return true
	}

	return false
}

// SetStatusOptions gets a reference to the given SmbStatus3 and assigns it to the StatusOptions field.
func (o *SmbStatus) SetStatusOptions(v SmbStatus3) {
	o.StatusOptions = &v
}

func (o SmbStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InfoLevel) {
		toSerialize["info_level"] = o.InfoLevel
	}
	if !IsNil(o.QueryFilters) {
		toSerialize["query-filters"] = o.QueryFilters
	}
	if !IsNil(o.QueryOptions) {
		toSerialize["query-options"] = o.QueryOptions
	}
	if !IsNil(o.StatusOptions) {
		toSerialize["status_options"] = o.StatusOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmbStatus) UnmarshalJSON(bytes []byte) (err error) {
	varSmbStatus := _SmbStatus{}

	if err = json.Unmarshal(bytes, &varSmbStatus); err == nil {
		*o = SmbStatus(varSmbStatus)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "info_level")
		delete(additionalProperties, "query-filters")
		delete(additionalProperties, "query-options")
		delete(additionalProperties, "status_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmbStatus struct {
	value *SmbStatus
	isSet bool
}

func (v NullableSmbStatus) Get() *SmbStatus {
	return v.value
}

func (v *NullableSmbStatus) Set(val *SmbStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbStatus(val *SmbStatus) *NullableSmbStatus {
	return &NullableSmbStatus{value: val, isSet: true}
}

func (v NullableSmbStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
