/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the RsyncmodCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RsyncmodCreate0{}

// RsyncmodCreate0 struct for RsyncmodCreate0
type RsyncmodCreate0 struct {
	Enabled *bool   `json:"enabled,omitempty"`
	Name    *string `json:"name,omitempty"`
	Comment *string `json:"comment,omitempty"`
	// `path` represents the path to a dataset. Path length is limited to 1023 characters maximum as per the limit enforced by FreeBSD. It is possible that we reach this max length recursively while transferring data. In that case, the user must ensure the maximum path will not be too long or modify the recursed path to shorter than the limit.
	Path *string `json:"path,omitempty"`
	Mode *string `json:"mode,omitempty"`
	// `maxconn` is an integer value representing the maximum number of simultaneous connections. Zero represents unlimited.
	Maxconn *int32  `json:"maxconn,omitempty"`
	User    *string `json:"user,omitempty"`
	Group   *string `json:"group,omitempty"`
	// `hostsallow` is a list of patterns to match hostname/ip address of a connecting client. If list is empty, all hosts are allowed.
	Hostsallow []string `json:"hostsallow,omitempty"`
	// `hostsdeny` is a list of patterns to match hostname/ip address of a connecting client. If the pattern is matched, access is denied to the client. If no client should be denied, this should be left empty.
	Hostsdeny []string `json:"hostsdeny,omitempty"`
	Auxiliary *string  `json:"auxiliary,omitempty"`
}

// NewRsyncmodCreate0 instantiates a new RsyncmodCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRsyncmodCreate0() *RsyncmodCreate0 {
	this := RsyncmodCreate0{}
	var enabled bool
	this.Enabled = &enabled
	var user string
	this.User = &user
	var group string
	this.Group = &group
	return &this
}

// NewRsyncmodCreate0WithDefaults instantiates a new RsyncmodCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRsyncmodCreate0WithDefaults() *RsyncmodCreate0 {
	this := RsyncmodCreate0{}
	var enabled bool
	this.Enabled = &enabled
	var user string
	this.User = &user
	var group string
	this.Group = &group
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RsyncmodCreate0) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RsyncmodCreate0) SetName(v string) {
	o.Name = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RsyncmodCreate0) SetComment(v string) {
	o.Comment = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RsyncmodCreate0) SetPath(v string) {
	o.Path = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *RsyncmodCreate0) SetMode(v string) {
	o.Mode = &v
}

// GetMaxconn returns the Maxconn field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetMaxconn() int32 {
	if o == nil || IsNil(o.Maxconn) {
		var ret int32
		return ret
	}
	return *o.Maxconn
}

// GetMaxconnOk returns a tuple with the Maxconn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetMaxconnOk() (*int32, bool) {
	if o == nil || IsNil(o.Maxconn) {
		return nil, false
	}
	return o.Maxconn, true
}

// HasMaxconn returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasMaxconn() bool {
	if o != nil && !IsNil(o.Maxconn) {
		return true
	}

	return false
}

// SetMaxconn gets a reference to the given int32 and assigns it to the Maxconn field.
func (o *RsyncmodCreate0) SetMaxconn(v int32) {
	o.Maxconn = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RsyncmodCreate0) SetUser(v string) {
	o.User = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *RsyncmodCreate0) SetGroup(v string) {
	o.Group = &v
}

// GetHostsallow returns the Hostsallow field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetHostsallow() []string {
	if o == nil || IsNil(o.Hostsallow) {
		var ret []string
		return ret
	}
	return o.Hostsallow
}

// GetHostsallowOk returns a tuple with the Hostsallow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetHostsallowOk() ([]string, bool) {
	if o == nil || IsNil(o.Hostsallow) {
		return nil, false
	}
	return o.Hostsallow, true
}

// HasHostsallow returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasHostsallow() bool {
	if o != nil && !IsNil(o.Hostsallow) {
		return true
	}

	return false
}

// SetHostsallow gets a reference to the given []string and assigns it to the Hostsallow field.
func (o *RsyncmodCreate0) SetHostsallow(v []string) {
	o.Hostsallow = v
}

// GetHostsdeny returns the Hostsdeny field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetHostsdeny() []string {
	if o == nil || IsNil(o.Hostsdeny) {
		var ret []string
		return ret
	}
	return o.Hostsdeny
}

// GetHostsdenyOk returns a tuple with the Hostsdeny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetHostsdenyOk() ([]string, bool) {
	if o == nil || IsNil(o.Hostsdeny) {
		return nil, false
	}
	return o.Hostsdeny, true
}

// HasHostsdeny returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasHostsdeny() bool {
	if o != nil && !IsNil(o.Hostsdeny) {
		return true
	}

	return false
}

// SetHostsdeny gets a reference to the given []string and assigns it to the Hostsdeny field.
func (o *RsyncmodCreate0) SetHostsdeny(v []string) {
	o.Hostsdeny = v
}

// GetAuxiliary returns the Auxiliary field value if set, zero value otherwise.
func (o *RsyncmodCreate0) GetAuxiliary() string {
	if o == nil || IsNil(o.Auxiliary) {
		var ret string
		return ret
	}
	return *o.Auxiliary
}

// GetAuxiliaryOk returns a tuple with the Auxiliary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RsyncmodCreate0) GetAuxiliaryOk() (*string, bool) {
	if o == nil || IsNil(o.Auxiliary) {
		return nil, false
	}
	return o.Auxiliary, true
}

// HasAuxiliary returns a boolean if a field has been set.
func (o *RsyncmodCreate0) HasAuxiliary() bool {
	if o != nil && !IsNil(o.Auxiliary) {
		return true
	}

	return false
}

// SetAuxiliary gets a reference to the given string and assigns it to the Auxiliary field.
func (o *RsyncmodCreate0) SetAuxiliary(v string) {
	o.Auxiliary = &v
}

func (o RsyncmodCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RsyncmodCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Maxconn) {
		toSerialize["maxconn"] = o.Maxconn
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Hostsallow) {
		toSerialize["hostsallow"] = o.Hostsallow
	}
	if !IsNil(o.Hostsdeny) {
		toSerialize["hostsdeny"] = o.Hostsdeny
	}
	if !IsNil(o.Auxiliary) {
		toSerialize["auxiliary"] = o.Auxiliary
	}
	return toSerialize, nil
}

type NullableRsyncmodCreate0 struct {
	value *RsyncmodCreate0
	isSet bool
}

func (v NullableRsyncmodCreate0) Get() *RsyncmodCreate0 {
	return v.value
}

func (v *NullableRsyncmodCreate0) Set(val *RsyncmodCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableRsyncmodCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableRsyncmodCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRsyncmodCreate0(val *RsyncmodCreate0) *NullableRsyncmodCreate0 {
	return &NullableRsyncmodCreate0{value: val, isSet: true}
}

func (v NullableRsyncmodCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRsyncmodCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
