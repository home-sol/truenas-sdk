/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SmbSharesecGetacl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbSharesecGetacl{}

// SmbSharesecGetacl struct for SmbSharesecGetacl
type SmbSharesecGetacl struct {
	// View the ACL information for `share_name`. The share ACL is distinct from filesystem ACLs which can be viewed by calling `filesystem.getacl`. `ae_who_name` will appear as `None` if the SMB service is stopped or if winbind is unable  to resolve the SID to a name.
	ShareName            *string             `json:"share_name,omitempty"`
	Options              *SmbSharesecGetacl1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SmbSharesecGetacl SmbSharesecGetacl

// NewSmbSharesecGetacl instantiates a new SmbSharesecGetacl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbSharesecGetacl() *SmbSharesecGetacl {
	this := SmbSharesecGetacl{}
	var options SmbSharesecGetacl1
	this.Options = &options
	return &this
}

// NewSmbSharesecGetaclWithDefaults instantiates a new SmbSharesecGetacl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbSharesecGetaclWithDefaults() *SmbSharesecGetacl {
	this := SmbSharesecGetacl{}
	var options SmbSharesecGetacl1
	this.Options = &options
	return &this
}

// GetShareName returns the ShareName field value if set, zero value otherwise.
func (o *SmbSharesecGetacl) GetShareName() string {
	if o == nil || IsNil(o.ShareName) {
		var ret string
		return ret
	}
	return *o.ShareName
}

// GetShareNameOk returns a tuple with the ShareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbSharesecGetacl) GetShareNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShareName) {
		return nil, false
	}
	return o.ShareName, true
}

// HasShareName returns a boolean if a field has been set.
func (o *SmbSharesecGetacl) HasShareName() bool {
	if o != nil && !IsNil(o.ShareName) {
		return true
	}

	return false
}

// SetShareName gets a reference to the given string and assigns it to the ShareName field.
func (o *SmbSharesecGetacl) SetShareName(v string) {
	o.ShareName = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *SmbSharesecGetacl) GetOptions() SmbSharesecGetacl1 {
	if o == nil || IsNil(o.Options) {
		var ret SmbSharesecGetacl1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmbSharesecGetacl) GetOptionsOk() (*SmbSharesecGetacl1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *SmbSharesecGetacl) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given SmbSharesecGetacl1 and assigns it to the Options field.
func (o *SmbSharesecGetacl) SetOptions(v SmbSharesecGetacl1) {
	o.Options = &v
}

func (o SmbSharesecGetacl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbSharesecGetacl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShareName) {
		toSerialize["share_name"] = o.ShareName
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SmbSharesecGetacl) UnmarshalJSON(bytes []byte) (err error) {
	varSmbSharesecGetacl := _SmbSharesecGetacl{}

	if err = json.Unmarshal(bytes, &varSmbSharesecGetacl); err == nil {
		*o = SmbSharesecGetacl(varSmbSharesecGetacl)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "share_name")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSmbSharesecGetacl struct {
	value *SmbSharesecGetacl
	isSet bool
}

func (v NullableSmbSharesecGetacl) Get() *SmbSharesecGetacl {
	return v.value
}

func (v *NullableSmbSharesecGetacl) Set(val *SmbSharesecGetacl) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbSharesecGetacl) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbSharesecGetacl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbSharesecGetacl(val *SmbSharesecGetacl) *NullableSmbSharesecGetacl {
	return &NullableSmbSharesecGetacl{value: val, isSet: true}
}

func (v NullableSmbSharesecGetacl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbSharesecGetacl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
