/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GlusterVolumeApiService GlusterVolumeApi service
type GlusterVolumeApiService service

type ApiGlusterVolumeGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiGlusterVolumeGetRequest) Limit(limit int32) ApiGlusterVolumeGetRequest {
	r.limit = &limit
	return r
}

func (r ApiGlusterVolumeGetRequest) Offset(offset int32) ApiGlusterVolumeGetRequest {
	r.offset = &offset
	return r
}

func (r ApiGlusterVolumeGetRequest) Count(count bool) ApiGlusterVolumeGetRequest {
	r.count = &count
	return r
}

func (r ApiGlusterVolumeGetRequest) Sort(sort string) ApiGlusterVolumeGetRequest {
	r.sort = &sort
	return r
}

func (r ApiGlusterVolumeGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeGetExecute(r)
}

/*
GlusterVolumeGet Method for GlusterVolumeGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeGet(ctx context.Context) ApiGlusterVolumeGetRequest {
	return ApiGlusterVolumeGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeGetExecute(r ApiGlusterVolumeGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeGetInstancePostRequest struct {
	ctx                      context.Context
	ApiService               *GlusterVolumeApiService
	glusterVolumeGetInstance *GlusterVolumeGetInstance
}

func (r ApiGlusterVolumeGetInstancePostRequest) GlusterVolumeGetInstance(glusterVolumeGetInstance GlusterVolumeGetInstance) ApiGlusterVolumeGetInstancePostRequest {
	r.glusterVolumeGetInstance = &glusterVolumeGetInstance
	return r
}

func (r ApiGlusterVolumeGetInstancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeGetInstancePostExecute(r)
}

/*
GlusterVolumeGetInstancePost Method for GlusterVolumeGetInstancePost

Returns instance matching `id`. If `id` is not found, Validation error is raised.

Please see `query` method documentation for `options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeGetInstancePostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeGetInstancePost(ctx context.Context) ApiGlusterVolumeGetInstancePostRequest {
	return ApiGlusterVolumeGetInstancePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeGetInstancePostExecute(r ApiGlusterVolumeGetInstancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeGetInstancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/get_instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeGetInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	id         string
}

func (r ApiGlusterVolumeIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeIdIdDeleteExecute(r)
}

/*
GlusterVolumeIdIdDelete Method for GlusterVolumeIdIdDelete

Delete a gluster volume.

`id` String representing name of gluster volume

	       to be deleted

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGlusterVolumeIdIdDeleteRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeIdIdDelete(ctx context.Context, id string) ApiGlusterVolumeIdIdDeleteRequest {
	return ApiGlusterVolumeIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeIdIdDeleteExecute(r ApiGlusterVolumeIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeIdIdGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	id         string
}

func (r ApiGlusterVolumeIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeIdIdGetExecute(r)
}

/*
GlusterVolumeIdIdGet Method for GlusterVolumeIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiGlusterVolumeIdIdGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeIdIdGet(ctx context.Context, id string) ApiGlusterVolumeIdIdGetRequest {
	return ApiGlusterVolumeIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeIdIdGetExecute(r ApiGlusterVolumeIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeInfoPostRequest struct {
	ctx                context.Context
	ApiService         *GlusterVolumeApiService
	glusterVolumeInfo0 *GlusterVolumeInfo0
}

func (r ApiGlusterVolumeInfoPostRequest) GlusterVolumeInfo0(glusterVolumeInfo0 GlusterVolumeInfo0) ApiGlusterVolumeInfoPostRequest {
	r.glusterVolumeInfo0 = &glusterVolumeInfo0
	return r
}

func (r ApiGlusterVolumeInfoPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeInfoPostExecute(r)
}

/*
GlusterVolumeInfoPost Method for GlusterVolumeInfoPost

Return information about gluster volume(s).

`name` String representing name of gluster volume

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeInfoPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeInfoPost(ctx context.Context) ApiGlusterVolumeInfoPostRequest {
	return ApiGlusterVolumeInfoPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeInfoPostExecute(r ApiGlusterVolumeInfoPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeInfoPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeInfo0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeListGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
}

func (r ApiGlusterVolumeListGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeListGetExecute(r)
}

/*
GlusterVolumeListGet Method for GlusterVolumeListGet

Return list of gluster volumes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeListGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeListGet(ctx context.Context) ApiGlusterVolumeListGetRequest {
	return ApiGlusterVolumeListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeListGetExecute(r ApiGlusterVolumeListGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeListGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeOptresetPostRequest struct {
	ctx                    context.Context
	ApiService             *GlusterVolumeApiService
	glusterVolumeOptreset0 *GlusterVolumeOptreset0
}

func (r ApiGlusterVolumeOptresetPostRequest) GlusterVolumeOptreset0(glusterVolumeOptreset0 GlusterVolumeOptreset0) ApiGlusterVolumeOptresetPostRequest {
	r.glusterVolumeOptreset0 = &glusterVolumeOptreset0
	return r
}

func (r ApiGlusterVolumeOptresetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeOptresetPostExecute(r)
}

/*
GlusterVolumeOptresetPost Method for GlusterVolumeOptresetPost

Reset volumes options.

	If `opt` is not provided, then all options
	will be reset.

`name` String representing name of gluster volume
`opt` String representing name of the option to reset
`force` Boolean, if True forcefully reset option(s)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeOptresetPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeOptresetPost(ctx context.Context) ApiGlusterVolumeOptresetPostRequest {
	return ApiGlusterVolumeOptresetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeOptresetPostExecute(r ApiGlusterVolumeOptresetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeOptresetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/optreset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeOptreset0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeOptsetPostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeOptset0 *GlusterVolumeOptset0
}

func (r ApiGlusterVolumeOptsetPostRequest) GlusterVolumeOptset0(glusterVolumeOptset0 GlusterVolumeOptset0) ApiGlusterVolumeOptsetPostRequest {
	r.glusterVolumeOptset0 = &glusterVolumeOptset0
	return r
}

func (r ApiGlusterVolumeOptsetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeOptsetPostExecute(r)
}

/*
GlusterVolumeOptsetPost Method for GlusterVolumeOptsetPost

Set gluster volume options.

`name` String representing name of gluster volume
`opts` Dict where

	   --key-- is the name of the option
	   --value-- is the value to be given to the option

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeOptsetPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeOptsetPost(ctx context.Context) ApiGlusterVolumeOptsetPostRequest {
	return ApiGlusterVolumeOptsetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeOptsetPostExecute(r ApiGlusterVolumeOptsetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeOptsetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/optset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeOptset0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumePostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeCreate0 *GlusterVolumeCreate0
}

func (r ApiGlusterVolumePostRequest) GlusterVolumeCreate0(glusterVolumeCreate0 GlusterVolumeCreate0) ApiGlusterVolumePostRequest {
	r.glusterVolumeCreate0 = &glusterVolumeCreate0
	return r
}

func (r ApiGlusterVolumePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumePostExecute(r)
}

/*
GlusterVolumePost Method for GlusterVolumePost

Create a gluster volume.

`name` String representing name to be given to the volume
`bricks` List representing the brick paths

	`peer_name` String representing IP or DNS name of the peer
	`peer_path` String representing the full path of the brick

`replica` Integer representing number of replica bricks
`arbiter` Integer representing number of arbiter bricks
`disperse` Integer representing number of disperse bricks
`disperse_data` Integer representing number of disperse data bricks
`redundancy` Integer representing number of redundancy bricks
`force` Boolean, if True ignore potential warnings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumePostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumePost(ctx context.Context) ApiGlusterVolumePostRequest {
	return ApiGlusterVolumePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumePostExecute(r ApiGlusterVolumePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeQuotaPostRequest struct {
	ctx                 context.Context
	ApiService          *GlusterVolumeApiService
	glusterVolumeQuota0 *GlusterVolumeQuota0
}

func (r ApiGlusterVolumeQuotaPostRequest) GlusterVolumeQuota0(glusterVolumeQuota0 GlusterVolumeQuota0) ApiGlusterVolumeQuotaPostRequest {
	r.glusterVolumeQuota0 = &glusterVolumeQuota0
	return r
}

func (r ApiGlusterVolumeQuotaPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeQuotaPostExecute(r)
}

/*
GlusterVolumeQuotaPost Method for GlusterVolumeQuotaPost

Enable/Disable the quota for a given gluster volume.

`name` String representing name of gluster volume
`enable` Boolean, if True enable quota else disable it

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeQuotaPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeQuotaPost(ctx context.Context) ApiGlusterVolumeQuotaPostRequest {
	return ApiGlusterVolumeQuotaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeQuotaPostExecute(r ApiGlusterVolumeQuotaPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeQuotaPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/quota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeQuota0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeRestartPostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterVolumeApiService
	glusterVolumeRestart0 *GlusterVolumeRestart0
}

func (r ApiGlusterVolumeRestartPostRequest) GlusterVolumeRestart0(glusterVolumeRestart0 GlusterVolumeRestart0) ApiGlusterVolumeRestartPostRequest {
	r.glusterVolumeRestart0 = &glusterVolumeRestart0
	return r
}

func (r ApiGlusterVolumeRestartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeRestartPostExecute(r)
}

/*
GlusterVolumeRestartPost Method for GlusterVolumeRestartPost

Restart a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully restart the gluster volume

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeRestartPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeRestartPost(ctx context.Context) ApiGlusterVolumeRestartPostRequest {
	return ApiGlusterVolumeRestartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeRestartPostExecute(r ApiGlusterVolumeRestartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeRestartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/restart"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeRestart0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeStartPostRequest struct {
	ctx                 context.Context
	ApiService          *GlusterVolumeApiService
	glusterVolumeStart0 *GlusterVolumeStart0
}

func (r ApiGlusterVolumeStartPostRequest) GlusterVolumeStart0(glusterVolumeStart0 GlusterVolumeStart0) ApiGlusterVolumeStartPostRequest {
	r.glusterVolumeStart0 = &glusterVolumeStart0
	return r
}

func (r ApiGlusterVolumeStartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStartPostExecute(r)
}

/*
GlusterVolumeStartPost Method for GlusterVolumeStartPost

Start a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully start the gluster volume

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeStartPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStartPost(ctx context.Context) ApiGlusterVolumeStartPostRequest {
	return ApiGlusterVolumeStartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStartPostExecute(r ApiGlusterVolumeStartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStart0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeStatusPostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeStatus0 *GlusterVolumeStatus0
}

func (r ApiGlusterVolumeStatusPostRequest) GlusterVolumeStatus0(glusterVolumeStatus0 GlusterVolumeStatus0) ApiGlusterVolumeStatusPostRequest {
	r.glusterVolumeStatus0 = &glusterVolumeStatus0
	return r
}

func (r ApiGlusterVolumeStatusPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStatusPostExecute(r)
}

/*
GlusterVolumeStatusPost Method for GlusterVolumeStatusPost

Return detailed information about gluster volume.

`name` String representing name of gluster volume
`verbose` Boolean, If False, only return brick information

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeStatusPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStatusPost(ctx context.Context) ApiGlusterVolumeStatusPostRequest {
	return ApiGlusterVolumeStatusPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStatusPostExecute(r ApiGlusterVolumeStatusPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStatusPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStatus0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterVolumeStopPostRequest struct {
	ctx                context.Context
	ApiService         *GlusterVolumeApiService
	glusterVolumeStop0 *GlusterVolumeStop0
}

func (r ApiGlusterVolumeStopPostRequest) GlusterVolumeStop0(glusterVolumeStop0 GlusterVolumeStop0) ApiGlusterVolumeStopPostRequest {
	r.glusterVolumeStop0 = &glusterVolumeStop0
	return r
}

func (r ApiGlusterVolumeStopPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStopPostExecute(r)
}

/*
GlusterVolumeStopPost Method for GlusterVolumeStopPost

Stop a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully stop the gluster volume

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterVolumeStopPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStopPost(ctx context.Context) ApiGlusterVolumeStopPostRequest {
	return ApiGlusterVolumeStopPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStopPostExecute(r ApiGlusterVolumeStopPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStopPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStop0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
