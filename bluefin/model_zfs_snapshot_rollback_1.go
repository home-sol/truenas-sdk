/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ZfsSnapshotRollback1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZfsSnapshotRollback1{}

// ZfsSnapshotRollback1 struct for ZfsSnapshotRollback1
type ZfsSnapshotRollback1 struct {
	// `options.recursive_clones` is just like `recursive` but will also destroy any clones.
	Recursive         *bool `json:"recursive,omitempty"`
	RecursiveClones   *bool `json:"recursive_clones,omitempty"`
	Force             *bool `json:"force,omitempty"`
	RecursiveRollback *bool `json:"recursive_rollback,omitempty"`
}

// NewZfsSnapshotRollback1 instantiates a new ZfsSnapshotRollback1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZfsSnapshotRollback1() *ZfsSnapshotRollback1 {
	this := ZfsSnapshotRollback1{}
	var recursive bool
	this.Recursive = &recursive
	var recursiveClones bool
	this.RecursiveClones = &recursiveClones
	var force bool
	this.Force = &force
	var recursiveRollback bool
	this.RecursiveRollback = &recursiveRollback
	return &this
}

// NewZfsSnapshotRollback1WithDefaults instantiates a new ZfsSnapshotRollback1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZfsSnapshotRollback1WithDefaults() *ZfsSnapshotRollback1 {
	this := ZfsSnapshotRollback1{}
	var recursive bool
	this.Recursive = &recursive
	var recursiveClones bool
	this.RecursiveClones = &recursiveClones
	var force bool
	this.Force = &force
	var recursiveRollback bool
	this.RecursiveRollback = &recursiveRollback
	return &this
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *ZfsSnapshotRollback1) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotRollback1) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *ZfsSnapshotRollback1) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *ZfsSnapshotRollback1) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetRecursiveClones returns the RecursiveClones field value if set, zero value otherwise.
func (o *ZfsSnapshotRollback1) GetRecursiveClones() bool {
	if o == nil || IsNil(o.RecursiveClones) {
		var ret bool
		return ret
	}
	return *o.RecursiveClones
}

// GetRecursiveClonesOk returns a tuple with the RecursiveClones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotRollback1) GetRecursiveClonesOk() (*bool, bool) {
	if o == nil || IsNil(o.RecursiveClones) {
		return nil, false
	}
	return o.RecursiveClones, true
}

// HasRecursiveClones returns a boolean if a field has been set.
func (o *ZfsSnapshotRollback1) HasRecursiveClones() bool {
	if o != nil && !IsNil(o.RecursiveClones) {
		return true
	}

	return false
}

// SetRecursiveClones gets a reference to the given bool and assigns it to the RecursiveClones field.
func (o *ZfsSnapshotRollback1) SetRecursiveClones(v bool) {
	o.RecursiveClones = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *ZfsSnapshotRollback1) GetForce() bool {
	if o == nil || IsNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotRollback1) GetForceOk() (*bool, bool) {
	if o == nil || IsNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *ZfsSnapshotRollback1) HasForce() bool {
	if o != nil && !IsNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *ZfsSnapshotRollback1) SetForce(v bool) {
	o.Force = &v
}

// GetRecursiveRollback returns the RecursiveRollback field value if set, zero value otherwise.
func (o *ZfsSnapshotRollback1) GetRecursiveRollback() bool {
	if o == nil || IsNil(o.RecursiveRollback) {
		var ret bool
		return ret
	}
	return *o.RecursiveRollback
}

// GetRecursiveRollbackOk returns a tuple with the RecursiveRollback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZfsSnapshotRollback1) GetRecursiveRollbackOk() (*bool, bool) {
	if o == nil || IsNil(o.RecursiveRollback) {
		return nil, false
	}
	return o.RecursiveRollback, true
}

// HasRecursiveRollback returns a boolean if a field has been set.
func (o *ZfsSnapshotRollback1) HasRecursiveRollback() bool {
	if o != nil && !IsNil(o.RecursiveRollback) {
		return true
	}

	return false
}

// SetRecursiveRollback gets a reference to the given bool and assigns it to the RecursiveRollback field.
func (o *ZfsSnapshotRollback1) SetRecursiveRollback(v bool) {
	o.RecursiveRollback = &v
}

func (o ZfsSnapshotRollback1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZfsSnapshotRollback1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.RecursiveClones) {
		toSerialize["recursive_clones"] = o.RecursiveClones
	}
	if !IsNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !IsNil(o.RecursiveRollback) {
		toSerialize["recursive_rollback"] = o.RecursiveRollback
	}
	return toSerialize, nil
}

type NullableZfsSnapshotRollback1 struct {
	value *ZfsSnapshotRollback1
	isSet bool
}

func (v NullableZfsSnapshotRollback1) Get() *ZfsSnapshotRollback1 {
	return v.value
}

func (v *NullableZfsSnapshotRollback1) Set(val *ZfsSnapshotRollback1) {
	v.value = val
	v.isSet = true
}

func (v NullableZfsSnapshotRollback1) IsSet() bool {
	return v.isSet
}

func (v *NullableZfsSnapshotRollback1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZfsSnapshotRollback1(val *ZfsSnapshotRollback1) *NullableZfsSnapshotRollback1 {
	return &NullableZfsSnapshotRollback1{value: val, isSet: true}
}

func (v NullableZfsSnapshotRollback1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZfsSnapshotRollback1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
