/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemSetImmutable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemSetImmutable{}

// FilesystemSetImmutable struct for FilesystemSetImmutable
type FilesystemSetImmutable struct {
	SetFlag *bool `json:"set_flag,omitempty"`
	// Set/Unset immutable flag at `path`.
	Path                 *string `json:"path,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesystemSetImmutable FilesystemSetImmutable

// NewFilesystemSetImmutable instantiates a new FilesystemSetImmutable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemSetImmutable() *FilesystemSetImmutable {
	this := FilesystemSetImmutable{}
	return &this
}

// NewFilesystemSetImmutableWithDefaults instantiates a new FilesystemSetImmutable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemSetImmutableWithDefaults() *FilesystemSetImmutable {
	this := FilesystemSetImmutable{}
	return &this
}

// GetSetFlag returns the SetFlag field value if set, zero value otherwise.
func (o *FilesystemSetImmutable) GetSetFlag() bool {
	if o == nil || IsNil(o.SetFlag) {
		var ret bool
		return ret
	}
	return *o.SetFlag
}

// GetSetFlagOk returns a tuple with the SetFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetImmutable) GetSetFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.SetFlag) {
		return nil, false
	}
	return o.SetFlag, true
}

// HasSetFlag returns a boolean if a field has been set.
func (o *FilesystemSetImmutable) HasSetFlag() bool {
	if o != nil && !IsNil(o.SetFlag) {
		return true
	}

	return false
}

// SetSetFlag gets a reference to the given bool and assigns it to the SetFlag field.
func (o *FilesystemSetImmutable) SetSetFlag(v bool) {
	o.SetFlag = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FilesystemSetImmutable) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemSetImmutable) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FilesystemSetImmutable) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FilesystemSetImmutable) SetPath(v string) {
	o.Path = &v
}

func (o FilesystemSetImmutable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemSetImmutable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SetFlag) {
		toSerialize["set_flag"] = o.SetFlag
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesystemSetImmutable) UnmarshalJSON(bytes []byte) (err error) {
	varFilesystemSetImmutable := _FilesystemSetImmutable{}

	if err = json.Unmarshal(bytes, &varFilesystemSetImmutable); err == nil {
		*o = FilesystemSetImmutable(varFilesystemSetImmutable)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "set_flag")
		delete(additionalProperties, "path")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesystemSetImmutable struct {
	value *FilesystemSetImmutable
	isSet bool
}

func (v NullableFilesystemSetImmutable) Get() *FilesystemSetImmutable {
	return v.value
}

func (v *NullableFilesystemSetImmutable) Set(val *FilesystemSetImmutable) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemSetImmutable) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemSetImmutable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemSetImmutable(val *FilesystemSetImmutable) *NullableFilesystemSetImmutable {
	return &NullableFilesystemSetImmutable{value: val, isSet: true}
}

func (v NullableFilesystemSetImmutable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemSetImmutable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
