/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// KeychaincredentialApiService KeychaincredentialApi service
type KeychaincredentialApiService service

type ApiKeychaincredentialGenerateSshKeyPairGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
}

func (r ApiKeychaincredentialGenerateSshKeyPairGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialGenerateSshKeyPairGetExecute(r)
}

/*
KeychaincredentialGenerateSshKeyPairGet Method for KeychaincredentialGenerateSshKeyPairGet

Generate a public/private key pair

Generate a public/private key pair (useful for `SSH_KEY_PAIR` type)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialGenerateSshKeyPairGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGet(ctx context.Context) ApiKeychaincredentialGenerateSshKeyPairGetRequest {
	return ApiKeychaincredentialGenerateSshKeyPairGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGetExecute(r ApiKeychaincredentialGenerateSshKeyPairGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGenerateSshKeyPairGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/generate_ssh_key_pair"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiKeychaincredentialGetRequest) Limit(limit int32) ApiKeychaincredentialGetRequest {
	r.limit = &limit
	return r
}

func (r ApiKeychaincredentialGetRequest) Offset(offset int32) ApiKeychaincredentialGetRequest {
	r.offset = &offset
	return r
}

func (r ApiKeychaincredentialGetRequest) Count(count bool) ApiKeychaincredentialGetRequest {
	r.count = &count
	return r
}

func (r ApiKeychaincredentialGetRequest) Sort(sort string) ApiKeychaincredentialGetRequest {
	r.sort = &sort
	return r
}

func (r ApiKeychaincredentialGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialGetExecute(r)
}

/*
KeychaincredentialGet Method for KeychaincredentialGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialGet(ctx context.Context) ApiKeychaincredentialGetRequest {
	return ApiKeychaincredentialGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialGetExecute(r ApiKeychaincredentialGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialGetInstancePostRequest struct {
	ctx                           context.Context
	ApiService                    *KeychaincredentialApiService
	keychaincredentialGetInstance *KeychaincredentialGetInstance
}

func (r ApiKeychaincredentialGetInstancePostRequest) KeychaincredentialGetInstance(keychaincredentialGetInstance KeychaincredentialGetInstance) ApiKeychaincredentialGetInstancePostRequest {
	r.keychaincredentialGetInstance = &keychaincredentialGetInstance
	return r
}

func (r ApiKeychaincredentialGetInstancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialGetInstancePostExecute(r)
}

/*
KeychaincredentialGetInstancePost Method for KeychaincredentialGetInstancePost

Returns instance matching `id`. If `id` is not found, Validation error is raised.

Please see `query` method documentation for `options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialGetInstancePostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialGetInstancePost(ctx context.Context) ApiKeychaincredentialGetInstancePostRequest {
	return ApiKeychaincredentialGetInstancePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialGetInstancePostExecute(r ApiKeychaincredentialGetInstancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGetInstancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/get_instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialGetInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r ApiKeychaincredentialIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdDeleteExecute(r)
}

/*
KeychaincredentialIdIdDelete Method for KeychaincredentialIdIdDelete

Delete Keychain Credential with specific `id`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiKeychaincredentialIdIdDeleteRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDelete(ctx context.Context, id int32) ApiKeychaincredentialIdIdDeleteRequest {
	return ApiKeychaincredentialIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDeleteExecute(r ApiKeychaincredentialIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r ApiKeychaincredentialIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdGetExecute(r)
}

/*
KeychaincredentialIdIdGet Method for KeychaincredentialIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiKeychaincredentialIdIdGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGet(ctx context.Context, id int32) ApiKeychaincredentialIdIdGetRequest {
	return ApiKeychaincredentialIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGetExecute(r ApiKeychaincredentialIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdPutRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r ApiKeychaincredentialIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdPutExecute(r)
}

/*
KeychaincredentialIdIdPut Method for KeychaincredentialIdIdPut

Update a Keychain Credential with specific `id`

Please note that you can't change `type`

# Also you must specify full `attributes` value

# See the documentation for `create` method for information on payload contents

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiKeychaincredentialIdIdPutRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPut(ctx context.Context, id int32) ApiKeychaincredentialIdIdPutRequest {
	return ApiKeychaincredentialIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPutExecute(r ApiKeychaincredentialIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialPostRequest struct {
	ctx                       context.Context
	ApiService                *KeychaincredentialApiService
	keychaincredentialCreate0 *KeychaincredentialCreate0
}

func (r ApiKeychaincredentialPostRequest) KeychaincredentialCreate0(keychaincredentialCreate0 KeychaincredentialCreate0) ApiKeychaincredentialPostRequest {
	r.keychaincredentialCreate0 = &keychaincredentialCreate0
	return r
}

func (r ApiKeychaincredentialPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialPostExecute(r)
}

/*
KeychaincredentialPost Method for KeychaincredentialPost

# Create a Keychain Credential

Create a Keychain Credential of any type.
Every Keychain Credential has a `name` which is used to distinguish it from others.
The following `type`s are supported:

  - `SSH_KEY_PAIR`
    Which `attributes` are:

  - `private_key`

  - `public_key` (which can be omitted and thus automatically derived from private key)
    At least one attribute is required.

  - `SSH_CREDENTIALS`
    Which `attributes` are:

  - `host`

  - `port` (default 22)

  - `username` (default root)

  - `private_key` (Keychain Credential ID)

  - `remote_host_key` (you can use `keychaincredential.remote_ssh_host_key_scan` do discover it)

  - `cipher`: one of `STANDARD`, `FAST`, or `DISABLED` (last requires special support from both SSH server and
    client)

  - `connect_timeout` (default 10)

    @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
    @return ApiKeychaincredentialPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialPost(ctx context.Context) ApiKeychaincredentialPostRequest {
	return ApiKeychaincredentialPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialPostExecute(r ApiKeychaincredentialPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialRemoteSshHostKeyScanPostRequest struct {
	ctx                                     context.Context
	ApiService                              *KeychaincredentialApiService
	keychaincredentialRemoteSshHostKeyScan0 *KeychaincredentialRemoteSshHostKeyScan0
}

func (r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) KeychaincredentialRemoteSshHostKeyScan0(keychaincredentialRemoteSshHostKeyScan0 KeychaincredentialRemoteSshHostKeyScan0) ApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	r.keychaincredentialRemoteSshHostKeyScan0 = &keychaincredentialRemoteSshHostKeyScan0
	return r
}

func (r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshHostKeyScanPostExecute(r)
}

/*
KeychaincredentialRemoteSshHostKeyScanPost Method for KeychaincredentialRemoteSshHostKeyScanPost

# Discover a remote host key

Discover a remote host key (useful for `SSH_CREDENTIALS`)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialRemoteSshHostKeyScanPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPost(ctx context.Context) ApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	return ApiKeychaincredentialRemoteSshHostKeyScanPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPostExecute(r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshHostKeyScanPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_host_key_scan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshHostKeyScan0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest struct {
	ctx                                            context.Context
	ApiService                                     *KeychaincredentialApiService
	keychaincredentialRemoteSshSemiautomaticSetup0 *KeychaincredentialRemoteSshSemiautomaticSetup0
}

func (r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) KeychaincredentialRemoteSshSemiautomaticSetup0(keychaincredentialRemoteSshSemiautomaticSetup0 KeychaincredentialRemoteSshSemiautomaticSetup0) ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	r.keychaincredentialRemoteSshSemiautomaticSetup0 = &keychaincredentialRemoteSshSemiautomaticSetup0
	return r
}

func (r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r)
}

/*
KeychaincredentialRemoteSshSemiautomaticSetupPost Method for KeychaincredentialRemoteSshSemiautomaticSetupPost

# Perform semi-automatic SSH connection setup with other FreeNAS machine

Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`
credential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and
temporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other
`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPost(ctx context.Context) ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	return ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshSemiautomaticSetupPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_semiautomatic_setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshSemiautomaticSetup0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialSetupSshConnectionPostRequest struct {
	ctx                                   context.Context
	ApiService                            *KeychaincredentialApiService
	keychaincredentialSetupSshConnection0 *KeychaincredentialSetupSshConnection0
}

func (r ApiKeychaincredentialSetupSshConnectionPostRequest) KeychaincredentialSetupSshConnection0(keychaincredentialSetupSshConnection0 KeychaincredentialSetupSshConnection0) ApiKeychaincredentialSetupSshConnectionPostRequest {
	r.keychaincredentialSetupSshConnection0 = &keychaincredentialSetupSshConnection0
	return r
}

func (r ApiKeychaincredentialSetupSshConnectionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialSetupSshConnectionPostExecute(r)
}

/*
KeychaincredentialSetupSshConnectionPost Method for KeychaincredentialSetupSshConnectionPost

Creates a SSH Connection performing the following steps:

1) Generating SSH Key Pair if required
2) Setting up SSH Credentials based on `setup_type`

In case (2) fails, it will be ensured that SSH Key Pair generated ( if applicable ) in the process is
removed.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialSetupSshConnectionPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialSetupSshConnectionPost(ctx context.Context) ApiKeychaincredentialSetupSshConnectionPostRequest {
	return ApiKeychaincredentialSetupSshConnectionPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialSetupSshConnectionPostExecute(r ApiKeychaincredentialSetupSshConnectionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialSetupSshConnectionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/setup_ssh_connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialSetupSshConnection0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialUsedByPostRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	body       *int32
}

func (r ApiKeychaincredentialUsedByPostRequest) Body(body int32) ApiKeychaincredentialUsedByPostRequest {
	r.body = &body
	return r
}

func (r ApiKeychaincredentialUsedByPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialUsedByPostExecute(r)
}

/*
KeychaincredentialUsedByPost Method for KeychaincredentialUsedByPost

Returns list of objects that use this credential.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiKeychaincredentialUsedByPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPost(ctx context.Context) ApiKeychaincredentialUsedByPostRequest {
	return ApiKeychaincredentialUsedByPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPostExecute(r ApiKeychaincredentialUsedByPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialUsedByPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/used_by"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
