/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ActivedirectoryUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivedirectoryUpdate0{}

// ActivedirectoryUpdate0 struct for ActivedirectoryUpdate0
type ActivedirectoryUpdate0 struct {
	// `domainname` full DNS domain name of the Active Directory domain.
	Domainname *string `json:"domainname,omitempty"`
	// `bindname` username used to perform the intial domain join.
	Bindname *string `json:"bindname,omitempty"`
	// `bindpw` password used to perform the initial domain join. User- provided credentials are used to obtain a kerberos ticket, which is used to perform the actual domain join.
	Bindpw *string `json:"bindpw,omitempty"`
	// `verbose_logging` increase logging during the domain join process.
	VerboseLogging *bool `json:"verbose_logging,omitempty"`
	// `use_default_domain` controls whether domain users and groups have the pre-windows 2000 domain name prepended to the user account. When enabled, the user appears as \"administrator\" rather than \"EXAMPLEdministrator\"
	UseDefaultDomain *bool `json:"use_default_domain,omitempty"`
	// `allow_trusted_doms` enable support for trusted domains. If this parameter is enabled, then separate idmap backends _must_ be configured for each trusted domain, and the idmap cache should be cleared.
	AllowTrustedDoms *bool `json:"allow_trusted_doms,omitempty"`
	// `allow_dns_updates` during the domain join process, automatically generate DNS entries in the AD domain for the NAS. If this is disabled, then a domain administrator must manually add appropriate DNS entries for the NAS. This parameter is recommended for TrueNAS HA servers.
	AllowDnsUpdates *bool `json:"allow_dns_updates,omitempty"`
	// `disable_freenas_cache` disables active caching of AD users and groups. When disabled, only users cached in winbind's internal cache are visible in GUI dropdowns. Disabling active caching is recommended in environments with a large amount of users.
	DisableFreenasCache *bool `json:"disable_freenas_cache,omitempty"`
	RestrictPam         *bool `json:"restrict_pam,omitempty"`
	// `site` AD site of which the NAS is a member. This parameter is auto- detected during the domain join process. If no AD site is configured for the subnet in which the NAS is configured, then this parameter appears as 'Default-First-Site-Name'. Auto-detection is only performed during the initial domain join.
	Site NullableString `json:"site,omitempty"`
	// `kerberos_realm` in which the server is located. This parameter is automatically populated during the initial domain join. If the NAS has an AD site configured and that site has multiple kerberos servers, then the kerberos realm is automatically updated with a site-specific configuration to use those servers. Auto-detection is only performed during initial domain join.
	KerberosRealm NullableInt32 `json:"kerberos_realm,omitempty"`
	// `kerberos_principal` kerberos principal to use for AD-related operations outside of Samba. After intial domain join, this field is updated with the kerberos principal associated with the AD machine account for the NAS.
	KerberosPrincipal NullableString `json:"kerberos_principal,omitempty"`
	// `timeout` timeout value for winbind-related operations. This value may need to be increased in  environments with high latencies for communications with domain controllers or a large number of domain controllers. Lowering the value may cause status checks to fail.
	Timeout *int32 `json:"timeout,omitempty"`
	// `dns_timeout` timeout value for DNS queries during the initial domain join. This value is also set as the NETWORK_TIMEOUT in the ldap config file.
	DnsTimeout *int32 `json:"dns_timeout,omitempty"`
	// `nss_info` controls how Winbind retrieves Name Service Information to construct a user's home directory and login shell. This parameter is only effective if the Active Directory Domain Controller supports the Microsoft Services for Unix (SFU) LDAP schema.
	NssInfo NullableString `json:"nss_info,omitempty"`
	// `createcomputer` Active Directory Organizational Unit in which new computer accounts are created.
	Createcomputer *string       `json:"createcomputer,omitempty"`
	Netbiosname    *string       `json:"netbiosname,omitempty"`
	NetbiosnameB   *string       `json:"netbiosname_b,omitempty"`
	Netbiosalias   []interface{} `json:"netbiosalias,omitempty"`
	// The Active Directory service is started after a configuration update if the service was initially disabled, and the updated configuration sets `enable` to `True`. The Active Directory service is stopped if `enable` is changed to `False`. If the configuration is updated, but the initial `enable` state is `True`, and remains unchanged, then the samba server is only restarted.
	Enable *bool `json:"enable,omitempty"`
}

// NewActivedirectoryUpdate0 instantiates a new ActivedirectoryUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivedirectoryUpdate0() *ActivedirectoryUpdate0 {
	this := ActivedirectoryUpdate0{}
	var restrictPam bool
	this.RestrictPam = &restrictPam
	var timeout int32
	this.Timeout = &timeout
	var dnsTimeout int32
	this.DnsTimeout = &dnsTimeout
	var nssInfo NSS_INFO = ""
	this.NssInfo = *NewNullableString(&nssInfo)
	return &this
}

// NewActivedirectoryUpdate0WithDefaults instantiates a new ActivedirectoryUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivedirectoryUpdate0WithDefaults() *ActivedirectoryUpdate0 {
	this := ActivedirectoryUpdate0{}
	var restrictPam bool
	this.RestrictPam = &restrictPam
	var timeout int32
	this.Timeout = &timeout
	var dnsTimeout int32
	this.DnsTimeout = &dnsTimeout
	var nssInfo NSS_INFO = ""
	this.NssInfo = *NewNullableString(&nssInfo)
	return &this
}

// GetDomainname returns the Domainname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDomainname() string {
	if o == nil || IsNil(o.Domainname) {
		var ret string
		return ret
	}
	return *o.Domainname
}

// GetDomainnameOk returns a tuple with the Domainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Domainname) {
		return nil, false
	}
	return o.Domainname, true
}

// HasDomainname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDomainname() bool {
	if o != nil && !IsNil(o.Domainname) {
		return true
	}

	return false
}

// SetDomainname gets a reference to the given string and assigns it to the Domainname field.
func (o *ActivedirectoryUpdate0) SetDomainname(v string) {
	o.Domainname = &v
}

// GetBindname returns the Bindname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetBindname() string {
	if o == nil || IsNil(o.Bindname) {
		var ret string
		return ret
	}
	return *o.Bindname
}

// GetBindnameOk returns a tuple with the Bindname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetBindnameOk() (*string, bool) {
	if o == nil || IsNil(o.Bindname) {
		return nil, false
	}
	return o.Bindname, true
}

// HasBindname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasBindname() bool {
	if o != nil && !IsNil(o.Bindname) {
		return true
	}

	return false
}

// SetBindname gets a reference to the given string and assigns it to the Bindname field.
func (o *ActivedirectoryUpdate0) SetBindname(v string) {
	o.Bindname = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetBindpw() string {
	if o == nil || IsNil(o.Bindpw) {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetBindpwOk() (*string, bool) {
	if o == nil || IsNil(o.Bindpw) {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasBindpw() bool {
	if o != nil && !IsNil(o.Bindpw) {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *ActivedirectoryUpdate0) SetBindpw(v string) {
	o.Bindpw = &v
}

// GetVerboseLogging returns the VerboseLogging field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetVerboseLogging() bool {
	if o == nil || IsNil(o.VerboseLogging) {
		var ret bool
		return ret
	}
	return *o.VerboseLogging
}

// GetVerboseLoggingOk returns a tuple with the VerboseLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetVerboseLoggingOk() (*bool, bool) {
	if o == nil || IsNil(o.VerboseLogging) {
		return nil, false
	}
	return o.VerboseLogging, true
}

// HasVerboseLogging returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasVerboseLogging() bool {
	if o != nil && !IsNil(o.VerboseLogging) {
		return true
	}

	return false
}

// SetVerboseLogging gets a reference to the given bool and assigns it to the VerboseLogging field.
func (o *ActivedirectoryUpdate0) SetVerboseLogging(v bool) {
	o.VerboseLogging = &v
}

// GetUseDefaultDomain returns the UseDefaultDomain field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetUseDefaultDomain() bool {
	if o == nil || IsNil(o.UseDefaultDomain) {
		var ret bool
		return ret
	}
	return *o.UseDefaultDomain
}

// GetUseDefaultDomainOk returns a tuple with the UseDefaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetUseDefaultDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultDomain) {
		return nil, false
	}
	return o.UseDefaultDomain, true
}

// HasUseDefaultDomain returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasUseDefaultDomain() bool {
	if o != nil && !IsNil(o.UseDefaultDomain) {
		return true
	}

	return false
}

// SetUseDefaultDomain gets a reference to the given bool and assigns it to the UseDefaultDomain field.
func (o *ActivedirectoryUpdate0) SetUseDefaultDomain(v bool) {
	o.UseDefaultDomain = &v
}

// GetAllowTrustedDoms returns the AllowTrustedDoms field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetAllowTrustedDoms() bool {
	if o == nil || IsNil(o.AllowTrustedDoms) {
		var ret bool
		return ret
	}
	return *o.AllowTrustedDoms
}

// GetAllowTrustedDomsOk returns a tuple with the AllowTrustedDoms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetAllowTrustedDomsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTrustedDoms) {
		return nil, false
	}
	return o.AllowTrustedDoms, true
}

// HasAllowTrustedDoms returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasAllowTrustedDoms() bool {
	if o != nil && !IsNil(o.AllowTrustedDoms) {
		return true
	}

	return false
}

// SetAllowTrustedDoms gets a reference to the given bool and assigns it to the AllowTrustedDoms field.
func (o *ActivedirectoryUpdate0) SetAllowTrustedDoms(v bool) {
	o.AllowTrustedDoms = &v
}

// GetAllowDnsUpdates returns the AllowDnsUpdates field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetAllowDnsUpdates() bool {
	if o == nil || IsNil(o.AllowDnsUpdates) {
		var ret bool
		return ret
	}
	return *o.AllowDnsUpdates
}

// GetAllowDnsUpdatesOk returns a tuple with the AllowDnsUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetAllowDnsUpdatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDnsUpdates) {
		return nil, false
	}
	return o.AllowDnsUpdates, true
}

// HasAllowDnsUpdates returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasAllowDnsUpdates() bool {
	if o != nil && !IsNil(o.AllowDnsUpdates) {
		return true
	}

	return false
}

// SetAllowDnsUpdates gets a reference to the given bool and assigns it to the AllowDnsUpdates field.
func (o *ActivedirectoryUpdate0) SetAllowDnsUpdates(v bool) {
	o.AllowDnsUpdates = &v
}

// GetDisableFreenasCache returns the DisableFreenasCache field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDisableFreenasCache() bool {
	if o == nil || IsNil(o.DisableFreenasCache) {
		var ret bool
		return ret
	}
	return *o.DisableFreenasCache
}

// GetDisableFreenasCacheOk returns a tuple with the DisableFreenasCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDisableFreenasCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableFreenasCache) {
		return nil, false
	}
	return o.DisableFreenasCache, true
}

// HasDisableFreenasCache returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDisableFreenasCache() bool {
	if o != nil && !IsNil(o.DisableFreenasCache) {
		return true
	}

	return false
}

// SetDisableFreenasCache gets a reference to the given bool and assigns it to the DisableFreenasCache field.
func (o *ActivedirectoryUpdate0) SetDisableFreenasCache(v bool) {
	o.DisableFreenasCache = &v
}

// GetRestrictPam returns the RestrictPam field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetRestrictPam() bool {
	if o == nil || IsNil(o.RestrictPam) {
		var ret bool
		return ret
	}
	return *o.RestrictPam
}

// GetRestrictPamOk returns a tuple with the RestrictPam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetRestrictPamOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictPam) {
		return nil, false
	}
	return o.RestrictPam, true
}

// HasRestrictPam returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasRestrictPam() bool {
	if o != nil && !IsNil(o.RestrictPam) {
		return true
	}

	return false
}

// SetRestrictPam gets a reference to the given bool and assigns it to the RestrictPam field.
func (o *ActivedirectoryUpdate0) SetRestrictPam(v bool) {
	o.RestrictPam = &v
}

// GetSite returns the Site field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetSite() string {
	if o == nil || IsNil(o.Site.Get()) {
		var ret string
		return ret
	}
	return *o.Site.Get()
}

// GetSiteOk returns a tuple with the Site field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetSiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Site.Get(), o.Site.IsSet()
}

// HasSite returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasSite() bool {
	if o != nil && o.Site.IsSet() {
		return true
	}

	return false
}

// SetSite gets a reference to the given NullableString and assigns it to the Site field.
func (o *ActivedirectoryUpdate0) SetSite(v string) {
	o.Site.Set(&v)
}

// SetSiteNil sets the value for Site to be an explicit nil
func (o *ActivedirectoryUpdate0) SetSiteNil() {
	o.Site.Set(nil)
}

// UnsetSite ensures that no value is present for Site, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetSite() {
	o.Site.Unset()
}

// GetKerberosRealm returns the KerberosRealm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetKerberosRealm() int32 {
	if o == nil || IsNil(o.KerberosRealm.Get()) {
		var ret int32
		return ret
	}
	return *o.KerberosRealm.Get()
}

// GetKerberosRealmOk returns a tuple with the KerberosRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetKerberosRealmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosRealm.Get(), o.KerberosRealm.IsSet()
}

// HasKerberosRealm returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasKerberosRealm() bool {
	if o != nil && o.KerberosRealm.IsSet() {
		return true
	}

	return false
}

// SetKerberosRealm gets a reference to the given NullableInt32 and assigns it to the KerberosRealm field.
func (o *ActivedirectoryUpdate0) SetKerberosRealm(v int32) {
	o.KerberosRealm.Set(&v)
}

// SetKerberosRealmNil sets the value for KerberosRealm to be an explicit nil
func (o *ActivedirectoryUpdate0) SetKerberosRealmNil() {
	o.KerberosRealm.Set(nil)
}

// UnsetKerberosRealm ensures that no value is present for KerberosRealm, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetKerberosRealm() {
	o.KerberosRealm.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetKerberosPrincipal() string {
	if o == nil || IsNil(o.KerberosPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *ActivedirectoryUpdate0) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}

// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *ActivedirectoryUpdate0) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *ActivedirectoryUpdate0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetDnsTimeout returns the DnsTimeout field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetDnsTimeout() int32 {
	if o == nil || IsNil(o.DnsTimeout) {
		var ret int32
		return ret
	}
	return *o.DnsTimeout
}

// GetDnsTimeoutOk returns a tuple with the DnsTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetDnsTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsTimeout) {
		return nil, false
	}
	return o.DnsTimeout, true
}

// HasDnsTimeout returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasDnsTimeout() bool {
	if o != nil && !IsNil(o.DnsTimeout) {
		return true
	}

	return false
}

// SetDnsTimeout gets a reference to the given int32 and assigns it to the DnsTimeout field.
func (o *ActivedirectoryUpdate0) SetDnsTimeout(v int32) {
	o.DnsTimeout = &v
}

// GetNssInfo returns the NssInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivedirectoryUpdate0) GetNssInfo() string {
	if o == nil || IsNil(o.NssInfo.Get()) {
		var ret string
		return ret
	}
	return *o.NssInfo.Get()
}

// GetNssInfoOk returns a tuple with the NssInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivedirectoryUpdate0) GetNssInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NssInfo.Get(), o.NssInfo.IsSet()
}

// HasNssInfo returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNssInfo() bool {
	if o != nil && o.NssInfo.IsSet() {
		return true
	}

	return false
}

// SetNssInfo gets a reference to the given NullableString and assigns it to the NssInfo field.
func (o *ActivedirectoryUpdate0) SetNssInfo(v string) {
	o.NssInfo.Set(&v)
}

// SetNssInfoNil sets the value for NssInfo to be an explicit nil
func (o *ActivedirectoryUpdate0) SetNssInfoNil() {
	o.NssInfo.Set(nil)
}

// UnsetNssInfo ensures that no value is present for NssInfo, not even an explicit nil
func (o *ActivedirectoryUpdate0) UnsetNssInfo() {
	o.NssInfo.Unset()
}

// GetCreatecomputer returns the Createcomputer field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetCreatecomputer() string {
	if o == nil || IsNil(o.Createcomputer) {
		var ret string
		return ret
	}
	return *o.Createcomputer
}

// GetCreatecomputerOk returns a tuple with the Createcomputer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetCreatecomputerOk() (*string, bool) {
	if o == nil || IsNil(o.Createcomputer) {
		return nil, false
	}
	return o.Createcomputer, true
}

// HasCreatecomputer returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasCreatecomputer() bool {
	if o != nil && !IsNil(o.Createcomputer) {
		return true
	}

	return false
}

// SetCreatecomputer gets a reference to the given string and assigns it to the Createcomputer field.
func (o *ActivedirectoryUpdate0) SetCreatecomputer(v string) {
	o.Createcomputer = &v
}

// GetNetbiosname returns the Netbiosname field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosname() string {
	if o == nil || IsNil(o.Netbiosname) {
		var ret string
		return ret
	}
	return *o.Netbiosname
}

// GetNetbiosnameOk returns a tuple with the Netbiosname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosnameOk() (*string, bool) {
	if o == nil || IsNil(o.Netbiosname) {
		return nil, false
	}
	return o.Netbiosname, true
}

// HasNetbiosname returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosname() bool {
	if o != nil && !IsNil(o.Netbiosname) {
		return true
	}

	return false
}

// SetNetbiosname gets a reference to the given string and assigns it to the Netbiosname field.
func (o *ActivedirectoryUpdate0) SetNetbiosname(v string) {
	o.Netbiosname = &v
}

// GetNetbiosnameB returns the NetbiosnameB field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosnameB() string {
	if o == nil || IsNil(o.NetbiosnameB) {
		var ret string
		return ret
	}
	return *o.NetbiosnameB
}

// GetNetbiosnameBOk returns a tuple with the NetbiosnameB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosnameBOk() (*string, bool) {
	if o == nil || IsNil(o.NetbiosnameB) {
		return nil, false
	}
	return o.NetbiosnameB, true
}

// HasNetbiosnameB returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosnameB() bool {
	if o != nil && !IsNil(o.NetbiosnameB) {
		return true
	}

	return false
}

// SetNetbiosnameB gets a reference to the given string and assigns it to the NetbiosnameB field.
func (o *ActivedirectoryUpdate0) SetNetbiosnameB(v string) {
	o.NetbiosnameB = &v
}

// GetNetbiosalias returns the Netbiosalias field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetNetbiosalias() []interface{} {
	if o == nil || IsNil(o.Netbiosalias) {
		var ret []interface{}
		return ret
	}
	return o.Netbiosalias
}

// GetNetbiosaliasOk returns a tuple with the Netbiosalias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetNetbiosaliasOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Netbiosalias) {
		return nil, false
	}
	return o.Netbiosalias, true
}

// HasNetbiosalias returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasNetbiosalias() bool {
	if o != nil && !IsNil(o.Netbiosalias) {
		return true
	}

	return false
}

// SetNetbiosalias gets a reference to the given []interface{} and assigns it to the Netbiosalias field.
func (o *ActivedirectoryUpdate0) SetNetbiosalias(v []interface{}) {
	o.Netbiosalias = v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ActivedirectoryUpdate0) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivedirectoryUpdate0) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ActivedirectoryUpdate0) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ActivedirectoryUpdate0) SetEnable(v bool) {
	o.Enable = &v
}

func (o ActivedirectoryUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivedirectoryUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domainname) {
		toSerialize["domainname"] = o.Domainname
	}
	if !IsNil(o.Bindname) {
		toSerialize["bindname"] = o.Bindname
	}
	if !IsNil(o.Bindpw) {
		toSerialize["bindpw"] = o.Bindpw
	}
	if !IsNil(o.VerboseLogging) {
		toSerialize["verbose_logging"] = o.VerboseLogging
	}
	if !IsNil(o.UseDefaultDomain) {
		toSerialize["use_default_domain"] = o.UseDefaultDomain
	}
	if !IsNil(o.AllowTrustedDoms) {
		toSerialize["allow_trusted_doms"] = o.AllowTrustedDoms
	}
	if !IsNil(o.AllowDnsUpdates) {
		toSerialize["allow_dns_updates"] = o.AllowDnsUpdates
	}
	if !IsNil(o.DisableFreenasCache) {
		toSerialize["disable_freenas_cache"] = o.DisableFreenasCache
	}
	if !IsNil(o.RestrictPam) {
		toSerialize["restrict_pam"] = o.RestrictPam
	}
	if o.Site.IsSet() {
		toSerialize["site"] = o.Site.Get()
	}
	if o.KerberosRealm.IsSet() {
		toSerialize["kerberos_realm"] = o.KerberosRealm.Get()
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberos_principal"] = o.KerberosPrincipal.Get()
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.DnsTimeout) {
		toSerialize["dns_timeout"] = o.DnsTimeout
	}
	if o.NssInfo.IsSet() {
		toSerialize["nss_info"] = o.NssInfo.Get()
	}
	if !IsNil(o.Createcomputer) {
		toSerialize["createcomputer"] = o.Createcomputer
	}
	if !IsNil(o.Netbiosname) {
		toSerialize["netbiosname"] = o.Netbiosname
	}
	if !IsNil(o.NetbiosnameB) {
		toSerialize["netbiosname_b"] = o.NetbiosnameB
	}
	if !IsNil(o.Netbiosalias) {
		toSerialize["netbiosalias"] = o.Netbiosalias
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	return toSerialize, nil
}

type NullableActivedirectoryUpdate0 struct {
	value *ActivedirectoryUpdate0
	isSet bool
}

func (v NullableActivedirectoryUpdate0) Get() *ActivedirectoryUpdate0 {
	return v.value
}

func (v *NullableActivedirectoryUpdate0) Set(val *ActivedirectoryUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableActivedirectoryUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableActivedirectoryUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivedirectoryUpdate0(val *ActivedirectoryUpdate0) *NullableActivedirectoryUpdate0 {
	return &NullableActivedirectoryUpdate0{value: val, isSet: true}
}

func (v NullableActivedirectoryUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivedirectoryUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
