/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolTopology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolTopology{}

// PoolTopology struct for PoolTopology
type PoolTopology struct {
	Data                 []VDev `json:"data"`
	Log                  []VDev `json:"log"`
	Cache                []VDev `json:"cache"`
	Spare                []VDev `json:"spare"`
	Special              []VDev `json:"special"`
	Dedup                []VDev `json:"dedup"`
	AdditionalProperties map[string]interface{}
}

type _PoolTopology PoolTopology

// NewPoolTopology instantiates a new PoolTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolTopology(data []VDev, log []VDev, cache []VDev, spare []VDev, special []VDev, dedup []VDev) *PoolTopology {
	this := PoolTopology{}
	this.Data = data
	this.Log = log
	this.Cache = cache
	this.Spare = spare
	this.Special = special
	this.Dedup = dedup
	return &this
}

// NewPoolTopologyWithDefaults instantiates a new PoolTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolTopologyWithDefaults() *PoolTopology {
	this := PoolTopology{}
	return &this
}

// GetData returns the Data field value
func (o *PoolTopology) GetData() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetDataOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PoolTopology) SetData(v []VDev) {
	o.Data = v
}

// GetLog returns the Log field value
func (o *PoolTopology) GetLog() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Log
}

// GetLogOk returns a tuple with the Log field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetLogOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Log, true
}

// SetLog sets field value
func (o *PoolTopology) SetLog(v []VDev) {
	o.Log = v
}

// GetCache returns the Cache field value
func (o *PoolTopology) GetCache() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Cache
}

// GetCacheOk returns a tuple with the Cache field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetCacheOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cache, true
}

// SetCache sets field value
func (o *PoolTopology) SetCache(v []VDev) {
	o.Cache = v
}

// GetSpare returns the Spare field value
func (o *PoolTopology) GetSpare() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Spare
}

// GetSpareOk returns a tuple with the Spare field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetSpareOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Spare, true
}

// SetSpare sets field value
func (o *PoolTopology) SetSpare(v []VDev) {
	o.Spare = v
}

// GetSpecial returns the Special field value
func (o *PoolTopology) GetSpecial() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Special
}

// GetSpecialOk returns a tuple with the Special field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetSpecialOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Special, true
}

// SetSpecial sets field value
func (o *PoolTopology) SetSpecial(v []VDev) {
	o.Special = v
}

// GetDedup returns the Dedup field value
func (o *PoolTopology) GetDedup() []VDev {
	if o == nil {
		var ret []VDev
		return ret
	}

	return o.Dedup
}

// GetDedupOk returns a tuple with the Dedup field value
// and a boolean to check if the value has been set.
func (o *PoolTopology) GetDedupOk() ([]VDev, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dedup, true
}

// SetDedup sets field value
func (o *PoolTopology) SetDedup(v []VDev) {
	o.Dedup = v
}

func (o PoolTopology) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolTopology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["log"] = o.Log
	toSerialize["cache"] = o.Cache
	toSerialize["spare"] = o.Spare
	toSerialize["special"] = o.Special
	toSerialize["dedup"] = o.Dedup

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PoolTopology) UnmarshalJSON(bytes []byte) (err error) {
	varPoolTopology := _PoolTopology{}

	if err = json.Unmarshal(bytes, &varPoolTopology); err == nil {
		*o = PoolTopology(varPoolTopology)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "log")
		delete(additionalProperties, "cache")
		delete(additionalProperties, "spare")
		delete(additionalProperties, "special")
		delete(additionalProperties, "dedup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoolTopology struct {
	value *PoolTopology
	isSet bool
}

func (v NullablePoolTopology) Get() *PoolTopology {
	return v.value
}

func (v *NullablePoolTopology) Set(val *PoolTopology) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolTopology) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolTopology(val *PoolTopology) *NullablePoolTopology {
	return &NullablePoolTopology{value: val, isSet: true}
}

func (v NullablePoolTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
