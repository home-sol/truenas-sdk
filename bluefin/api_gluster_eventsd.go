/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// GlusterEventsdApiService GlusterEventsdApi service
type GlusterEventsdApiService service

type ApiGlusterEventsdCreatePostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterEventsdApiService
	glusterEventsdCreate0 *GlusterEventsdCreate0
}

func (r ApiGlusterEventsdCreatePostRequest) GlusterEventsdCreate0(glusterEventsdCreate0 GlusterEventsdCreate0) ApiGlusterEventsdCreatePostRequest {
	r.glusterEventsdCreate0 = &glusterEventsdCreate0
	return r
}

func (r ApiGlusterEventsdCreatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterEventsdCreatePostExecute(r)
}

/*
GlusterEventsdCreatePost Method for GlusterEventsdCreatePost

Add `url` webhook that will be called
with a JSON formatted POST request that
will include the event that was triggered
along with the relevant data.

`url` is a http address (i.e. http://192.168.1.50/endpoint)
`bearer_token` is a bearer token
`secret` secret to encode the JWT message

NOTE: This webhook will be synchronized to all
peers in the trusted storage pool.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterEventsdCreatePostRequest
*/
func (a *GlusterEventsdApiService) GlusterEventsdCreatePost(ctx context.Context) ApiGlusterEventsdCreatePostRequest {
	return ApiGlusterEventsdCreatePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterEventsdApiService) GlusterEventsdCreatePostExecute(r ApiGlusterEventsdCreatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterEventsdApiService.GlusterEventsdCreatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/eventsd/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterEventsdCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterEventsdDeletePostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterEventsdApiService
	glusterEventsdDelete0 *GlusterEventsdDelete0
}

func (r ApiGlusterEventsdDeletePostRequest) GlusterEventsdDelete0(glusterEventsdDelete0 GlusterEventsdDelete0) ApiGlusterEventsdDeletePostRequest {
	r.glusterEventsdDelete0 = &glusterEventsdDelete0
	return r
}

func (r ApiGlusterEventsdDeletePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterEventsdDeletePostExecute(r)
}

/*
GlusterEventsdDeletePost Method for GlusterEventsdDeletePost

# Delete `url` webhook

`url` is a http address (i.e. http://192.168.1.50/endpoint)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterEventsdDeletePostRequest
*/
func (a *GlusterEventsdApiService) GlusterEventsdDeletePost(ctx context.Context) ApiGlusterEventsdDeletePostRequest {
	return ApiGlusterEventsdDeletePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterEventsdApiService) GlusterEventsdDeletePostExecute(r ApiGlusterEventsdDeletePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterEventsdApiService.GlusterEventsdDeletePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/eventsd/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterEventsdDelete0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterEventsdSyncGetRequest struct {
	ctx        context.Context
	ApiService *GlusterEventsdApiService
}

func (r ApiGlusterEventsdSyncGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterEventsdSyncGetExecute(r)
}

/*
GlusterEventsdSyncGet Method for GlusterEventsdSyncGet

Sync the webhooks config file to all peers in the
trusted storage pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterEventsdSyncGetRequest
*/
func (a *GlusterEventsdApiService) GlusterEventsdSyncGet(ctx context.Context) ApiGlusterEventsdSyncGetRequest {
	return ApiGlusterEventsdSyncGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterEventsdApiService) GlusterEventsdSyncGetExecute(r ApiGlusterEventsdSyncGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterEventsdApiService.GlusterEventsdSyncGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/eventsd/sync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterEventsdWebhooksGetRequest struct {
	ctx        context.Context
	ApiService *GlusterEventsdApiService
}

func (r ApiGlusterEventsdWebhooksGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterEventsdWebhooksGetExecute(r)
}

/*
GlusterEventsdWebhooksGet Method for GlusterEventsdWebhooksGet

List the current webhooks (if any)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterEventsdWebhooksGetRequest
*/
func (a *GlusterEventsdApiService) GlusterEventsdWebhooksGet(ctx context.Context) ApiGlusterEventsdWebhooksGetRequest {
	return ApiGlusterEventsdWebhooksGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterEventsdApiService) GlusterEventsdWebhooksGetExecute(r ApiGlusterEventsdWebhooksGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterEventsdApiService.GlusterEventsdWebhooksGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/eventsd/webhooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
