/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CtdbPublicIpsApiService CtdbPublicIpsApi service
type CtdbPublicIpsApiService service

type ApiCtdbPublicIpsGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiCtdbPublicIpsGetRequest) Limit(limit int32) ApiCtdbPublicIpsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiCtdbPublicIpsGetRequest) Offset(offset int32) ApiCtdbPublicIpsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiCtdbPublicIpsGetRequest) Count(count bool) ApiCtdbPublicIpsGetRequest {
	r.count = &count
	return r
}

func (r ApiCtdbPublicIpsGetRequest) Sort(sort string) ApiCtdbPublicIpsGetRequest {
	r.sort = &sort
	return r
}

func (r ApiCtdbPublicIpsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsGetExecute(r)
}

/*
CtdbPublicIpsGet Method for CtdbPublicIpsGet

Retrieve information about configured public IP addresses for the
ctdb cluster. This call raise a CallError with errno set to ENXIO
if this node is not in a state where it can provide accurate
information about cluster. Examples problematic states are:

- ctdb or glusterd are not running on this node

- ctdb shared volume is not mounted

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPublicIpsGetRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGet(ctx context.Context) ApiCtdbPublicIpsGetRequest {
	return ApiCtdbPublicIpsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGetExecute(r ApiCtdbPublicIpsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPublicIpsGetInstancePostRequest struct {
	ctx                      context.Context
	ApiService               *CtdbPublicIpsApiService
	ctdbPublicIpsGetInstance *CtdbPublicIpsGetInstance
}

func (r ApiCtdbPublicIpsGetInstancePostRequest) CtdbPublicIpsGetInstance(ctdbPublicIpsGetInstance CtdbPublicIpsGetInstance) ApiCtdbPublicIpsGetInstancePostRequest {
	r.ctdbPublicIpsGetInstance = &ctdbPublicIpsGetInstance
	return r
}

func (r ApiCtdbPublicIpsGetInstancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsGetInstancePostExecute(r)
}

/*
CtdbPublicIpsGetInstancePost Method for CtdbPublicIpsGetInstancePost

Returns instance matching `id`. If `id` is not found, Validation error is raised.

Please see `query` method documentation for `options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPublicIpsGetInstancePostRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGetInstancePost(ctx context.Context) ApiCtdbPublicIpsGetInstancePostRequest {
	return ApiCtdbPublicIpsGetInstancePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGetInstancePostExecute(r ApiCtdbPublicIpsGetInstancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsGetInstancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/get_instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbPublicIpsGetInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPublicIpsIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	id         int32
}

func (r ApiCtdbPublicIpsIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsIdIdDeleteExecute(r)
}

/*
CtdbPublicIpsIdIdDelete Method for CtdbPublicIpsIdIdDelete

Remove the specified `address` from the configuration for the node specified by `pnn`.
If `pnn` is not specified, then the operation applies to the current node.
In order to remove an address cluster-wide, this method must be called on
every node where the public IP address is configured.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCtdbPublicIpsIdIdDeleteRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdDelete(ctx context.Context, id int32) ApiCtdbPublicIpsIdIdDeleteRequest {
	return ApiCtdbPublicIpsIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdDeleteExecute(r ApiCtdbPublicIpsIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPublicIpsIdIdGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	id         int32
}

func (r ApiCtdbPublicIpsIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsIdIdGetExecute(r)
}

/*
CtdbPublicIpsIdIdGet Method for CtdbPublicIpsIdIdGet

Retrieve information about configured public IP addresses for the
ctdb cluster. This call raise a CallError with errno set to ENXIO
if this node is not in a state where it can provide accurate
information about cluster. Examples problematic states are:

- ctdb or glusterd are not running on this node

- ctdb shared volume is not mounted

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCtdbPublicIpsIdIdGetRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdGet(ctx context.Context, id int32) ApiCtdbPublicIpsIdIdGetRequest {
	return ApiCtdbPublicIpsIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdGetExecute(r ApiCtdbPublicIpsIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPublicIpsInterfaceChoicesPostRequest struct {
	ctx         context.Context
	ApiService  *CtdbPublicIpsApiService
	requestBody *[]string
}

func (r ApiCtdbPublicIpsInterfaceChoicesPostRequest) RequestBody(requestBody []string) ApiCtdbPublicIpsInterfaceChoicesPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCtdbPublicIpsInterfaceChoicesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsInterfaceChoicesPostExecute(r)
}

/*
CtdbPublicIpsInterfaceChoicesPost Method for CtdbPublicIpsInterfaceChoicesPost

Retrieve list of available interface choices that can be used for assigning a ctdbd public ip.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPublicIpsInterfaceChoicesPostRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsInterfaceChoicesPost(ctx context.Context) ApiCtdbPublicIpsInterfaceChoicesPostRequest {
	return ApiCtdbPublicIpsInterfaceChoicesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsInterfaceChoicesPostExecute(r ApiCtdbPublicIpsInterfaceChoicesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsInterfaceChoicesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/interface_choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCtdbPublicIpsPostRequest struct {
	ctx                  context.Context
	ApiService           *CtdbPublicIpsApiService
	ctdbPublicIpsCreate0 *CtdbPublicIpsCreate0
}

func (r ApiCtdbPublicIpsPostRequest) CtdbPublicIpsCreate0(ctdbPublicIpsCreate0 CtdbPublicIpsCreate0) ApiCtdbPublicIpsPostRequest {
	r.ctdbPublicIpsCreate0 = &ctdbPublicIpsCreate0
	return r
}

func (r ApiCtdbPublicIpsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsPostExecute(r)
}

/*
CtdbPublicIpsPost Method for CtdbPublicIpsPost

# Add a ctdb public address to the cluster

`pnn` node number of record to adjust
`ip` string representing an IP v4/v6 address
`netmask` integer representing a cidr notated netmask (i.e. 16/24/48/64 etc)
`interface` string representing a network interface to apply the `ip`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCtdbPublicIpsPostRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsPost(ctx context.Context) ApiCtdbPublicIpsPostRequest {
	return ApiCtdbPublicIpsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsPostExecute(r ApiCtdbPublicIpsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbPublicIpsCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
