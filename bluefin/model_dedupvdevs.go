/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Dedupvdevs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dedupvdevs{}

// Dedupvdevs struct for Dedupvdevs
type Dedupvdevs struct {
	Type  *string `json:"type,omitempty"`
	Disks *Array  `json:"disks,omitempty"`
}

// NewDedupvdevs instantiates a new Dedupvdevs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedupvdevs() *Dedupvdevs {
	this := Dedupvdevs{}
	var disks Array
	this.Disks = &disks
	return &this
}

// NewDedupvdevsWithDefaults instantiates a new Dedupvdevs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedupvdevsWithDefaults() *Dedupvdevs {
	this := Dedupvdevs{}
	var disks Array
	this.Disks = &disks
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Dedupvdevs) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedupvdevs) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Dedupvdevs) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Dedupvdevs) SetType(v string) {
	o.Type = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Dedupvdevs) GetDisks() Array {
	if o == nil || IsNil(o.Disks) {
		var ret Array
		return ret
	}
	return *o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedupvdevs) GetDisksOk() (*Array, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Dedupvdevs) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given Array and assigns it to the Disks field.
func (o *Dedupvdevs) SetDisks(v Array) {
	o.Disks = &v
}

func (o Dedupvdevs) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dedupvdevs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	return toSerialize, nil
}

type NullableDedupvdevs struct {
	value *Dedupvdevs
	isSet bool
}

func (v NullableDedupvdevs) Get() *Dedupvdevs {
	return v.value
}

func (v *NullableDedupvdevs) Set(val *Dedupvdevs) {
	v.value = val
	v.isSet = true
}

func (v NullableDedupvdevs) IsSet() bool {
	return v.isSet
}

func (v *NullableDedupvdevs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedupvdevs(val *Dedupvdevs) *NullableDedupvdevs {
	return &NullableDedupvdevs{value: val, isSet: true}
}

func (v NullableDedupvdevs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedupvdevs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
