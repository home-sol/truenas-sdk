/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the InterfaceAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceAlias{}

// InterfaceAlias struct for InterfaceAlias
type InterfaceAlias struct {
	Type    *string `json:"type,omitempty"`
	Address *string `json:"address,omitempty"`
	Netmask *int32  `json:"netmask,omitempty"`
}

// NewInterfaceAlias instantiates a new InterfaceAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceAlias() *InterfaceAlias {
	this := InterfaceAlias{}
	var type_ string
	this.Type = &type_
	return &this
}

// NewInterfaceAliasWithDefaults instantiates a new InterfaceAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceAliasWithDefaults() *InterfaceAlias {
	this := InterfaceAlias{}
	var type_ string
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InterfaceAlias) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAlias) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InterfaceAlias) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InterfaceAlias) SetType(v string) {
	o.Type = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *InterfaceAlias) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAlias) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *InterfaceAlias) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *InterfaceAlias) SetAddress(v string) {
	o.Address = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *InterfaceAlias) GetNetmask() int32 {
	if o == nil || IsNil(o.Netmask) {
		var ret int32
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAlias) GetNetmaskOk() (*int32, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *InterfaceAlias) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given int32 and assigns it to the Netmask field.
func (o *InterfaceAlias) SetNetmask(v int32) {
	o.Netmask = &v
}

func (o InterfaceAlias) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	return toSerialize, nil
}

type NullableInterfaceAlias struct {
	value *InterfaceAlias
	isSet bool
}

func (v NullableInterfaceAlias) Get() *InterfaceAlias {
	return v.value
}

func (v *NullableInterfaceAlias) Set(val *InterfaceAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceAlias(val *InterfaceAlias) *NullableInterfaceAlias {
	return &NullableInterfaceAlias{value: val, isSet: true}
}

func (v NullableInterfaceAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
