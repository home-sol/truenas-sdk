/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the DiskWipe3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskWipe3{}

// DiskWipe3 struct for DiskWipe3
type DiskWipe3 struct {
	ConfigureSwap *bool `json:"configure_swap,omitempty"`
}

// NewDiskWipe3 instantiates a new DiskWipe3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskWipe3() *DiskWipe3 {
	this := DiskWipe3{}
	var configureSwap bool
	this.ConfigureSwap = &configureSwap
	return &this
}

// NewDiskWipe3WithDefaults instantiates a new DiskWipe3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskWipe3WithDefaults() *DiskWipe3 {
	this := DiskWipe3{}
	var configureSwap bool
	this.ConfigureSwap = &configureSwap
	return &this
}

// GetConfigureSwap returns the ConfigureSwap field value if set, zero value otherwise.
func (o *DiskWipe3) GetConfigureSwap() bool {
	if o == nil || IsNil(o.ConfigureSwap) {
		var ret bool
		return ret
	}
	return *o.ConfigureSwap
}

// GetConfigureSwapOk returns a tuple with the ConfigureSwap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskWipe3) GetConfigureSwapOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigureSwap) {
		return nil, false
	}
	return o.ConfigureSwap, true
}

// HasConfigureSwap returns a boolean if a field has been set.
func (o *DiskWipe3) HasConfigureSwap() bool {
	if o != nil && !IsNil(o.ConfigureSwap) {
		return true
	}

	return false
}

// SetConfigureSwap gets a reference to the given bool and assigns it to the ConfigureSwap field.
func (o *DiskWipe3) SetConfigureSwap(v bool) {
	o.ConfigureSwap = &v
}

func (o DiskWipe3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskWipe3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigureSwap) {
		toSerialize["configure_swap"] = o.ConfigureSwap
	}
	return toSerialize, nil
}

type NullableDiskWipe3 struct {
	value *DiskWipe3
	isSet bool
}

func (v NullableDiskWipe3) Get() *DiskWipe3 {
	return v.value
}

func (v *NullableDiskWipe3) Set(val *DiskWipe3) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskWipe3) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskWipe3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskWipe3(val *DiskWipe3) *NullableDiskWipe3 {
	return &NullableDiskWipe3{value: val, isSet: true}
}

func (v NullableDiskWipe3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskWipe3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
