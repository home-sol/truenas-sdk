/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the UpsUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsUpdate0{}

// UpsUpdate0 struct for UpsUpdate0
type UpsUpdate0 struct {
	// `powerdown` when enabled, sets UPS to power off after shutting down the system.
	Powerdown *bool `json:"powerdown,omitempty"`
	Rmonitor  *bool `json:"rmonitor,omitempty"`
	// `nocommwarntime` is a value in seconds which makes UPS Service wait the specified seconds before alerting that the Service cannot reach configured UPS.
	Nocommwarntime NullableInt32 `json:"nocommwarntime,omitempty"`
	Remoteport     *int32        `json:"remoteport,omitempty"`
	// `shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before initiating a shutdown. This only applies when `shutdown` is set to \"BATT\".
	Shutdowntimer *int32  `json:"shutdowntimer,omitempty"`
	Hostsync      *int32  `json:"hostsync,omitempty"`
	Description   *string `json:"description,omitempty"`
	Driver        *string `json:"driver,omitempty"`
	Extrausers    *string `json:"extrausers,omitempty"`
	Identifier    *string `json:"identifier,omitempty"`
	Mode          *string `json:"mode,omitempty"`
	Monpwd        *string `json:"monpwd,omitempty"`
	Monuser       *string `json:"monuser,omitempty"`
	Options       *string `json:"options,omitempty"`
	Optionsupsd   *string `json:"optionsupsd,omitempty"`
	Port          *string `json:"port,omitempty"`
	Remotehost    *string `json:"remotehost,omitempty"`
	// `shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before initiating a shutdown. This only applies when `shutdown` is set to \"BATT\".
	Shutdown    *string        `json:"shutdown,omitempty"`
	Shutdowncmd NullableString `json:"shutdowncmd,omitempty"`
}

// NewUpsUpdate0 instantiates a new UpsUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsUpdate0() *UpsUpdate0 {
	this := UpsUpdate0{}
	return &this
}

// NewUpsUpdate0WithDefaults instantiates a new UpsUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsUpdate0WithDefaults() *UpsUpdate0 {
	this := UpsUpdate0{}
	return &this
}

// GetPowerdown returns the Powerdown field value if set, zero value otherwise.
func (o *UpsUpdate0) GetPowerdown() bool {
	if o == nil || IsNil(o.Powerdown) {
		var ret bool
		return ret
	}
	return *o.Powerdown
}

// GetPowerdownOk returns a tuple with the Powerdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetPowerdownOk() (*bool, bool) {
	if o == nil || IsNil(o.Powerdown) {
		return nil, false
	}
	return o.Powerdown, true
}

// HasPowerdown returns a boolean if a field has been set.
func (o *UpsUpdate0) HasPowerdown() bool {
	if o != nil && !IsNil(o.Powerdown) {
		return true
	}

	return false
}

// SetPowerdown gets a reference to the given bool and assigns it to the Powerdown field.
func (o *UpsUpdate0) SetPowerdown(v bool) {
	o.Powerdown = &v
}

// GetRmonitor returns the Rmonitor field value if set, zero value otherwise.
func (o *UpsUpdate0) GetRmonitor() bool {
	if o == nil || IsNil(o.Rmonitor) {
		var ret bool
		return ret
	}
	return *o.Rmonitor
}

// GetRmonitorOk returns a tuple with the Rmonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetRmonitorOk() (*bool, bool) {
	if o == nil || IsNil(o.Rmonitor) {
		return nil, false
	}
	return o.Rmonitor, true
}

// HasRmonitor returns a boolean if a field has been set.
func (o *UpsUpdate0) HasRmonitor() bool {
	if o != nil && !IsNil(o.Rmonitor) {
		return true
	}

	return false
}

// SetRmonitor gets a reference to the given bool and assigns it to the Rmonitor field.
func (o *UpsUpdate0) SetRmonitor(v bool) {
	o.Rmonitor = &v
}

// GetNocommwarntime returns the Nocommwarntime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsUpdate0) GetNocommwarntime() int32 {
	if o == nil || IsNil(o.Nocommwarntime.Get()) {
		var ret int32
		return ret
	}
	return *o.Nocommwarntime.Get()
}

// GetNocommwarntimeOk returns a tuple with the Nocommwarntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsUpdate0) GetNocommwarntimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nocommwarntime.Get(), o.Nocommwarntime.IsSet()
}

// HasNocommwarntime returns a boolean if a field has been set.
func (o *UpsUpdate0) HasNocommwarntime() bool {
	if o != nil && o.Nocommwarntime.IsSet() {
		return true
	}

	return false
}

// SetNocommwarntime gets a reference to the given NullableInt32 and assigns it to the Nocommwarntime field.
func (o *UpsUpdate0) SetNocommwarntime(v int32) {
	o.Nocommwarntime.Set(&v)
}

// SetNocommwarntimeNil sets the value for Nocommwarntime to be an explicit nil
func (o *UpsUpdate0) SetNocommwarntimeNil() {
	o.Nocommwarntime.Set(nil)
}

// UnsetNocommwarntime ensures that no value is present for Nocommwarntime, not even an explicit nil
func (o *UpsUpdate0) UnsetNocommwarntime() {
	o.Nocommwarntime.Unset()
}

// GetRemoteport returns the Remoteport field value if set, zero value otherwise.
func (o *UpsUpdate0) GetRemoteport() int32 {
	if o == nil || IsNil(o.Remoteport) {
		var ret int32
		return ret
	}
	return *o.Remoteport
}

// GetRemoteportOk returns a tuple with the Remoteport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetRemoteportOk() (*int32, bool) {
	if o == nil || IsNil(o.Remoteport) {
		return nil, false
	}
	return o.Remoteport, true
}

// HasRemoteport returns a boolean if a field has been set.
func (o *UpsUpdate0) HasRemoteport() bool {
	if o != nil && !IsNil(o.Remoteport) {
		return true
	}

	return false
}

// SetRemoteport gets a reference to the given int32 and assigns it to the Remoteport field.
func (o *UpsUpdate0) SetRemoteport(v int32) {
	o.Remoteport = &v
}

// GetShutdowntimer returns the Shutdowntimer field value if set, zero value otherwise.
func (o *UpsUpdate0) GetShutdowntimer() int32 {
	if o == nil || IsNil(o.Shutdowntimer) {
		var ret int32
		return ret
	}
	return *o.Shutdowntimer
}

// GetShutdowntimerOk returns a tuple with the Shutdowntimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetShutdowntimerOk() (*int32, bool) {
	if o == nil || IsNil(o.Shutdowntimer) {
		return nil, false
	}
	return o.Shutdowntimer, true
}

// HasShutdowntimer returns a boolean if a field has been set.
func (o *UpsUpdate0) HasShutdowntimer() bool {
	if o != nil && !IsNil(o.Shutdowntimer) {
		return true
	}

	return false
}

// SetShutdowntimer gets a reference to the given int32 and assigns it to the Shutdowntimer field.
func (o *UpsUpdate0) SetShutdowntimer(v int32) {
	o.Shutdowntimer = &v
}

// GetHostsync returns the Hostsync field value if set, zero value otherwise.
func (o *UpsUpdate0) GetHostsync() int32 {
	if o == nil || IsNil(o.Hostsync) {
		var ret int32
		return ret
	}
	return *o.Hostsync
}

// GetHostsyncOk returns a tuple with the Hostsync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetHostsyncOk() (*int32, bool) {
	if o == nil || IsNil(o.Hostsync) {
		return nil, false
	}
	return o.Hostsync, true
}

// HasHostsync returns a boolean if a field has been set.
func (o *UpsUpdate0) HasHostsync() bool {
	if o != nil && !IsNil(o.Hostsync) {
		return true
	}

	return false
}

// SetHostsync gets a reference to the given int32 and assigns it to the Hostsync field.
func (o *UpsUpdate0) SetHostsync(v int32) {
	o.Hostsync = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpsUpdate0) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpsUpdate0) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpsUpdate0) SetDescription(v string) {
	o.Description = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *UpsUpdate0) GetDriver() string {
	if o == nil || IsNil(o.Driver) {
		var ret string
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetDriverOk() (*string, bool) {
	if o == nil || IsNil(o.Driver) {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *UpsUpdate0) HasDriver() bool {
	if o != nil && !IsNil(o.Driver) {
		return true
	}

	return false
}

// SetDriver gets a reference to the given string and assigns it to the Driver field.
func (o *UpsUpdate0) SetDriver(v string) {
	o.Driver = &v
}

// GetExtrausers returns the Extrausers field value if set, zero value otherwise.
func (o *UpsUpdate0) GetExtrausers() string {
	if o == nil || IsNil(o.Extrausers) {
		var ret string
		return ret
	}
	return *o.Extrausers
}

// GetExtrausersOk returns a tuple with the Extrausers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetExtrausersOk() (*string, bool) {
	if o == nil || IsNil(o.Extrausers) {
		return nil, false
	}
	return o.Extrausers, true
}

// HasExtrausers returns a boolean if a field has been set.
func (o *UpsUpdate0) HasExtrausers() bool {
	if o != nil && !IsNil(o.Extrausers) {
		return true
	}

	return false
}

// SetExtrausers gets a reference to the given string and assigns it to the Extrausers field.
func (o *UpsUpdate0) SetExtrausers(v string) {
	o.Extrausers = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *UpsUpdate0) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *UpsUpdate0) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *UpsUpdate0) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *UpsUpdate0) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *UpsUpdate0) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *UpsUpdate0) SetMode(v string) {
	o.Mode = &v
}

// GetMonpwd returns the Monpwd field value if set, zero value otherwise.
func (o *UpsUpdate0) GetMonpwd() string {
	if o == nil || IsNil(o.Monpwd) {
		var ret string
		return ret
	}
	return *o.Monpwd
}

// GetMonpwdOk returns a tuple with the Monpwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetMonpwdOk() (*string, bool) {
	if o == nil || IsNil(o.Monpwd) {
		return nil, false
	}
	return o.Monpwd, true
}

// HasMonpwd returns a boolean if a field has been set.
func (o *UpsUpdate0) HasMonpwd() bool {
	if o != nil && !IsNil(o.Monpwd) {
		return true
	}

	return false
}

// SetMonpwd gets a reference to the given string and assigns it to the Monpwd field.
func (o *UpsUpdate0) SetMonpwd(v string) {
	o.Monpwd = &v
}

// GetMonuser returns the Monuser field value if set, zero value otherwise.
func (o *UpsUpdate0) GetMonuser() string {
	if o == nil || IsNil(o.Monuser) {
		var ret string
		return ret
	}
	return *o.Monuser
}

// GetMonuserOk returns a tuple with the Monuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetMonuserOk() (*string, bool) {
	if o == nil || IsNil(o.Monuser) {
		return nil, false
	}
	return o.Monuser, true
}

// HasMonuser returns a boolean if a field has been set.
func (o *UpsUpdate0) HasMonuser() bool {
	if o != nil && !IsNil(o.Monuser) {
		return true
	}

	return false
}

// SetMonuser gets a reference to the given string and assigns it to the Monuser field.
func (o *UpsUpdate0) SetMonuser(v string) {
	o.Monuser = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpsUpdate0) GetOptions() string {
	if o == nil || IsNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpsUpdate0) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *UpsUpdate0) SetOptions(v string) {
	o.Options = &v
}

// GetOptionsupsd returns the Optionsupsd field value if set, zero value otherwise.
func (o *UpsUpdate0) GetOptionsupsd() string {
	if o == nil || IsNil(o.Optionsupsd) {
		var ret string
		return ret
	}
	return *o.Optionsupsd
}

// GetOptionsupsdOk returns a tuple with the Optionsupsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetOptionsupsdOk() (*string, bool) {
	if o == nil || IsNil(o.Optionsupsd) {
		return nil, false
	}
	return o.Optionsupsd, true
}

// HasOptionsupsd returns a boolean if a field has been set.
func (o *UpsUpdate0) HasOptionsupsd() bool {
	if o != nil && !IsNil(o.Optionsupsd) {
		return true
	}

	return false
}

// SetOptionsupsd gets a reference to the given string and assigns it to the Optionsupsd field.
func (o *UpsUpdate0) SetOptionsupsd(v string) {
	o.Optionsupsd = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *UpsUpdate0) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *UpsUpdate0) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *UpsUpdate0) SetPort(v string) {
	o.Port = &v
}

// GetRemotehost returns the Remotehost field value if set, zero value otherwise.
func (o *UpsUpdate0) GetRemotehost() string {
	if o == nil || IsNil(o.Remotehost) {
		var ret string
		return ret
	}
	return *o.Remotehost
}

// GetRemotehostOk returns a tuple with the Remotehost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetRemotehostOk() (*string, bool) {
	if o == nil || IsNil(o.Remotehost) {
		return nil, false
	}
	return o.Remotehost, true
}

// HasRemotehost returns a boolean if a field has been set.
func (o *UpsUpdate0) HasRemotehost() bool {
	if o != nil && !IsNil(o.Remotehost) {
		return true
	}

	return false
}

// SetRemotehost gets a reference to the given string and assigns it to the Remotehost field.
func (o *UpsUpdate0) SetRemotehost(v string) {
	o.Remotehost = &v
}

// GetShutdown returns the Shutdown field value if set, zero value otherwise.
func (o *UpsUpdate0) GetShutdown() string {
	if o == nil || IsNil(o.Shutdown) {
		var ret string
		return ret
	}
	return *o.Shutdown
}

// GetShutdownOk returns a tuple with the Shutdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsUpdate0) GetShutdownOk() (*string, bool) {
	if o == nil || IsNil(o.Shutdown) {
		return nil, false
	}
	return o.Shutdown, true
}

// HasShutdown returns a boolean if a field has been set.
func (o *UpsUpdate0) HasShutdown() bool {
	if o != nil && !IsNil(o.Shutdown) {
		return true
	}

	return false
}

// SetShutdown gets a reference to the given string and assigns it to the Shutdown field.
func (o *UpsUpdate0) SetShutdown(v string) {
	o.Shutdown = &v
}

// GetShutdowncmd returns the Shutdowncmd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsUpdate0) GetShutdowncmd() string {
	if o == nil || IsNil(o.Shutdowncmd.Get()) {
		var ret string
		return ret
	}
	return *o.Shutdowncmd.Get()
}

// GetShutdowncmdOk returns a tuple with the Shutdowncmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsUpdate0) GetShutdowncmdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shutdowncmd.Get(), o.Shutdowncmd.IsSet()
}

// HasShutdowncmd returns a boolean if a field has been set.
func (o *UpsUpdate0) HasShutdowncmd() bool {
	if o != nil && o.Shutdowncmd.IsSet() {
		return true
	}

	return false
}

// SetShutdowncmd gets a reference to the given NullableString and assigns it to the Shutdowncmd field.
func (o *UpsUpdate0) SetShutdowncmd(v string) {
	o.Shutdowncmd.Set(&v)
}

// SetShutdowncmdNil sets the value for Shutdowncmd to be an explicit nil
func (o *UpsUpdate0) SetShutdowncmdNil() {
	o.Shutdowncmd.Set(nil)
}

// UnsetShutdowncmd ensures that no value is present for Shutdowncmd, not even an explicit nil
func (o *UpsUpdate0) UnsetShutdowncmd() {
	o.Shutdowncmd.Unset()
}

func (o UpsUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Powerdown) {
		toSerialize["powerdown"] = o.Powerdown
	}
	if !IsNil(o.Rmonitor) {
		toSerialize["rmonitor"] = o.Rmonitor
	}
	if o.Nocommwarntime.IsSet() {
		toSerialize["nocommwarntime"] = o.Nocommwarntime.Get()
	}
	if !IsNil(o.Remoteport) {
		toSerialize["remoteport"] = o.Remoteport
	}
	if !IsNil(o.Shutdowntimer) {
		toSerialize["shutdowntimer"] = o.Shutdowntimer
	}
	if !IsNil(o.Hostsync) {
		toSerialize["hostsync"] = o.Hostsync
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Driver) {
		toSerialize["driver"] = o.Driver
	}
	if !IsNil(o.Extrausers) {
		toSerialize["extrausers"] = o.Extrausers
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Monpwd) {
		toSerialize["monpwd"] = o.Monpwd
	}
	if !IsNil(o.Monuser) {
		toSerialize["monuser"] = o.Monuser
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Optionsupsd) {
		toSerialize["optionsupsd"] = o.Optionsupsd
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Remotehost) {
		toSerialize["remotehost"] = o.Remotehost
	}
	if !IsNil(o.Shutdown) {
		toSerialize["shutdown"] = o.Shutdown
	}
	if o.Shutdowncmd.IsSet() {
		toSerialize["shutdowncmd"] = o.Shutdowncmd.Get()
	}
	return toSerialize, nil
}

type NullableUpsUpdate0 struct {
	value *UpsUpdate0
	isSet bool
}

func (v NullableUpsUpdate0) Get() *UpsUpdate0 {
	return v.value
}

func (v *NullableUpsUpdate0) Set(val *UpsUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsUpdate0(val *UpsUpdate0) *NullableUpsUpdate0 {
	return &NullableUpsUpdate0{value: val, isSet: true}
}

func (v NullableUpsUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
