/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the IscsiAuthCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IscsiAuthCreate0{}

// IscsiAuthCreate0 struct for IscsiAuthCreate0
type IscsiAuthCreate0 struct {
	// `tag` should be unique among all configured iSCSI Authorized Accesses.
	Tag  *int32  `json:"tag,omitempty"`
	User *string `json:"user,omitempty"`
	// `secret` and `peersecret` should have length between 12-16 letters inclusive.
	Secret   *string `json:"secret,omitempty"`
	Peeruser *string `json:"peeruser,omitempty"`
	// `secret` and `peersecret` should have length between 12-16 letters inclusive.
	Peersecret *string `json:"peersecret,omitempty"`
}

// NewIscsiAuthCreate0 instantiates a new IscsiAuthCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIscsiAuthCreate0() *IscsiAuthCreate0 {
	this := IscsiAuthCreate0{}
	var peeruser string
	this.Peeruser = &peeruser
	var peersecret string
	this.Peersecret = &peersecret
	return &this
}

// NewIscsiAuthCreate0WithDefaults instantiates a new IscsiAuthCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIscsiAuthCreate0WithDefaults() *IscsiAuthCreate0 {
	this := IscsiAuthCreate0{}
	var peeruser string
	this.Peeruser = &peeruser
	var peersecret string
	this.Peersecret = &peersecret
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *IscsiAuthCreate0) GetTag() int32 {
	if o == nil || IsNil(o.Tag) {
		var ret int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthCreate0) GetTagOk() (*int32, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *IscsiAuthCreate0) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given int32 and assigns it to the Tag field.
func (o *IscsiAuthCreate0) SetTag(v int32) {
	o.Tag = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IscsiAuthCreate0) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthCreate0) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IscsiAuthCreate0) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *IscsiAuthCreate0) SetUser(v string) {
	o.User = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *IscsiAuthCreate0) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthCreate0) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *IscsiAuthCreate0) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *IscsiAuthCreate0) SetSecret(v string) {
	o.Secret = &v
}

// GetPeeruser returns the Peeruser field value if set, zero value otherwise.
func (o *IscsiAuthCreate0) GetPeeruser() string {
	if o == nil || IsNil(o.Peeruser) {
		var ret string
		return ret
	}
	return *o.Peeruser
}

// GetPeeruserOk returns a tuple with the Peeruser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthCreate0) GetPeeruserOk() (*string, bool) {
	if o == nil || IsNil(o.Peeruser) {
		return nil, false
	}
	return o.Peeruser, true
}

// HasPeeruser returns a boolean if a field has been set.
func (o *IscsiAuthCreate0) HasPeeruser() bool {
	if o != nil && !IsNil(o.Peeruser) {
		return true
	}

	return false
}

// SetPeeruser gets a reference to the given string and assigns it to the Peeruser field.
func (o *IscsiAuthCreate0) SetPeeruser(v string) {
	o.Peeruser = &v
}

// GetPeersecret returns the Peersecret field value if set, zero value otherwise.
func (o *IscsiAuthCreate0) GetPeersecret() string {
	if o == nil || IsNil(o.Peersecret) {
		var ret string
		return ret
	}
	return *o.Peersecret
}

// GetPeersecretOk returns a tuple with the Peersecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthCreate0) GetPeersecretOk() (*string, bool) {
	if o == nil || IsNil(o.Peersecret) {
		return nil, false
	}
	return o.Peersecret, true
}

// HasPeersecret returns a boolean if a field has been set.
func (o *IscsiAuthCreate0) HasPeersecret() bool {
	if o != nil && !IsNil(o.Peersecret) {
		return true
	}

	return false
}

// SetPeersecret gets a reference to the given string and assigns it to the Peersecret field.
func (o *IscsiAuthCreate0) SetPeersecret(v string) {
	o.Peersecret = &v
}

func (o IscsiAuthCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IscsiAuthCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Peeruser) {
		toSerialize["peeruser"] = o.Peeruser
	}
	if !IsNil(o.Peersecret) {
		toSerialize["peersecret"] = o.Peersecret
	}
	return toSerialize, nil
}

type NullableIscsiAuthCreate0 struct {
	value *IscsiAuthCreate0
	isSet bool
}

func (v NullableIscsiAuthCreate0) Get() *IscsiAuthCreate0 {
	return v.value
}

func (v *NullableIscsiAuthCreate0) Set(val *IscsiAuthCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableIscsiAuthCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableIscsiAuthCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIscsiAuthCreate0(val *IscsiAuthCreate0) *NullableIscsiAuthCreate0 {
	return &NullableIscsiAuthCreate0{value: val, isSet: true}
}

func (v NullableIscsiAuthCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIscsiAuthCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
