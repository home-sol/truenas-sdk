/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolDatasetUnlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolDatasetUnlock{}

// PoolDatasetUnlock struct for PoolDatasetUnlock
type PoolDatasetUnlock struct {
	// Unlock dataset `id` (and its children if `unlock_options.recursive` is `true`). If `id` dataset is not encrypted an exception will be raised. There is one exception: when `id` is a root dataset and `unlock_options.recursive` is specified, encryption validation will not be performed for `id`. This allow unlocking encrypted children for the entire pool `id`.
	Id                   *string             `json:"id,omitempty"`
	UnlockOptions        *PoolDatasetUnlock1 `json:"unlock_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PoolDatasetUnlock PoolDatasetUnlock

// NewPoolDatasetUnlock instantiates a new PoolDatasetUnlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolDatasetUnlock() *PoolDatasetUnlock {
	this := PoolDatasetUnlock{}
	var unlockOptions PoolDatasetUnlock1
	this.UnlockOptions = &unlockOptions
	return &this
}

// NewPoolDatasetUnlockWithDefaults instantiates a new PoolDatasetUnlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolDatasetUnlockWithDefaults() *PoolDatasetUnlock {
	this := PoolDatasetUnlock{}
	var unlockOptions PoolDatasetUnlock1
	this.UnlockOptions = &unlockOptions
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PoolDatasetUnlock) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetUnlock) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PoolDatasetUnlock) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PoolDatasetUnlock) SetId(v string) {
	o.Id = &v
}

// GetUnlockOptions returns the UnlockOptions field value if set, zero value otherwise.
func (o *PoolDatasetUnlock) GetUnlockOptions() PoolDatasetUnlock1 {
	if o == nil || IsNil(o.UnlockOptions) {
		var ret PoolDatasetUnlock1
		return ret
	}
	return *o.UnlockOptions
}

// GetUnlockOptionsOk returns a tuple with the UnlockOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolDatasetUnlock) GetUnlockOptionsOk() (*PoolDatasetUnlock1, bool) {
	if o == nil || IsNil(o.UnlockOptions) {
		return nil, false
	}
	return o.UnlockOptions, true
}

// HasUnlockOptions returns a boolean if a field has been set.
func (o *PoolDatasetUnlock) HasUnlockOptions() bool {
	if o != nil && !IsNil(o.UnlockOptions) {
		return true
	}

	return false
}

// SetUnlockOptions gets a reference to the given PoolDatasetUnlock1 and assigns it to the UnlockOptions field.
func (o *PoolDatasetUnlock) SetUnlockOptions(v PoolDatasetUnlock1) {
	o.UnlockOptions = &v
}

func (o PoolDatasetUnlock) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolDatasetUnlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UnlockOptions) {
		toSerialize["unlock_options"] = o.UnlockOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PoolDatasetUnlock) UnmarshalJSON(bytes []byte) (err error) {
	varPoolDatasetUnlock := _PoolDatasetUnlock{}

	if err = json.Unmarshal(bytes, &varPoolDatasetUnlock); err == nil {
		*o = PoolDatasetUnlock(varPoolDatasetUnlock)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "unlock_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoolDatasetUnlock struct {
	value *PoolDatasetUnlock
	isSet bool
}

func (v NullablePoolDatasetUnlock) Get() *PoolDatasetUnlock {
	return v.value
}

func (v *NullablePoolDatasetUnlock) Set(val *PoolDatasetUnlock) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolDatasetUnlock) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolDatasetUnlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolDatasetUnlock(val *PoolDatasetUnlock) *NullablePoolDatasetUnlock {
	return &NullablePoolDatasetUnlock{value: val, isSet: true}
}

func (v NullablePoolDatasetUnlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolDatasetUnlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
