/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the IscsiAuthGetInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IscsiAuthGetInstance{}

// IscsiAuthGetInstance struct for IscsiAuthGetInstance
type IscsiAuthGetInstance struct {
	Id                   *IscsiAuthGetInstance0 `json:"id,omitempty"`
	QueryOptions         *IscsiAuthGetInstance1 `json:"query-options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IscsiAuthGetInstance IscsiAuthGetInstance

// NewIscsiAuthGetInstance instantiates a new IscsiAuthGetInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIscsiAuthGetInstance() *IscsiAuthGetInstance {
	this := IscsiAuthGetInstance{}
	var queryOptions IscsiAuthGetInstance1
	this.QueryOptions = &queryOptions
	return &this
}

// NewIscsiAuthGetInstanceWithDefaults instantiates a new IscsiAuthGetInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIscsiAuthGetInstanceWithDefaults() *IscsiAuthGetInstance {
	this := IscsiAuthGetInstance{}
	var queryOptions IscsiAuthGetInstance1
	this.QueryOptions = &queryOptions
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IscsiAuthGetInstance) GetId() IscsiAuthGetInstance0 {
	if o == nil || IsNil(o.Id) {
		var ret IscsiAuthGetInstance0
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthGetInstance) GetIdOk() (*IscsiAuthGetInstance0, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IscsiAuthGetInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given IscsiAuthGetInstance0 and assigns it to the Id field.
func (o *IscsiAuthGetInstance) SetId(v IscsiAuthGetInstance0) {
	o.Id = &v
}

// GetQueryOptions returns the QueryOptions field value if set, zero value otherwise.
func (o *IscsiAuthGetInstance) GetQueryOptions() IscsiAuthGetInstance1 {
	if o == nil || IsNil(o.QueryOptions) {
		var ret IscsiAuthGetInstance1
		return ret
	}
	return *o.QueryOptions
}

// GetQueryOptionsOk returns a tuple with the QueryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IscsiAuthGetInstance) GetQueryOptionsOk() (*IscsiAuthGetInstance1, bool) {
	if o == nil || IsNil(o.QueryOptions) {
		return nil, false
	}
	return o.QueryOptions, true
}

// HasQueryOptions returns a boolean if a field has been set.
func (o *IscsiAuthGetInstance) HasQueryOptions() bool {
	if o != nil && !IsNil(o.QueryOptions) {
		return true
	}

	return false
}

// SetQueryOptions gets a reference to the given IscsiAuthGetInstance1 and assigns it to the QueryOptions field.
func (o *IscsiAuthGetInstance) SetQueryOptions(v IscsiAuthGetInstance1) {
	o.QueryOptions = &v
}

func (o IscsiAuthGetInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IscsiAuthGetInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.QueryOptions) {
		toSerialize["query-options"] = o.QueryOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IscsiAuthGetInstance) UnmarshalJSON(bytes []byte) (err error) {
	varIscsiAuthGetInstance := _IscsiAuthGetInstance{}

	if err = json.Unmarshal(bytes, &varIscsiAuthGetInstance); err == nil {
		*o = IscsiAuthGetInstance(varIscsiAuthGetInstance)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "query-options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIscsiAuthGetInstance struct {
	value *IscsiAuthGetInstance
	isSet bool
}

func (v NullableIscsiAuthGetInstance) Get() *IscsiAuthGetInstance {
	return v.value
}

func (v *NullableIscsiAuthGetInstance) Set(val *IscsiAuthGetInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableIscsiAuthGetInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableIscsiAuthGetInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIscsiAuthGetInstance(val *IscsiAuthGetInstance) *NullableIscsiAuthGetInstance {
	return &NullableIscsiAuthGetInstance{value: val, isSet: true}
}

func (v NullableIscsiAuthGetInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIscsiAuthGetInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
