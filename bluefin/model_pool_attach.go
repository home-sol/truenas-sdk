/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolAttach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolAttach{}

// PoolAttach struct for PoolAttach
type PoolAttach struct {
	// For TrueNAS Core/Enterprise platform, if the `oid` pool is passphrase GELI encrypted, `passphrase` must be specified for this operation to succeed.
	Oid                  *int32       `json:"oid,omitempty"`
	PoolAttach           *PoolAttach1 `json:"pool_attach,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PoolAttach PoolAttach

// NewPoolAttach instantiates a new PoolAttach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolAttach() *PoolAttach {
	this := PoolAttach{}
	var poolAttach PoolAttach1
	this.PoolAttach = &poolAttach
	return &this
}

// NewPoolAttachWithDefaults instantiates a new PoolAttach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolAttachWithDefaults() *PoolAttach {
	this := PoolAttach{}
	var poolAttach PoolAttach1
	this.PoolAttach = &poolAttach
	return &this
}

// GetOid returns the Oid field value if set, zero value otherwise.
func (o *PoolAttach) GetOid() int32 {
	if o == nil || IsNil(o.Oid) {
		var ret int32
		return ret
	}
	return *o.Oid
}

// GetOidOk returns a tuple with the Oid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolAttach) GetOidOk() (*int32, bool) {
	if o == nil || IsNil(o.Oid) {
		return nil, false
	}
	return o.Oid, true
}

// HasOid returns a boolean if a field has been set.
func (o *PoolAttach) HasOid() bool {
	if o != nil && !IsNil(o.Oid) {
		return true
	}

	return false
}

// SetOid gets a reference to the given int32 and assigns it to the Oid field.
func (o *PoolAttach) SetOid(v int32) {
	o.Oid = &v
}

// GetPoolAttach returns the PoolAttach field value if set, zero value otherwise.
func (o *PoolAttach) GetPoolAttach() PoolAttach1 {
	if o == nil || IsNil(o.PoolAttach) {
		var ret PoolAttach1
		return ret
	}
	return *o.PoolAttach
}

// GetPoolAttachOk returns a tuple with the PoolAttach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolAttach) GetPoolAttachOk() (*PoolAttach1, bool) {
	if o == nil || IsNil(o.PoolAttach) {
		return nil, false
	}
	return o.PoolAttach, true
}

// HasPoolAttach returns a boolean if a field has been set.
func (o *PoolAttach) HasPoolAttach() bool {
	if o != nil && !IsNil(o.PoolAttach) {
		return true
	}

	return false
}

// SetPoolAttach gets a reference to the given PoolAttach1 and assigns it to the PoolAttach field.
func (o *PoolAttach) SetPoolAttach(v PoolAttach1) {
	o.PoolAttach = &v
}

func (o PoolAttach) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolAttach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Oid) {
		toSerialize["oid"] = o.Oid
	}
	if !IsNil(o.PoolAttach) {
		toSerialize["pool_attach"] = o.PoolAttach
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PoolAttach) UnmarshalJSON(bytes []byte) (err error) {
	varPoolAttach := _PoolAttach{}

	if err = json.Unmarshal(bytes, &varPoolAttach); err == nil {
		*o = PoolAttach(varPoolAttach)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "oid")
		delete(additionalProperties, "pool_attach")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoolAttach struct {
	value *PoolAttach
	isSet bool
}

func (v NullablePoolAttach) Get() *PoolAttach {
	return v.value
}

func (v *NullablePoolAttach) Set(val *PoolAttach) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolAttach) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolAttach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolAttach(val *PoolAttach) *NullablePoolAttach {
	return &NullablePoolAttach{value: val, isSet: true}
}

func (v NullablePoolAttach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolAttach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
