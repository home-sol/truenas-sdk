/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the VmwareCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareCreate0{}

// VmwareCreate0 struct for VmwareCreate0
type VmwareCreate0 struct {
	Datastore  *string `json:"datastore,omitempty"`
	Filesystem *string `json:"filesystem,omitempty"`
	// `hostname` is a valid IP address / hostname of a VMWare host. When clustering, this is the vCenter server for the cluster.
	Hostname *string `json:"hostname,omitempty"`
	// `username` and `password` are the credentials used to authorize access to the VMWare host.
	Password *string `json:"password,omitempty"`
	// `username` and `password` are the credentials used to authorize access to the VMWare host.
	Username *string `json:"username,omitempty"`
}

// NewVmwareCreate0 instantiates a new VmwareCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareCreate0() *VmwareCreate0 {
	this := VmwareCreate0{}
	return &this
}

// NewVmwareCreate0WithDefaults instantiates a new VmwareCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareCreate0WithDefaults() *VmwareCreate0 {
	this := VmwareCreate0{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *VmwareCreate0) GetDatastore() string {
	if o == nil || IsNil(o.Datastore) {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareCreate0) GetDatastoreOk() (*string, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *VmwareCreate0) HasDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *VmwareCreate0) SetDatastore(v string) {
	o.Datastore = &v
}

// GetFilesystem returns the Filesystem field value if set, zero value otherwise.
func (o *VmwareCreate0) GetFilesystem() string {
	if o == nil || IsNil(o.Filesystem) {
		var ret string
		return ret
	}
	return *o.Filesystem
}

// GetFilesystemOk returns a tuple with the Filesystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareCreate0) GetFilesystemOk() (*string, bool) {
	if o == nil || IsNil(o.Filesystem) {
		return nil, false
	}
	return o.Filesystem, true
}

// HasFilesystem returns a boolean if a field has been set.
func (o *VmwareCreate0) HasFilesystem() bool {
	if o != nil && !IsNil(o.Filesystem) {
		return true
	}

	return false
}

// SetFilesystem gets a reference to the given string and assigns it to the Filesystem field.
func (o *VmwareCreate0) SetFilesystem(v string) {
	o.Filesystem = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VmwareCreate0) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareCreate0) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VmwareCreate0) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VmwareCreate0) SetHostname(v string) {
	o.Hostname = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VmwareCreate0) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareCreate0) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VmwareCreate0) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VmwareCreate0) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VmwareCreate0) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareCreate0) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VmwareCreate0) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VmwareCreate0) SetUsername(v string) {
	o.Username = &v
}

func (o VmwareCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !IsNil(o.Filesystem) {
		toSerialize["filesystem"] = o.Filesystem
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableVmwareCreate0 struct {
	value *VmwareCreate0
	isSet bool
}

func (v NullableVmwareCreate0) Get() *VmwareCreate0 {
	return v.value
}

func (v *NullableVmwareCreate0) Set(val *VmwareCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareCreate0(val *VmwareCreate0) *NullableVmwareCreate0 {
	return &NullableVmwareCreate0{value: val, isSet: true}
}

func (v NullableVmwareCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
