/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// GlusterFuseApiService GlusterFuseApi service
type GlusterFuseApiService service

type ApiGlusterFuseIsMountedPostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterFuseApiService
	glusterFuseIsMounted0 *GlusterFuseIsMounted0
}

func (r ApiGlusterFuseIsMountedPostRequest) GlusterFuseIsMounted0(glusterFuseIsMounted0 GlusterFuseIsMounted0) ApiGlusterFuseIsMountedPostRequest {
	r.glusterFuseIsMounted0 = &glusterFuseIsMounted0
	return r
}

func (r ApiGlusterFuseIsMountedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterFuseIsMountedPostExecute(r)
}

/*
GlusterFuseIsMountedPost Method for GlusterFuseIsMountedPost

Check if gluster volume is FUSE mounted locally.

`name` String representing name of the gluster volume

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterFuseIsMountedPostRequest
*/
func (a *GlusterFuseApiService) GlusterFuseIsMountedPost(ctx context.Context) ApiGlusterFuseIsMountedPostRequest {
	return ApiGlusterFuseIsMountedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterFuseApiService) GlusterFuseIsMountedPostExecute(r ApiGlusterFuseIsMountedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterFuseApiService.GlusterFuseIsMountedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/fuse/is_mounted"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterFuseIsMounted0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterFuseMountPostRequest struct {
	ctx               context.Context
	ApiService        *GlusterFuseApiService
	glusterFuseMount0 *GlusterFuseMount0
}

func (r ApiGlusterFuseMountPostRequest) GlusterFuseMount0(glusterFuseMount0 GlusterFuseMount0) ApiGlusterFuseMountPostRequest {
	r.glusterFuseMount0 = &glusterFuseMount0
	return r
}

func (r ApiGlusterFuseMountPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterFuseMountPostExecute(r)
}

/*
GlusterFuseMountPost Method for GlusterFuseMountPost

Mount a gluster volume using the gluster FUSE client.

`name` String representing the name of the gluster volume
`all` Boolean if True locally FUSE mount all detected

	gluster volumes

`raise` Boolean if True raise a CallError if the FUSE mount

	       fails

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterFuseMountPostRequest
*/
func (a *GlusterFuseApiService) GlusterFuseMountPost(ctx context.Context) ApiGlusterFuseMountPostRequest {
	return ApiGlusterFuseMountPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterFuseApiService) GlusterFuseMountPostExecute(r ApiGlusterFuseMountPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterFuseApiService.GlusterFuseMountPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/fuse/mount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterFuseMount0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGlusterFuseUmountPostRequest struct {
	ctx                context.Context
	ApiService         *GlusterFuseApiService
	glusterFuseUmount0 *GlusterFuseUmount0
}

func (r ApiGlusterFuseUmountPostRequest) GlusterFuseUmount0(glusterFuseUmount0 GlusterFuseUmount0) ApiGlusterFuseUmountPostRequest {
	r.glusterFuseUmount0 = &glusterFuseUmount0
	return r
}

func (r ApiGlusterFuseUmountPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterFuseUmountPostExecute(r)
}

/*
GlusterFuseUmountPost Method for GlusterFuseUmountPost

Unmount a locally FUSE mounted gluster volume.

`name` String representing the name of the gluster volume
`all` Boolean if True umount all locally detected FUSE

	mounted gluster volumes

`raise` Boolean if True raise a CallError if the FUSE mount

	       fails

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGlusterFuseUmountPostRequest
*/
func (a *GlusterFuseApiService) GlusterFuseUmountPost(ctx context.Context) ApiGlusterFuseUmountPostRequest {
	return ApiGlusterFuseUmountPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterFuseApiService) GlusterFuseUmountPostExecute(r ApiGlusterFuseUmountPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterFuseApiService.GlusterFuseUmountPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/fuse/umount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterFuseUmount0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
