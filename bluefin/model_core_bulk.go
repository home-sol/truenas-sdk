/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CoreBulk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreBulk{}

// CoreBulk struct for CoreBulk
type CoreBulk struct {
	// Will sequentially call `method` with arguments from the `params` list. For example, running
	Method *string `json:"method,omitempty"`
	// Will sequentially call `method` with arguments from the `params` list. For example, running
	Params               []interface{}  `json:"params,omitempty"`
	Description          NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CoreBulk CoreBulk

// NewCoreBulk instantiates a new CoreBulk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreBulk() *CoreBulk {
	this := CoreBulk{}
	return &this
}

// NewCoreBulkWithDefaults instantiates a new CoreBulk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreBulkWithDefaults() *CoreBulk {
	this := CoreBulk{}
	return &this
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *CoreBulk) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBulk) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *CoreBulk) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *CoreBulk) SetMethod(v string) {
	o.Method = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *CoreBulk) GetParams() []interface{} {
	if o == nil || IsNil(o.Params) {
		var ret []interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreBulk) GetParamsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *CoreBulk) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []interface{} and assigns it to the Params field.
func (o *CoreBulk) SetParams(v []interface{}) {
	o.Params = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CoreBulk) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CoreBulk) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CoreBulk) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CoreBulk) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CoreBulk) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CoreBulk) UnsetDescription() {
	o.Description.Unset()
}

func (o CoreBulk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreBulk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CoreBulk) UnmarshalJSON(bytes []byte) (err error) {
	varCoreBulk := _CoreBulk{}

	if err = json.Unmarshal(bytes, &varCoreBulk); err == nil {
		*o = CoreBulk(varCoreBulk)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "method")
		delete(additionalProperties, "params")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCoreBulk struct {
	value *CoreBulk
	isSet bool
}

func (v NullableCoreBulk) Get() *CoreBulk {
	return v.value
}

func (v *NullableCoreBulk) Set(val *CoreBulk) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreBulk) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreBulk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreBulk(val *CoreBulk) *NullableCoreBulk {
	return &NullableCoreBulk{value: val, isSet: true}
}

func (v NullableCoreBulk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreBulk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
