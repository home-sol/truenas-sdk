/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Topology type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Topology{}

// Topology `topology` is a object which requires at least one `data` entry. All of `data` entries (vdevs) require to be of the same type. Example of `topology`:
type Topology struct {
	Data    []Datavdevs    `json:"data,omitempty"`
	Special []Specialvdevs `json:"special,omitempty"`
	Dedup   []Dedupvdevs   `json:"dedup,omitempty"`
	Cache   []Cachevdevs   `json:"cache,omitempty"`
	Log     []Logvdevs     `json:"log,omitempty"`
	Spares  []string       `json:"spares,omitempty"`
}

// NewTopology instantiates a new Topology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopology() *Topology {
	this := Topology{}
	return &this
}

// NewTopologyWithDefaults instantiates a new Topology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologyWithDefaults() *Topology {
	this := Topology{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Topology) GetData() []Datavdevs {
	if o == nil || IsNil(o.Data) {
		var ret []Datavdevs
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetDataOk() ([]Datavdevs, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Topology) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Datavdevs and assigns it to the Data field.
func (o *Topology) SetData(v []Datavdevs) {
	o.Data = v
}

// GetSpecial returns the Special field value if set, zero value otherwise.
func (o *Topology) GetSpecial() []Specialvdevs {
	if o == nil || IsNil(o.Special) {
		var ret []Specialvdevs
		return ret
	}
	return o.Special
}

// GetSpecialOk returns a tuple with the Special field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetSpecialOk() ([]Specialvdevs, bool) {
	if o == nil || IsNil(o.Special) {
		return nil, false
	}
	return o.Special, true
}

// HasSpecial returns a boolean if a field has been set.
func (o *Topology) HasSpecial() bool {
	if o != nil && !IsNil(o.Special) {
		return true
	}

	return false
}

// SetSpecial gets a reference to the given []Specialvdevs and assigns it to the Special field.
func (o *Topology) SetSpecial(v []Specialvdevs) {
	o.Special = v
}

// GetDedup returns the Dedup field value if set, zero value otherwise.
func (o *Topology) GetDedup() []Dedupvdevs {
	if o == nil || IsNil(o.Dedup) {
		var ret []Dedupvdevs
		return ret
	}
	return o.Dedup
}

// GetDedupOk returns a tuple with the Dedup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetDedupOk() ([]Dedupvdevs, bool) {
	if o == nil || IsNil(o.Dedup) {
		return nil, false
	}
	return o.Dedup, true
}

// HasDedup returns a boolean if a field has been set.
func (o *Topology) HasDedup() bool {
	if o != nil && !IsNil(o.Dedup) {
		return true
	}

	return false
}

// SetDedup gets a reference to the given []Dedupvdevs and assigns it to the Dedup field.
func (o *Topology) SetDedup(v []Dedupvdevs) {
	o.Dedup = v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *Topology) GetCache() []Cachevdevs {
	if o == nil || IsNil(o.Cache) {
		var ret []Cachevdevs
		return ret
	}
	return o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetCacheOk() ([]Cachevdevs, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *Topology) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given []Cachevdevs and assigns it to the Cache field.
func (o *Topology) SetCache(v []Cachevdevs) {
	o.Cache = v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *Topology) GetLog() []Logvdevs {
	if o == nil || IsNil(o.Log) {
		var ret []Logvdevs
		return ret
	}
	return o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetLogOk() ([]Logvdevs, bool) {
	if o == nil || IsNil(o.Log) {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *Topology) HasLog() bool {
	if o != nil && !IsNil(o.Log) {
		return true
	}

	return false
}

// SetLog gets a reference to the given []Logvdevs and assigns it to the Log field.
func (o *Topology) SetLog(v []Logvdevs) {
	o.Log = v
}

// GetSpares returns the Spares field value if set, zero value otherwise.
func (o *Topology) GetSpares() []string {
	if o == nil || IsNil(o.Spares) {
		var ret []string
		return ret
	}
	return o.Spares
}

// GetSparesOk returns a tuple with the Spares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Topology) GetSparesOk() ([]string, bool) {
	if o == nil || IsNil(o.Spares) {
		return nil, false
	}
	return o.Spares, true
}

// HasSpares returns a boolean if a field has been set.
func (o *Topology) HasSpares() bool {
	if o != nil && !IsNil(o.Spares) {
		return true
	}

	return false
}

// SetSpares gets a reference to the given []string and assigns it to the Spares field.
func (o *Topology) SetSpares(v []string) {
	o.Spares = v
}

func (o Topology) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Topology) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Special) {
		toSerialize["special"] = o.Special
	}
	if !IsNil(o.Dedup) {
		toSerialize["dedup"] = o.Dedup
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.Log) {
		toSerialize["log"] = o.Log
	}
	if !IsNil(o.Spares) {
		toSerialize["spares"] = o.Spares
	}
	return toSerialize, nil
}

type NullableTopology struct {
	value *Topology
	isSet bool
}

func (v NullableTopology) Get() *Topology {
	return v.value
}

func (v *NullableTopology) Set(val *Topology) {
	v.value = val
	v.isSet = true
}

func (v NullableTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopology(val *Topology) *NullableTopology {
	return &NullableTopology{value: val, isSet: true}
}

func (v NullableTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
