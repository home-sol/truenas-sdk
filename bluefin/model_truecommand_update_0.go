/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the TruecommandUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TruecommandUpdate0{}

// TruecommandUpdate0 struct for TruecommandUpdate0
type TruecommandUpdate0 struct {
	Enabled *bool          `json:"enabled,omitempty"`
	ApiKey  NullableString `json:"api_key,omitempty"`
}

// NewTruecommandUpdate0 instantiates a new TruecommandUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTruecommandUpdate0() *TruecommandUpdate0 {
	this := TruecommandUpdate0{}
	return &this
}

// NewTruecommandUpdate0WithDefaults instantiates a new TruecommandUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTruecommandUpdate0WithDefaults() *TruecommandUpdate0 {
	this := TruecommandUpdate0{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *TruecommandUpdate0) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TruecommandUpdate0) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *TruecommandUpdate0) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *TruecommandUpdate0) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TruecommandUpdate0) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey.Get()) {
		var ret string
		return ret
	}
	return *o.ApiKey.Get()
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TruecommandUpdate0) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiKey.Get(), o.ApiKey.IsSet()
}

// HasApiKey returns a boolean if a field has been set.
func (o *TruecommandUpdate0) HasApiKey() bool {
	if o != nil && o.ApiKey.IsSet() {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given NullableString and assigns it to the ApiKey field.
func (o *TruecommandUpdate0) SetApiKey(v string) {
	o.ApiKey.Set(&v)
}

// SetApiKeyNil sets the value for ApiKey to be an explicit nil
func (o *TruecommandUpdate0) SetApiKeyNil() {
	o.ApiKey.Set(nil)
}

// UnsetApiKey ensures that no value is present for ApiKey, not even an explicit nil
func (o *TruecommandUpdate0) UnsetApiKey() {
	o.ApiKey.Unset()
}

func (o TruecommandUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TruecommandUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.ApiKey.IsSet() {
		toSerialize["api_key"] = o.ApiKey.Get()
	}
	return toSerialize, nil
}

type NullableTruecommandUpdate0 struct {
	value *TruecommandUpdate0
	isSet bool
}

func (v NullableTruecommandUpdate0) Get() *TruecommandUpdate0 {
	return v.value
}

func (v *NullableTruecommandUpdate0) Set(val *TruecommandUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableTruecommandUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableTruecommandUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTruecommandUpdate0(val *TruecommandUpdate0) *NullableTruecommandUpdate0 {
	return &NullableTruecommandUpdate0{value: val, isSet: true}
}

func (v NullableTruecommandUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTruecommandUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
