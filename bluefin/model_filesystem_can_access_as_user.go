/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemCanAccessAsUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemCanAccessAsUser{}

// FilesystemCanAccessAsUser struct for FilesystemCanAccessAsUser
type FilesystemCanAccessAsUser struct {
	Username             *string                     `json:"username,omitempty"`
	Path                 *string                     `json:"path,omitempty"`
	Permissions          *FilesystemCanAccessAsUser2 `json:"permissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesystemCanAccessAsUser FilesystemCanAccessAsUser

// NewFilesystemCanAccessAsUser instantiates a new FilesystemCanAccessAsUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemCanAccessAsUser() *FilesystemCanAccessAsUser {
	this := FilesystemCanAccessAsUser{}
	var permissions FilesystemCanAccessAsUser2
	this.Permissions = &permissions
	return &this
}

// NewFilesystemCanAccessAsUserWithDefaults instantiates a new FilesystemCanAccessAsUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemCanAccessAsUserWithDefaults() *FilesystemCanAccessAsUser {
	this := FilesystemCanAccessAsUser{}
	var permissions FilesystemCanAccessAsUser2
	this.Permissions = &permissions
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *FilesystemCanAccessAsUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemCanAccessAsUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *FilesystemCanAccessAsUser) SetUsername(v string) {
	o.Username = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FilesystemCanAccessAsUser) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemCanAccessAsUser) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FilesystemCanAccessAsUser) SetPath(v string) {
	o.Path = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *FilesystemCanAccessAsUser) GetPermissions() FilesystemCanAccessAsUser2 {
	if o == nil || IsNil(o.Permissions) {
		var ret FilesystemCanAccessAsUser2
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemCanAccessAsUser) GetPermissionsOk() (*FilesystemCanAccessAsUser2, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *FilesystemCanAccessAsUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given FilesystemCanAccessAsUser2 and assigns it to the Permissions field.
func (o *FilesystemCanAccessAsUser) SetPermissions(v FilesystemCanAccessAsUser2) {
	o.Permissions = &v
}

func (o FilesystemCanAccessAsUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemCanAccessAsUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesystemCanAccessAsUser) UnmarshalJSON(bytes []byte) (err error) {
	varFilesystemCanAccessAsUser := _FilesystemCanAccessAsUser{}

	if err = json.Unmarshal(bytes, &varFilesystemCanAccessAsUser); err == nil {
		*o = FilesystemCanAccessAsUser(varFilesystemCanAccessAsUser)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "path")
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesystemCanAccessAsUser struct {
	value *FilesystemCanAccessAsUser
	isSet bool
}

func (v NullableFilesystemCanAccessAsUser) Get() *FilesystemCanAccessAsUser {
	return v.value
}

func (v *NullableFilesystemCanAccessAsUser) Set(val *FilesystemCanAccessAsUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemCanAccessAsUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemCanAccessAsUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemCanAccessAsUser(val *FilesystemCanAccessAsUser) *NullableFilesystemCanAccessAsUser {
	return &NullableFilesystemCanAccessAsUser{value: val, isSet: true}
}

func (v NullableFilesystemCanAccessAsUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemCanAccessAsUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
