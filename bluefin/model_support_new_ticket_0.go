/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SupportNewTicket0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportNewTicket0{}

// SupportNewTicket0 struct for SupportNewTicket0
type SupportNewTicket0 struct {
	Title       *string `json:"title,omitempty"`
	Body        *string `json:"body,omitempty"`
	Category    *string `json:"category,omitempty"`
	AttachDebug *bool   `json:"attach_debug,omitempty"`
	Token       *string `json:"token,omitempty"`
	Type        *string `json:"type,omitempty"`
	// For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.
	Criticality *string `json:"criticality,omitempty"`
	// For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.
	Environment *string `json:"environment,omitempty"`
	// For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.
	Phone *string `json:"phone,omitempty"`
	// For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.
	Name *string `json:"name,omitempty"`
	// For SCALE `criticality`, `environment`, `phone`, `name` and `email` attributes are not required.
	Email *string  `json:"email,omitempty"`
	Cc    []string `json:"cc,omitempty"`
}

// NewSupportNewTicket0 instantiates a new SupportNewTicket0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportNewTicket0() *SupportNewTicket0 {
	this := SupportNewTicket0{}
	var attachDebug bool
	this.AttachDebug = &attachDebug
	return &this
}

// NewSupportNewTicket0WithDefaults instantiates a new SupportNewTicket0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportNewTicket0WithDefaults() *SupportNewTicket0 {
	this := SupportNewTicket0{}
	var attachDebug bool
	this.AttachDebug = &attachDebug
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SupportNewTicket0) SetTitle(v string) {
	o.Title = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *SupportNewTicket0) SetBody(v string) {
	o.Body = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *SupportNewTicket0) SetCategory(v string) {
	o.Category = &v
}

// GetAttachDebug returns the AttachDebug field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetAttachDebug() bool {
	if o == nil || IsNil(o.AttachDebug) {
		var ret bool
		return ret
	}
	return *o.AttachDebug
}

// GetAttachDebugOk returns a tuple with the AttachDebug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetAttachDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachDebug) {
		return nil, false
	}
	return o.AttachDebug, true
}

// HasAttachDebug returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasAttachDebug() bool {
	if o != nil && !IsNil(o.AttachDebug) {
		return true
	}

	return false
}

// SetAttachDebug gets a reference to the given bool and assigns it to the AttachDebug field.
func (o *SupportNewTicket0) SetAttachDebug(v bool) {
	o.AttachDebug = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SupportNewTicket0) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SupportNewTicket0) SetType(v string) {
	o.Type = &v
}

// GetCriticality returns the Criticality field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetCriticality() string {
	if o == nil || IsNil(o.Criticality) {
		var ret string
		return ret
	}
	return *o.Criticality
}

// GetCriticalityOk returns a tuple with the Criticality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetCriticalityOk() (*string, bool) {
	if o == nil || IsNil(o.Criticality) {
		return nil, false
	}
	return o.Criticality, true
}

// HasCriticality returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasCriticality() bool {
	if o != nil && !IsNil(o.Criticality) {
		return true
	}

	return false
}

// SetCriticality gets a reference to the given string and assigns it to the Criticality field.
func (o *SupportNewTicket0) SetCriticality(v string) {
	o.Criticality = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *SupportNewTicket0) SetEnvironment(v string) {
	o.Environment = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SupportNewTicket0) SetPhone(v string) {
	o.Phone = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SupportNewTicket0) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SupportNewTicket0) SetEmail(v string) {
	o.Email = &v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *SupportNewTicket0) GetCc() []string {
	if o == nil || IsNil(o.Cc) {
		var ret []string
		return ret
	}
	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportNewTicket0) GetCcOk() ([]string, bool) {
	if o == nil || IsNil(o.Cc) {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *SupportNewTicket0) HasCc() bool {
	if o != nil && !IsNil(o.Cc) {
		return true
	}

	return false
}

// SetCc gets a reference to the given []string and assigns it to the Cc field.
func (o *SupportNewTicket0) SetCc(v []string) {
	o.Cc = v
}

func (o SupportNewTicket0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportNewTicket0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.AttachDebug) {
		toSerialize["attach_debug"] = o.AttachDebug
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Criticality) {
		toSerialize["criticality"] = o.Criticality
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Cc) {
		toSerialize["cc"] = o.Cc
	}
	return toSerialize, nil
}

type NullableSupportNewTicket0 struct {
	value *SupportNewTicket0
	isSet bool
}

func (v NullableSupportNewTicket0) Get() *SupportNewTicket0 {
	return v.value
}

func (v *NullableSupportNewTicket0) Set(val *SupportNewTicket0) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportNewTicket0) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportNewTicket0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportNewTicket0(val *SupportNewTicket0) *NullableSupportNewTicket0 {
	return &NullableSupportNewTicket0{value: val, isSet: true}
}

func (v NullableSupportNewTicket0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportNewTicket0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
