/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Brick type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Brick{}

// Brick struct for Brick
type Brick struct {
	PeerName *string `json:"peer_name,omitempty"`
	PeerPath *string `json:"peer_path,omitempty"`
}

// NewBrick instantiates a new Brick object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrick() *Brick {
	this := Brick{}
	return &this
}

// NewBrickWithDefaults instantiates a new Brick object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrickWithDefaults() *Brick {
	this := Brick{}
	return &this
}

// GetPeerName returns the PeerName field value if set, zero value otherwise.
func (o *Brick) GetPeerName() string {
	if o == nil || IsNil(o.PeerName) {
		var ret string
		return ret
	}
	return *o.PeerName
}

// GetPeerNameOk returns a tuple with the PeerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brick) GetPeerNameOk() (*string, bool) {
	if o == nil || IsNil(o.PeerName) {
		return nil, false
	}
	return o.PeerName, true
}

// HasPeerName returns a boolean if a field has been set.
func (o *Brick) HasPeerName() bool {
	if o != nil && !IsNil(o.PeerName) {
		return true
	}

	return false
}

// SetPeerName gets a reference to the given string and assigns it to the PeerName field.
func (o *Brick) SetPeerName(v string) {
	o.PeerName = &v
}

// GetPeerPath returns the PeerPath field value if set, zero value otherwise.
func (o *Brick) GetPeerPath() string {
	if o == nil || IsNil(o.PeerPath) {
		var ret string
		return ret
	}
	return *o.PeerPath
}

// GetPeerPathOk returns a tuple with the PeerPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Brick) GetPeerPathOk() (*string, bool) {
	if o == nil || IsNil(o.PeerPath) {
		return nil, false
	}
	return o.PeerPath, true
}

// HasPeerPath returns a boolean if a field has been set.
func (o *Brick) HasPeerPath() bool {
	if o != nil && !IsNil(o.PeerPath) {
		return true
	}

	return false
}

// SetPeerPath gets a reference to the given string and assigns it to the PeerPath field.
func (o *Brick) SetPeerPath(v string) {
	o.PeerPath = &v
}

func (o Brick) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Brick) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeerName) {
		toSerialize["peer_name"] = o.PeerName
	}
	if !IsNil(o.PeerPath) {
		toSerialize["peer_path"] = o.PeerPath
	}
	return toSerialize, nil
}

type NullableBrick struct {
	value *Brick
	isSet bool
}

func (v NullableBrick) Get() *Brick {
	return v.value
}

func (v *NullableBrick) Set(val *Brick) {
	v.value = val
	v.isSet = true
}

func (v NullableBrick) IsSet() bool {
	return v.isSet
}

func (v *NullableBrick) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrick(val *Brick) *NullableBrick {
	return &NullableBrick{value: val, isSet: true}
}

func (v NullableBrick) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrick) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
