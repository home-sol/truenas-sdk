/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemGetDefaultAcl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemGetDefaultAcl{}

// FilesystemGetDefaultAcl struct for FilesystemGetDefaultAcl
type FilesystemGetDefaultAcl struct {
	AclType              *string                   `json:"acl_type,omitempty"`
	ShareType            *FilesystemGetDefaultAcl1 `json:"share_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FilesystemGetDefaultAcl FilesystemGetDefaultAcl

// NewFilesystemGetDefaultAcl instantiates a new FilesystemGetDefaultAcl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemGetDefaultAcl() *FilesystemGetDefaultAcl {
	this := FilesystemGetDefaultAcl{}
	var aclType string
	this.AclType = &aclType
	var shareType FilesystemGetDefaultAcl1
	this.ShareType = &shareType
	return &this
}

// NewFilesystemGetDefaultAclWithDefaults instantiates a new FilesystemGetDefaultAcl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemGetDefaultAclWithDefaults() *FilesystemGetDefaultAcl {
	this := FilesystemGetDefaultAcl{}
	var aclType string
	this.AclType = &aclType
	var shareType FilesystemGetDefaultAcl1
	this.ShareType = &shareType
	return &this
}

// GetAclType returns the AclType field value if set, zero value otherwise.
func (o *FilesystemGetDefaultAcl) GetAclType() string {
	if o == nil || IsNil(o.AclType) {
		var ret string
		return ret
	}
	return *o.AclType
}

// GetAclTypeOk returns a tuple with the AclType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemGetDefaultAcl) GetAclTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AclType) {
		return nil, false
	}
	return o.AclType, true
}

// HasAclType returns a boolean if a field has been set.
func (o *FilesystemGetDefaultAcl) HasAclType() bool {
	if o != nil && !IsNil(o.AclType) {
		return true
	}

	return false
}

// SetAclType gets a reference to the given string and assigns it to the AclType field.
func (o *FilesystemGetDefaultAcl) SetAclType(v string) {
	o.AclType = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *FilesystemGetDefaultAcl) GetShareType() FilesystemGetDefaultAcl1 {
	if o == nil || IsNil(o.ShareType) {
		var ret FilesystemGetDefaultAcl1
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemGetDefaultAcl) GetShareTypeOk() (*FilesystemGetDefaultAcl1, bool) {
	if o == nil || IsNil(o.ShareType) {
		return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *FilesystemGetDefaultAcl) HasShareType() bool {
	if o != nil && !IsNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given FilesystemGetDefaultAcl1 and assigns it to the ShareType field.
func (o *FilesystemGetDefaultAcl) SetShareType(v FilesystemGetDefaultAcl1) {
	o.ShareType = &v
}

func (o FilesystemGetDefaultAcl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemGetDefaultAcl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AclType) {
		toSerialize["acl_type"] = o.AclType
	}
	if !IsNil(o.ShareType) {
		toSerialize["share_type"] = o.ShareType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FilesystemGetDefaultAcl) UnmarshalJSON(bytes []byte) (err error) {
	varFilesystemGetDefaultAcl := _FilesystemGetDefaultAcl{}

	if err = json.Unmarshal(bytes, &varFilesystemGetDefaultAcl); err == nil {
		*o = FilesystemGetDefaultAcl(varFilesystemGetDefaultAcl)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "acl_type")
		delete(additionalProperties, "share_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFilesystemGetDefaultAcl struct {
	value *FilesystemGetDefaultAcl
	isSet bool
}

func (v NullableFilesystemGetDefaultAcl) Get() *FilesystemGetDefaultAcl {
	return v.value
}

func (v *NullableFilesystemGetDefaultAcl) Set(val *FilesystemGetDefaultAcl) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemGetDefaultAcl) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemGetDefaultAcl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemGetDefaultAcl(val *FilesystemGetDefaultAcl) *NullableFilesystemGetDefaultAcl {
	return &NullableFilesystemGetDefaultAcl{value: val, isSet: true}
}

func (v NullableFilesystemGetDefaultAcl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemGetDefaultAcl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
