/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolSnapshottaskCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolSnapshottaskCreate0{}

// PoolSnapshottaskCreate0 struct for PoolSnapshottaskCreate0
type PoolSnapshottaskCreate0 struct {
	// Create a Periodic Snapshot Task that will take snapshots of specified `dataset` at specified `schedule`.
	Dataset *string `json:"dataset,omitempty"`
	// Recursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets or zvols from the snapshot. Snapshots will be automatically destroyed after a certain amount of time, specified by
	Recursive *bool `json:"recursive,omitempty"`
	// Recursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets or zvols from the snapshot. Snapshots will be automatically destroyed after a certain amount of time, specified by
	Exclude []string `json:"exclude,omitempty"`
	// `lifetime_value` and `lifetime_unit`. If multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot will be kept until the last of these tasks reaches its expiry time.
	LifetimeValue *int32 `json:"lifetime_value,omitempty"`
	// `lifetime_value` and `lifetime_unit`. If multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot will be kept until the last of these tasks reaches its expiry time.
	LifetimeUnit *string `json:"lifetime_unit,omitempty"`
	// Snapshots will be named according to `naming_schema` which is a `strftime`-like template for snapshot name and must contain `%Y`, `%m`, `%d`, `%H` and `%M`.
	NamingSchema *string    `json:"naming_schema,omitempty"`
	Schedule     *Schedule2 `json:"schedule,omitempty"`
	AllowEmpty   *bool      `json:"allow_empty,omitempty"`
	Enabled      *bool      `json:"enabled,omitempty"`
}

// NewPoolSnapshottaskCreate0 instantiates a new PoolSnapshottaskCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolSnapshottaskCreate0() *PoolSnapshottaskCreate0 {
	this := PoolSnapshottaskCreate0{}
	var schedule Schedule2
	this.Schedule = &schedule
	var allowEmpty bool
	this.AllowEmpty = &allowEmpty
	var enabled bool
	this.Enabled = &enabled
	return &this
}

// NewPoolSnapshottaskCreate0WithDefaults instantiates a new PoolSnapshottaskCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolSnapshottaskCreate0WithDefaults() *PoolSnapshottaskCreate0 {
	this := PoolSnapshottaskCreate0{}
	var schedule Schedule2
	this.Schedule = &schedule
	var allowEmpty bool
	this.AllowEmpty = &allowEmpty
	var enabled bool
	this.Enabled = &enabled
	return &this
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetDataset() string {
	if o == nil || IsNil(o.Dataset) {
		var ret string
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetDatasetOk() (*string, bool) {
	if o == nil || IsNil(o.Dataset) {
		return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasDataset() bool {
	if o != nil && !IsNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given string and assigns it to the Dataset field.
func (o *PoolSnapshottaskCreate0) SetDataset(v string) {
	o.Dataset = &v
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *PoolSnapshottaskCreate0) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetExclude() []string {
	if o == nil || IsNil(o.Exclude) {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *PoolSnapshottaskCreate0) SetExclude(v []string) {
	o.Exclude = v
}

// GetLifetimeValue returns the LifetimeValue field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetLifetimeValue() int32 {
	if o == nil || IsNil(o.LifetimeValue) {
		var ret int32
		return ret
	}
	return *o.LifetimeValue
}

// GetLifetimeValueOk returns a tuple with the LifetimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetLifetimeValueOk() (*int32, bool) {
	if o == nil || IsNil(o.LifetimeValue) {
		return nil, false
	}
	return o.LifetimeValue, true
}

// HasLifetimeValue returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasLifetimeValue() bool {
	if o != nil && !IsNil(o.LifetimeValue) {
		return true
	}

	return false
}

// SetLifetimeValue gets a reference to the given int32 and assigns it to the LifetimeValue field.
func (o *PoolSnapshottaskCreate0) SetLifetimeValue(v int32) {
	o.LifetimeValue = &v
}

// GetLifetimeUnit returns the LifetimeUnit field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetLifetimeUnit() string {
	if o == nil || IsNil(o.LifetimeUnit) {
		var ret string
		return ret
	}
	return *o.LifetimeUnit
}

// GetLifetimeUnitOk returns a tuple with the LifetimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetLifetimeUnitOk() (*string, bool) {
	if o == nil || IsNil(o.LifetimeUnit) {
		return nil, false
	}
	return o.LifetimeUnit, true
}

// HasLifetimeUnit returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasLifetimeUnit() bool {
	if o != nil && !IsNil(o.LifetimeUnit) {
		return true
	}

	return false
}

// SetLifetimeUnit gets a reference to the given string and assigns it to the LifetimeUnit field.
func (o *PoolSnapshottaskCreate0) SetLifetimeUnit(v string) {
	o.LifetimeUnit = &v
}

// GetNamingSchema returns the NamingSchema field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetNamingSchema() string {
	if o == nil || IsNil(o.NamingSchema) {
		var ret string
		return ret
	}
	return *o.NamingSchema
}

// GetNamingSchemaOk returns a tuple with the NamingSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetNamingSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.NamingSchema) {
		return nil, false
	}
	return o.NamingSchema, true
}

// HasNamingSchema returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasNamingSchema() bool {
	if o != nil && !IsNil(o.NamingSchema) {
		return true
	}

	return false
}

// SetNamingSchema gets a reference to the given string and assigns it to the NamingSchema field.
func (o *PoolSnapshottaskCreate0) SetNamingSchema(v string) {
	o.NamingSchema = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetSchedule() Schedule2 {
	if o == nil || IsNil(o.Schedule) {
		var ret Schedule2
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetScheduleOk() (*Schedule2, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule2 and assigns it to the Schedule field.
func (o *PoolSnapshottaskCreate0) SetSchedule(v Schedule2) {
	o.Schedule = &v
}

// GetAllowEmpty returns the AllowEmpty field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetAllowEmpty() bool {
	if o == nil || IsNil(o.AllowEmpty) {
		var ret bool
		return ret
	}
	return *o.AllowEmpty
}

// GetAllowEmptyOk returns a tuple with the AllowEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetAllowEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowEmpty) {
		return nil, false
	}
	return o.AllowEmpty, true
}

// HasAllowEmpty returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasAllowEmpty() bool {
	if o != nil && !IsNil(o.AllowEmpty) {
		return true
	}

	return false
}

// SetAllowEmpty gets a reference to the given bool and assigns it to the AllowEmpty field.
func (o *PoolSnapshottaskCreate0) SetAllowEmpty(v bool) {
	o.AllowEmpty = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PoolSnapshottaskCreate0) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolSnapshottaskCreate0) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PoolSnapshottaskCreate0) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PoolSnapshottaskCreate0) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o PoolSnapshottaskCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolSnapshottaskCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dataset) {
		toSerialize["dataset"] = o.Dataset
	}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.LifetimeValue) {
		toSerialize["lifetime_value"] = o.LifetimeValue
	}
	if !IsNil(o.LifetimeUnit) {
		toSerialize["lifetime_unit"] = o.LifetimeUnit
	}
	if !IsNil(o.NamingSchema) {
		toSerialize["naming_schema"] = o.NamingSchema
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.AllowEmpty) {
		toSerialize["allow_empty"] = o.AllowEmpty
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullablePoolSnapshottaskCreate0 struct {
	value *PoolSnapshottaskCreate0
	isSet bool
}

func (v NullablePoolSnapshottaskCreate0) Get() *PoolSnapshottaskCreate0 {
	return v.value
}

func (v *NullablePoolSnapshottaskCreate0) Set(val *PoolSnapshottaskCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolSnapshottaskCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolSnapshottaskCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolSnapshottaskCreate0(val *PoolSnapshottaskCreate0) *NullablePoolSnapshottaskCreate0 {
	return &NullablePoolSnapshottaskCreate0{value: val, isSet: true}
}

func (v NullablePoolSnapshottaskCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolSnapshottaskCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
