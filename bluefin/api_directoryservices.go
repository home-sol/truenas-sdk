/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// DirectoryservicesApiService DirectoryservicesApi service
type DirectoryservicesApiService service

type ApiDirectoryservicesCacheRefreshGetRequest struct {
	ctx        context.Context
	ApiService *DirectoryservicesApiService
}

func (r ApiDirectoryservicesCacheRefreshGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DirectoryservicesCacheRefreshGetExecute(r)
}

/*
DirectoryservicesCacheRefreshGet Method for DirectoryservicesCacheRefreshGet

This method refreshes the directory services cache for users and groups that is
used as a backing for `user.query` and `group.query` methods. The first cache fill in
an Active Directory domain may take a significant amount of time to complete and
so it is performed as within a job. The most likely situation in which a user may
desire to refresh the directory services cache is after new users or groups  to a remote
directory server with the intention to have said users or groups appear in the
results of the aforementioned account-related methods.

A cache refresh is not required in order to use newly-added users and groups for in
permissions and ACL related methods. Likewise, a cache refresh will not resolve issues
with users being unable to authenticate to shares.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDirectoryservicesCacheRefreshGetRequest
*/
func (a *DirectoryservicesApiService) DirectoryservicesCacheRefreshGet(ctx context.Context) ApiDirectoryservicesCacheRefreshGetRequest {
	return ApiDirectoryservicesCacheRefreshGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DirectoryservicesApiService) DirectoryservicesCacheRefreshGetExecute(r ApiDirectoryservicesCacheRefreshGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryservicesApiService.DirectoryservicesCacheRefreshGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directoryservices/cache_refresh"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDirectoryservicesGetStateGetRequest struct {
	ctx        context.Context
	ApiService *DirectoryservicesApiService
}

func (r ApiDirectoryservicesGetStateGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DirectoryservicesGetStateGetExecute(r)
}

/*
DirectoryservicesGetStateGet Method for DirectoryservicesGetStateGet

`DISABLED` Directory Service is disabled.

`FAULTED` Directory Service is enabled, but not HEALTHY. Review logs and generated alert
messages to debug the issue causing the service to be in a FAULTED state.

`LEAVING` Directory Service is in process of stopping.

`JOINING` Directory Service is in process of starting.

`HEALTHY` Directory Service is enabled, and last status check has passed.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDirectoryservicesGetStateGetRequest
*/
func (a *DirectoryservicesApiService) DirectoryservicesGetStateGet(ctx context.Context) ApiDirectoryservicesGetStateGetRequest {
	return ApiDirectoryservicesGetStateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DirectoryservicesApiService) DirectoryservicesGetStateGetExecute(r ApiDirectoryservicesGetStateGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectoryservicesApiService.DirectoryservicesGetStateGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directoryservices/get_state"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
