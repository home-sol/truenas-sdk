/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CertificateCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateCreate0{}

// CertificateCreate0 struct for CertificateCreate0
type CertificateCreate0 struct {
	Tos              *bool                  `json:"tos,omitempty"`
	DnsMapping       map[string]interface{} `json:"dns_mapping,omitempty"`
	CsrId            *int32                 `json:"csr_id,omitempty"`
	Signedby         *int32                 `json:"signedby,omitempty"`
	KeyLength        *int32                 `json:"key_length,omitempty"`
	RenewDays        *int32                 `json:"renew_days,omitempty"`
	Type             *int32                 `json:"type,omitempty"`
	Lifetime         *int32                 `json:"lifetime,omitempty"`
	Serial           *int32                 `json:"serial,omitempty"`
	AcmeDirectoryUri *string                `json:"acme_directory_uri,omitempty"`
	Certificate      *string                `json:"certificate,omitempty"`
	City             *string                `json:"city,omitempty"`
	Common           NullableString         `json:"common,omitempty"`
	Country          *string                `json:"country,omitempty"`
	CSR              *string                `json:"CSR,omitempty"`
	// `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, then default to using \"BrainpoolP384R1\" curve.
	EcCurve *string `json:"ec_curve,omitempty"`
	Email   *string `json:"email,omitempty"`
	// `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, then default to using \"BrainpoolP384R1\" curve.
	KeyType            *string `json:"key_type,omitempty"`
	Name               *string `json:"name,omitempty"`
	Organization       *string `json:"organization,omitempty"`
	OrganizationalUnit *string `json:"organizational_unit,omitempty"`
	Passphrase         *string `json:"passphrase,omitempty"`
	Privatekey         *string `json:"privatekey,omitempty"`
	State              *string `json:"state,omitempty"`
	// Certificates are classified under following types and the necessary keywords to be passed for `create_type` attribute to create the respective type of certificate A type is selected by the Certificate Service based on `create_type`. The rest of the values in `data` are validated accordingly and finally a certificate is made based on the selected type.
	CreateType      *string         `json:"create_type,omitempty"`
	DigestAlgorithm *string         `json:"digest_algorithm,omitempty"`
	San             []string        `json:"san,omitempty"`
	CertExtensions  *CertExtensions `json:"cert_extensions,omitempty"`
}

// NewCertificateCreate0 instantiates a new CertificateCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateCreate0() *CertificateCreate0 {
	this := CertificateCreate0{}
	var ecCurve string
	this.EcCurve = &ecCurve
	var keyType string
	this.KeyType = &keyType
	var certExtensions CertExtensions
	this.CertExtensions = &certExtensions
	return &this
}

// NewCertificateCreate0WithDefaults instantiates a new CertificateCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateCreate0WithDefaults() *CertificateCreate0 {
	this := CertificateCreate0{}
	var ecCurve string
	this.EcCurve = &ecCurve
	var keyType string
	this.KeyType = &keyType
	var certExtensions CertExtensions
	this.CertExtensions = &certExtensions
	return &this
}

// GetTos returns the Tos field value if set, zero value otherwise.
func (o *CertificateCreate0) GetTos() bool {
	if o == nil || IsNil(o.Tos) {
		var ret bool
		return ret
	}
	return *o.Tos
}

// GetTosOk returns a tuple with the Tos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetTosOk() (*bool, bool) {
	if o == nil || IsNil(o.Tos) {
		return nil, false
	}
	return o.Tos, true
}

// HasTos returns a boolean if a field has been set.
func (o *CertificateCreate0) HasTos() bool {
	if o != nil && !IsNil(o.Tos) {
		return true
	}

	return false
}

// SetTos gets a reference to the given bool and assigns it to the Tos field.
func (o *CertificateCreate0) SetTos(v bool) {
	o.Tos = &v
}

// GetDnsMapping returns the DnsMapping field value if set, zero value otherwise.
func (o *CertificateCreate0) GetDnsMapping() map[string]interface{} {
	if o == nil || IsNil(o.DnsMapping) {
		var ret map[string]interface{}
		return ret
	}
	return o.DnsMapping
}

// GetDnsMappingOk returns a tuple with the DnsMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetDnsMappingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DnsMapping) {
		return map[string]interface{}{}, false
	}
	return o.DnsMapping, true
}

// HasDnsMapping returns a boolean if a field has been set.
func (o *CertificateCreate0) HasDnsMapping() bool {
	if o != nil && !IsNil(o.DnsMapping) {
		return true
	}

	return false
}

// SetDnsMapping gets a reference to the given map[string]interface{} and assigns it to the DnsMapping field.
func (o *CertificateCreate0) SetDnsMapping(v map[string]interface{}) {
	o.DnsMapping = v
}

// GetCsrId returns the CsrId field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCsrId() int32 {
	if o == nil || IsNil(o.CsrId) {
		var ret int32
		return ret
	}
	return *o.CsrId
}

// GetCsrIdOk returns a tuple with the CsrId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCsrIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CsrId) {
		return nil, false
	}
	return o.CsrId, true
}

// HasCsrId returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCsrId() bool {
	if o != nil && !IsNil(o.CsrId) {
		return true
	}

	return false
}

// SetCsrId gets a reference to the given int32 and assigns it to the CsrId field.
func (o *CertificateCreate0) SetCsrId(v int32) {
	o.CsrId = &v
}

// GetSignedby returns the Signedby field value if set, zero value otherwise.
func (o *CertificateCreate0) GetSignedby() int32 {
	if o == nil || IsNil(o.Signedby) {
		var ret int32
		return ret
	}
	return *o.Signedby
}

// GetSignedbyOk returns a tuple with the Signedby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetSignedbyOk() (*int32, bool) {
	if o == nil || IsNil(o.Signedby) {
		return nil, false
	}
	return o.Signedby, true
}

// HasSignedby returns a boolean if a field has been set.
func (o *CertificateCreate0) HasSignedby() bool {
	if o != nil && !IsNil(o.Signedby) {
		return true
	}

	return false
}

// SetSignedby gets a reference to the given int32 and assigns it to the Signedby field.
func (o *CertificateCreate0) SetSignedby(v int32) {
	o.Signedby = &v
}

// GetKeyLength returns the KeyLength field value if set, zero value otherwise.
func (o *CertificateCreate0) GetKeyLength() int32 {
	if o == nil || IsNil(o.KeyLength) {
		var ret int32
		return ret
	}
	return *o.KeyLength
}

// GetKeyLengthOk returns a tuple with the KeyLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetKeyLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.KeyLength) {
		return nil, false
	}
	return o.KeyLength, true
}

// HasKeyLength returns a boolean if a field has been set.
func (o *CertificateCreate0) HasKeyLength() bool {
	if o != nil && !IsNil(o.KeyLength) {
		return true
	}

	return false
}

// SetKeyLength gets a reference to the given int32 and assigns it to the KeyLength field.
func (o *CertificateCreate0) SetKeyLength(v int32) {
	o.KeyLength = &v
}

// GetRenewDays returns the RenewDays field value if set, zero value otherwise.
func (o *CertificateCreate0) GetRenewDays() int32 {
	if o == nil || IsNil(o.RenewDays) {
		var ret int32
		return ret
	}
	return *o.RenewDays
}

// GetRenewDaysOk returns a tuple with the RenewDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetRenewDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.RenewDays) {
		return nil, false
	}
	return o.RenewDays, true
}

// HasRenewDays returns a boolean if a field has been set.
func (o *CertificateCreate0) HasRenewDays() bool {
	if o != nil && !IsNil(o.RenewDays) {
		return true
	}

	return false
}

// SetRenewDays gets a reference to the given int32 and assigns it to the RenewDays field.
func (o *CertificateCreate0) SetRenewDays(v int32) {
	o.RenewDays = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CertificateCreate0) GetType() int32 {
	if o == nil || IsNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificateCreate0) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *CertificateCreate0) SetType(v int32) {
	o.Type = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *CertificateCreate0) GetLifetime() int32 {
	if o == nil || IsNil(o.Lifetime) {
		var ret int32
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetLifetimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *CertificateCreate0) HasLifetime() bool {
	if o != nil && !IsNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given int32 and assigns it to the Lifetime field.
func (o *CertificateCreate0) SetLifetime(v int32) {
	o.Lifetime = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *CertificateCreate0) GetSerial() int32 {
	if o == nil || IsNil(o.Serial) {
		var ret int32
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetSerialOk() (*int32, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *CertificateCreate0) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given int32 and assigns it to the Serial field.
func (o *CertificateCreate0) SetSerial(v int32) {
	o.Serial = &v
}

// GetAcmeDirectoryUri returns the AcmeDirectoryUri field value if set, zero value otherwise.
func (o *CertificateCreate0) GetAcmeDirectoryUri() string {
	if o == nil || IsNil(o.AcmeDirectoryUri) {
		var ret string
		return ret
	}
	return *o.AcmeDirectoryUri
}

// GetAcmeDirectoryUriOk returns a tuple with the AcmeDirectoryUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetAcmeDirectoryUriOk() (*string, bool) {
	if o == nil || IsNil(o.AcmeDirectoryUri) {
		return nil, false
	}
	return o.AcmeDirectoryUri, true
}

// HasAcmeDirectoryUri returns a boolean if a field has been set.
func (o *CertificateCreate0) HasAcmeDirectoryUri() bool {
	if o != nil && !IsNil(o.AcmeDirectoryUri) {
		return true
	}

	return false
}

// SetAcmeDirectoryUri gets a reference to the given string and assigns it to the AcmeDirectoryUri field.
func (o *CertificateCreate0) SetAcmeDirectoryUri(v string) {
	o.AcmeDirectoryUri = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateCreate0) SetCertificate(v string) {
	o.Certificate = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CertificateCreate0) SetCity(v string) {
	o.City = &v
}

// GetCommon returns the Common field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateCreate0) GetCommon() string {
	if o == nil || IsNil(o.Common.Get()) {
		var ret string
		return ret
	}
	return *o.Common.Get()
}

// GetCommonOk returns a tuple with the Common field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateCreate0) GetCommonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Common.Get(), o.Common.IsSet()
}

// HasCommon returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCommon() bool {
	if o != nil && o.Common.IsSet() {
		return true
	}

	return false
}

// SetCommon gets a reference to the given NullableString and assigns it to the Common field.
func (o *CertificateCreate0) SetCommon(v string) {
	o.Common.Set(&v)
}

// SetCommonNil sets the value for Common to be an explicit nil
func (o *CertificateCreate0) SetCommonNil() {
	o.Common.Set(nil)
}

// UnsetCommon ensures that no value is present for Common, not even an explicit nil
func (o *CertificateCreate0) UnsetCommon() {
	o.Common.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CertificateCreate0) SetCountry(v string) {
	o.Country = &v
}

// GetCSR returns the CSR field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCSR() string {
	if o == nil || IsNil(o.CSR) {
		var ret string
		return ret
	}
	return *o.CSR
}

// GetCSROk returns a tuple with the CSR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCSROk() (*string, bool) {
	if o == nil || IsNil(o.CSR) {
		return nil, false
	}
	return o.CSR, true
}

// HasCSR returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCSR() bool {
	if o != nil && !IsNil(o.CSR) {
		return true
	}

	return false
}

// SetCSR gets a reference to the given string and assigns it to the CSR field.
func (o *CertificateCreate0) SetCSR(v string) {
	o.CSR = &v
}

// GetEcCurve returns the EcCurve field value if set, zero value otherwise.
func (o *CertificateCreate0) GetEcCurve() string {
	if o == nil || IsNil(o.EcCurve) {
		var ret string
		return ret
	}
	return *o.EcCurve
}

// GetEcCurveOk returns a tuple with the EcCurve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetEcCurveOk() (*string, bool) {
	if o == nil || IsNil(o.EcCurve) {
		return nil, false
	}
	return o.EcCurve, true
}

// HasEcCurve returns a boolean if a field has been set.
func (o *CertificateCreate0) HasEcCurve() bool {
	if o != nil && !IsNil(o.EcCurve) {
		return true
	}

	return false
}

// SetEcCurve gets a reference to the given string and assigns it to the EcCurve field.
func (o *CertificateCreate0) SetEcCurve(v string) {
	o.EcCurve = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CertificateCreate0) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CertificateCreate0) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CertificateCreate0) SetEmail(v string) {
	o.Email = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *CertificateCreate0) GetKeyType() string {
	if o == nil || IsNil(o.KeyType) {
		var ret string
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetKeyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyType) {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *CertificateCreate0) HasKeyType() bool {
	if o != nil && !IsNil(o.KeyType) {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given string and assigns it to the KeyType field.
func (o *CertificateCreate0) SetKeyType(v string) {
	o.KeyType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificateCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificateCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificateCreate0) SetName(v string) {
	o.Name = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *CertificateCreate0) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *CertificateCreate0) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *CertificateCreate0) SetOrganization(v string) {
	o.Organization = &v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *CertificateCreate0) GetOrganizationalUnit() string {
	if o == nil || IsNil(o.OrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetOrganizationalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *CertificateCreate0) HasOrganizationalUnit() bool {
	if o != nil && !IsNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given string and assigns it to the OrganizationalUnit field.
func (o *CertificateCreate0) SetOrganizationalUnit(v string) {
	o.OrganizationalUnit = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *CertificateCreate0) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *CertificateCreate0) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *CertificateCreate0) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetPrivatekey returns the Privatekey field value if set, zero value otherwise.
func (o *CertificateCreate0) GetPrivatekey() string {
	if o == nil || IsNil(o.Privatekey) {
		var ret string
		return ret
	}
	return *o.Privatekey
}

// GetPrivatekeyOk returns a tuple with the Privatekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetPrivatekeyOk() (*string, bool) {
	if o == nil || IsNil(o.Privatekey) {
		return nil, false
	}
	return o.Privatekey, true
}

// HasPrivatekey returns a boolean if a field has been set.
func (o *CertificateCreate0) HasPrivatekey() bool {
	if o != nil && !IsNil(o.Privatekey) {
		return true
	}

	return false
}

// SetPrivatekey gets a reference to the given string and assigns it to the Privatekey field.
func (o *CertificateCreate0) SetPrivatekey(v string) {
	o.Privatekey = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CertificateCreate0) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CertificateCreate0) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CertificateCreate0) SetState(v string) {
	o.State = &v
}

// GetCreateType returns the CreateType field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCreateType() string {
	if o == nil || IsNil(o.CreateType) {
		var ret string
		return ret
	}
	return *o.CreateType
}

// GetCreateTypeOk returns a tuple with the CreateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCreateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateType) {
		return nil, false
	}
	return o.CreateType, true
}

// HasCreateType returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCreateType() bool {
	if o != nil && !IsNil(o.CreateType) {
		return true
	}

	return false
}

// SetCreateType gets a reference to the given string and assigns it to the CreateType field.
func (o *CertificateCreate0) SetCreateType(v string) {
	o.CreateType = &v
}

// GetDigestAlgorithm returns the DigestAlgorithm field value if set, zero value otherwise.
func (o *CertificateCreate0) GetDigestAlgorithm() string {
	if o == nil || IsNil(o.DigestAlgorithm) {
		var ret string
		return ret
	}
	return *o.DigestAlgorithm
}

// GetDigestAlgorithmOk returns a tuple with the DigestAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetDigestAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.DigestAlgorithm) {
		return nil, false
	}
	return o.DigestAlgorithm, true
}

// HasDigestAlgorithm returns a boolean if a field has been set.
func (o *CertificateCreate0) HasDigestAlgorithm() bool {
	if o != nil && !IsNil(o.DigestAlgorithm) {
		return true
	}

	return false
}

// SetDigestAlgorithm gets a reference to the given string and assigns it to the DigestAlgorithm field.
func (o *CertificateCreate0) SetDigestAlgorithm(v string) {
	o.DigestAlgorithm = &v
}

// GetSan returns the San field value if set, zero value otherwise.
func (o *CertificateCreate0) GetSan() []string {
	if o == nil || IsNil(o.San) {
		var ret []string
		return ret
	}
	return o.San
}

// GetSanOk returns a tuple with the San field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetSanOk() ([]string, bool) {
	if o == nil || IsNil(o.San) {
		return nil, false
	}
	return o.San, true
}

// HasSan returns a boolean if a field has been set.
func (o *CertificateCreate0) HasSan() bool {
	if o != nil && !IsNil(o.San) {
		return true
	}

	return false
}

// SetSan gets a reference to the given []string and assigns it to the San field.
func (o *CertificateCreate0) SetSan(v []string) {
	o.San = v
}

// GetCertExtensions returns the CertExtensions field value if set, zero value otherwise.
func (o *CertificateCreate0) GetCertExtensions() CertExtensions {
	if o == nil || IsNil(o.CertExtensions) {
		var ret CertExtensions
		return ret
	}
	return *o.CertExtensions
}

// GetCertExtensionsOk returns a tuple with the CertExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCreate0) GetCertExtensionsOk() (*CertExtensions, bool) {
	if o == nil || IsNil(o.CertExtensions) {
		return nil, false
	}
	return o.CertExtensions, true
}

// HasCertExtensions returns a boolean if a field has been set.
func (o *CertificateCreate0) HasCertExtensions() bool {
	if o != nil && !IsNil(o.CertExtensions) {
		return true
	}

	return false
}

// SetCertExtensions gets a reference to the given CertExtensions and assigns it to the CertExtensions field.
func (o *CertificateCreate0) SetCertExtensions(v CertExtensions) {
	o.CertExtensions = &v
}

func (o CertificateCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tos) {
		toSerialize["tos"] = o.Tos
	}
	if !IsNil(o.DnsMapping) {
		toSerialize["dns_mapping"] = o.DnsMapping
	}
	if !IsNil(o.CsrId) {
		toSerialize["csr_id"] = o.CsrId
	}
	if !IsNil(o.Signedby) {
		toSerialize["signedby"] = o.Signedby
	}
	if !IsNil(o.KeyLength) {
		toSerialize["key_length"] = o.KeyLength
	}
	if !IsNil(o.RenewDays) {
		toSerialize["renew_days"] = o.RenewDays
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.AcmeDirectoryUri) {
		toSerialize["acme_directory_uri"] = o.AcmeDirectoryUri
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if o.Common.IsSet() {
		toSerialize["common"] = o.Common.Get()
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CSR) {
		toSerialize["CSR"] = o.CSR
	}
	if !IsNil(o.EcCurve) {
		toSerialize["ec_curve"] = o.EcCurve
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.KeyType) {
		toSerialize["key_type"] = o.KeyType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.OrganizationalUnit) {
		toSerialize["organizational_unit"] = o.OrganizationalUnit
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.Privatekey) {
		toSerialize["privatekey"] = o.Privatekey
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.CreateType) {
		toSerialize["create_type"] = o.CreateType
	}
	if !IsNil(o.DigestAlgorithm) {
		toSerialize["digest_algorithm"] = o.DigestAlgorithm
	}
	if !IsNil(o.San) {
		toSerialize["san"] = o.San
	}
	if !IsNil(o.CertExtensions) {
		toSerialize["cert_extensions"] = o.CertExtensions
	}
	return toSerialize, nil
}

type NullableCertificateCreate0 struct {
	value *CertificateCreate0
	isSet bool
}

func (v NullableCertificateCreate0) Get() *CertificateCreate0 {
	return v.value
}

func (v *NullableCertificateCreate0) Set(val *CertificateCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateCreate0(val *CertificateCreate0) *NullableCertificateCreate0 {
	return &NullableCertificateCreate0{value: val, isSet: true}
}

func (v NullableCertificateCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
