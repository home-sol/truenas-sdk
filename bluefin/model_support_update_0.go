/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the SupportUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportUpdate0{}

// SupportUpdate0 struct for SupportUpdate0
type SupportUpdate0 struct {
	Enabled        NullableBool `json:"enabled,omitempty"`
	Name           *string      `json:"name,omitempty"`
	Title          *string      `json:"title,omitempty"`
	Email          *string      `json:"email,omitempty"`
	Phone          *string      `json:"phone,omitempty"`
	SecondaryName  *string      `json:"secondary_name,omitempty"`
	SecondaryTitle *string      `json:"secondary_title,omitempty"`
	SecondaryEmail *string      `json:"secondary_email,omitempty"`
	SecondaryPhone *string      `json:"secondary_phone,omitempty"`
}

// NewSupportUpdate0 instantiates a new SupportUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportUpdate0() *SupportUpdate0 {
	this := SupportUpdate0{}
	return &this
}

// NewSupportUpdate0WithDefaults instantiates a new SupportUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportUpdate0WithDefaults() *SupportUpdate0 {
	this := SupportUpdate0{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportUpdate0) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportUpdate0) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *SupportUpdate0) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *SupportUpdate0) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *SupportUpdate0) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *SupportUpdate0) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SupportUpdate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SupportUpdate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SupportUpdate0) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SupportUpdate0) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SupportUpdate0) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SupportUpdate0) SetTitle(v string) {
	o.Title = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SupportUpdate0) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SupportUpdate0) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SupportUpdate0) SetEmail(v string) {
	o.Email = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SupportUpdate0) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SupportUpdate0) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SupportUpdate0) SetPhone(v string) {
	o.Phone = &v
}

// GetSecondaryName returns the SecondaryName field value if set, zero value otherwise.
func (o *SupportUpdate0) GetSecondaryName() string {
	if o == nil || IsNil(o.SecondaryName) {
		var ret string
		return ret
	}
	return *o.SecondaryName
}

// GetSecondaryNameOk returns a tuple with the SecondaryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetSecondaryNameOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryName) {
		return nil, false
	}
	return o.SecondaryName, true
}

// HasSecondaryName returns a boolean if a field has been set.
func (o *SupportUpdate0) HasSecondaryName() bool {
	if o != nil && !IsNil(o.SecondaryName) {
		return true
	}

	return false
}

// SetSecondaryName gets a reference to the given string and assigns it to the SecondaryName field.
func (o *SupportUpdate0) SetSecondaryName(v string) {
	o.SecondaryName = &v
}

// GetSecondaryTitle returns the SecondaryTitle field value if set, zero value otherwise.
func (o *SupportUpdate0) GetSecondaryTitle() string {
	if o == nil || IsNil(o.SecondaryTitle) {
		var ret string
		return ret
	}
	return *o.SecondaryTitle
}

// GetSecondaryTitleOk returns a tuple with the SecondaryTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetSecondaryTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryTitle) {
		return nil, false
	}
	return o.SecondaryTitle, true
}

// HasSecondaryTitle returns a boolean if a field has been set.
func (o *SupportUpdate0) HasSecondaryTitle() bool {
	if o != nil && !IsNil(o.SecondaryTitle) {
		return true
	}

	return false
}

// SetSecondaryTitle gets a reference to the given string and assigns it to the SecondaryTitle field.
func (o *SupportUpdate0) SetSecondaryTitle(v string) {
	o.SecondaryTitle = &v
}

// GetSecondaryEmail returns the SecondaryEmail field value if set, zero value otherwise.
func (o *SupportUpdate0) GetSecondaryEmail() string {
	if o == nil || IsNil(o.SecondaryEmail) {
		var ret string
		return ret
	}
	return *o.SecondaryEmail
}

// GetSecondaryEmailOk returns a tuple with the SecondaryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetSecondaryEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryEmail) {
		return nil, false
	}
	return o.SecondaryEmail, true
}

// HasSecondaryEmail returns a boolean if a field has been set.
func (o *SupportUpdate0) HasSecondaryEmail() bool {
	if o != nil && !IsNil(o.SecondaryEmail) {
		return true
	}

	return false
}

// SetSecondaryEmail gets a reference to the given string and assigns it to the SecondaryEmail field.
func (o *SupportUpdate0) SetSecondaryEmail(v string) {
	o.SecondaryEmail = &v
}

// GetSecondaryPhone returns the SecondaryPhone field value if set, zero value otherwise.
func (o *SupportUpdate0) GetSecondaryPhone() string {
	if o == nil || IsNil(o.SecondaryPhone) {
		var ret string
		return ret
	}
	return *o.SecondaryPhone
}

// GetSecondaryPhoneOk returns a tuple with the SecondaryPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportUpdate0) GetSecondaryPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryPhone) {
		return nil, false
	}
	return o.SecondaryPhone, true
}

// HasSecondaryPhone returns a boolean if a field has been set.
func (o *SupportUpdate0) HasSecondaryPhone() bool {
	if o != nil && !IsNil(o.SecondaryPhone) {
		return true
	}

	return false
}

// SetSecondaryPhone gets a reference to the given string and assigns it to the SecondaryPhone field.
func (o *SupportUpdate0) SetSecondaryPhone(v string) {
	o.SecondaryPhone = &v
}

func (o SupportUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.SecondaryName) {
		toSerialize["secondary_name"] = o.SecondaryName
	}
	if !IsNil(o.SecondaryTitle) {
		toSerialize["secondary_title"] = o.SecondaryTitle
	}
	if !IsNil(o.SecondaryEmail) {
		toSerialize["secondary_email"] = o.SecondaryEmail
	}
	if !IsNil(o.SecondaryPhone) {
		toSerialize["secondary_phone"] = o.SecondaryPhone
	}
	return toSerialize, nil
}

type NullableSupportUpdate0 struct {
	value *SupportUpdate0
	isSet bool
}

func (v NullableSupportUpdate0) Get() *SupportUpdate0 {
	return v.value
}

func (v *NullableSupportUpdate0) Set(val *SupportUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportUpdate0(val *SupportUpdate0) *NullableSupportUpdate0 {
	return &NullableSupportUpdate0{value: val, isSet: true}
}

func (v NullableSupportUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
