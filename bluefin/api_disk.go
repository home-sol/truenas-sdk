/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DiskApiService DiskApi service
type DiskApiService service

type ApiGetDiskRequest struct {
	ctx        context.Context
	ApiService *DiskApiService
	id         string
}

func (r ApiGetDiskRequest) Execute() (*Disk, *http.Response, error) {
	return r.ApiService.GetDiskExecute(r)
}

/*
GetDisk Method for GetDisk

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Disk ID
	@return ApiGetDiskRequest
*/
func (a *DiskApiService) GetDisk(ctx context.Context, id string) ApiGetDiskRequest {
	return ApiGetDiskRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Disk
func (a *DiskApiService) GetDiskExecute(r ApiGetDiskRequest) (*Disk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Disk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiskApiService.GetDisk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disk/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDisksRequest struct {
	ctx                 context.Context
	ApiService          *DiskApiService
	limit               *int32
	offset              *int32
	count               *bool
	sort                *string
	extraIncludeExpired *bool
	extraPasswords      *bool
	extraSupportsSmart  *bool
	extraPools          *bool
}

func (r ApiListDisksRequest) Limit(limit int32) ApiListDisksRequest {
	r.limit = &limit
	return r
}

func (r ApiListDisksRequest) Offset(offset int32) ApiListDisksRequest {
	r.offset = &offset
	return r
}

func (r ApiListDisksRequest) Count(count bool) ApiListDisksRequest {
	r.count = &count
	return r
}

func (r ApiListDisksRequest) Sort(sort string) ApiListDisksRequest {
	r.sort = &sort
	return r
}

// will also include expired disks
func (r ApiListDisksRequest) ExtraIncludeExpired(extraIncludeExpired bool) ApiListDisksRequest {
	r.extraIncludeExpired = &extraIncludeExpired
	return r
}

// will not hide KMIP password for the disks
func (r ApiListDisksRequest) ExtraPasswords(extraPasswords bool) ApiListDisksRequest {
	r.extraPasswords = &extraPasswords
	return r
}

// will query if disks support S.M.A.R.T. Only supported if resulting disks count is not larger than one; otherwise, raises an error.
func (r ApiListDisksRequest) ExtraSupportsSmart(extraSupportsSmart bool) ApiListDisksRequest {
	r.extraSupportsSmart = &extraSupportsSmart
	return r
}

// will join pool name for each disk
func (r ApiListDisksRequest) ExtraPools(extraPools bool) ApiListDisksRequest {
	r.extraPools = &extraPools
	return r
}

func (r ApiListDisksRequest) Execute() ([]Disk, *http.Response, error) {
	return r.ApiService.ListDisksExecute(r)
}

/*
ListDisks Method for ListDisks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListDisksRequest
*/
func (a *DiskApiService) ListDisks(ctx context.Context) ApiListDisksRequest {
	return ApiListDisksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Disk
func (a *DiskApiService) ListDisksExecute(r ApiListDisksRequest) ([]Disk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Disk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiskApiService.ListDisks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.extraIncludeExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extra.include_expired", r.extraIncludeExpired, "")
	}
	if r.extraPasswords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extra.passwords", r.extraPasswords, "")
	}
	if r.extraSupportsSmart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extra.supports_smart", r.extraSupportsSmart, "")
	}
	if r.extraPools != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extra.pools", r.extraPools, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDiskRequest struct {
	ctx               context.Context
	ApiService        *DiskApiService
	id                string
	updateDiskRequest *UpdateDiskRequest
}

func (r ApiUpdateDiskRequest) UpdateDiskRequest(updateDiskRequest UpdateDiskRequest) ApiUpdateDiskRequest {
	r.updateDiskRequest = &updateDiskRequest
	return r
}

func (r ApiUpdateDiskRequest) Execute() (*Disk, *http.Response, error) {
	return r.ApiService.UpdateDiskExecute(r)
}

/*
UpdateDisk Method for UpdateDisk

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Disk ID
	@return ApiUpdateDiskRequest
*/
func (a *DiskApiService) UpdateDisk(ctx context.Context, id string) ApiUpdateDiskRequest {
	return ApiUpdateDiskRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Disk
func (a *DiskApiService) UpdateDiskExecute(r ApiUpdateDiskRequest) (*Disk, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Disk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiskApiService.UpdateDisk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disk/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateDiskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
