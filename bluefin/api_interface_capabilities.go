/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// InterfaceCapabilitiesApiService InterfaceCapabilitiesApi service
type InterfaceCapabilitiesApiService service

type ApiInterfaceCapabilitiesGetPostRequest struct {
	ctx        context.Context
	ApiService *InterfaceCapabilitiesApiService
	body       *string
}

func (r ApiInterfaceCapabilitiesGetPostRequest) Body(body string) ApiInterfaceCapabilitiesGetPostRequest {
	r.body = &body
	return r
}

func (r ApiInterfaceCapabilitiesGetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InterfaceCapabilitiesGetPostExecute(r)
}

/*
InterfaceCapabilitiesGetPost Method for InterfaceCapabilitiesGetPost

Return enabled, disabled and supported capabilities (also known as features)
on a given interface.

`name` String representing name of the interface

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInterfaceCapabilitiesGetPostRequest
*/
func (a *InterfaceCapabilitiesApiService) InterfaceCapabilitiesGetPost(ctx context.Context) ApiInterfaceCapabilitiesGetPostRequest {
	return ApiInterfaceCapabilitiesGetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *InterfaceCapabilitiesApiService) InterfaceCapabilitiesGetPostExecute(r ApiInterfaceCapabilitiesGetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterfaceCapabilitiesApiService.InterfaceCapabilitiesGetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interface/capabilities/get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInterfaceCapabilitiesSetPostRequest struct {
	ctx                       context.Context
	ApiService                *InterfaceCapabilitiesApiService
	interfaceCapabilitiesSet0 *InterfaceCapabilitiesSet0
}

func (r ApiInterfaceCapabilitiesSetPostRequest) InterfaceCapabilitiesSet0(interfaceCapabilitiesSet0 InterfaceCapabilitiesSet0) ApiInterfaceCapabilitiesSetPostRequest {
	r.interfaceCapabilitiesSet0 = &interfaceCapabilitiesSet0
	return r
}

func (r ApiInterfaceCapabilitiesSetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InterfaceCapabilitiesSetPostExecute(r)
}

/*
InterfaceCapabilitiesSetPost Method for InterfaceCapabilitiesSetPost

Enable or Disable capabilties (also known as features) on a given interface.

`name` String representing name of the interface
`capabilities` List representing capabilities to be acted upon
`action` String when set to 'ENABLE' will enable `capabilities` else if set

	           to `DISABLE` will disable `capabilities`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInterfaceCapabilitiesSetPostRequest
*/
func (a *InterfaceCapabilitiesApiService) InterfaceCapabilitiesSetPost(ctx context.Context) ApiInterfaceCapabilitiesSetPostRequest {
	return ApiInterfaceCapabilitiesSetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *InterfaceCapabilitiesApiService) InterfaceCapabilitiesSetPostExecute(r ApiInterfaceCapabilitiesSetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterfaceCapabilitiesApiService.InterfaceCapabilitiesSetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interface/capabilities/set"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceCapabilitiesSet0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
