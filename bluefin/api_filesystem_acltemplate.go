/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FilesystemAcltemplateApiService FilesystemAcltemplateApi service
type FilesystemAcltemplateApiService service

type ApiFilesystemAcltemplateByPathPostRequest struct {
	ctx                          context.Context
	ApiService                   *FilesystemAcltemplateApiService
	filesystemAcltemplateByPath0 *FilesystemAcltemplateByPath0
}

func (r ApiFilesystemAcltemplateByPathPostRequest) FilesystemAcltemplateByPath0(filesystemAcltemplateByPath0 FilesystemAcltemplateByPath0) ApiFilesystemAcltemplateByPathPostRequest {
	r.filesystemAcltemplateByPath0 = &filesystemAcltemplateByPath0
	return r
}

func (r ApiFilesystemAcltemplateByPathPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateByPathPostExecute(r)
}

/*
FilesystemAcltemplateByPathPost Method for FilesystemAcltemplateByPathPost

Retrieve list of available ACL templates for a given `path`.

Supports `query-filters` and `query-options`.
`format-options` gives additional options to alter the results of
the template query:

`canonicalize` - place ACL entries for NFSv4 ACLs in Microsoft canonical order.
`ensure_builtins` - ensure all results contain entries for `builtin_users` and `builtin_administrators`
groups.
`resolve_names` - convert ids in ACL entries into names.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesystemAcltemplateByPathPostRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateByPathPost(ctx context.Context) ApiFilesystemAcltemplateByPathPostRequest {
	return ApiFilesystemAcltemplateByPathPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateByPathPostExecute(r ApiFilesystemAcltemplateByPathPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateByPathPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate/by_path"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filesystemAcltemplateByPath0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplateGetRequest struct {
	ctx        context.Context
	ApiService *FilesystemAcltemplateApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r ApiFilesystemAcltemplateGetRequest) Limit(limit int32) ApiFilesystemAcltemplateGetRequest {
	r.limit = &limit
	return r
}

func (r ApiFilesystemAcltemplateGetRequest) Offset(offset int32) ApiFilesystemAcltemplateGetRequest {
	r.offset = &offset
	return r
}

func (r ApiFilesystemAcltemplateGetRequest) Count(count bool) ApiFilesystemAcltemplateGetRequest {
	r.count = &count
	return r
}

func (r ApiFilesystemAcltemplateGetRequest) Sort(sort string) ApiFilesystemAcltemplateGetRequest {
	r.sort = &sort
	return r
}

func (r ApiFilesystemAcltemplateGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateGetExecute(r)
}

/*
FilesystemAcltemplateGet Method for FilesystemAcltemplateGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesystemAcltemplateGetRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateGet(ctx context.Context) ApiFilesystemAcltemplateGetRequest {
	return ApiFilesystemAcltemplateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateGetExecute(r ApiFilesystemAcltemplateGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplateGetInstancePostRequest struct {
	ctx                              context.Context
	ApiService                       *FilesystemAcltemplateApiService
	filesystemAcltemplateGetInstance *FilesystemAcltemplateGetInstance
}

func (r ApiFilesystemAcltemplateGetInstancePostRequest) FilesystemAcltemplateGetInstance(filesystemAcltemplateGetInstance FilesystemAcltemplateGetInstance) ApiFilesystemAcltemplateGetInstancePostRequest {
	r.filesystemAcltemplateGetInstance = &filesystemAcltemplateGetInstance
	return r
}

func (r ApiFilesystemAcltemplateGetInstancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateGetInstancePostExecute(r)
}

/*
FilesystemAcltemplateGetInstancePost Method for FilesystemAcltemplateGetInstancePost

Returns instance matching `id`. If `id` is not found, Validation error is raised.

Please see `query` method documentation for `options`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesystemAcltemplateGetInstancePostRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateGetInstancePost(ctx context.Context) ApiFilesystemAcltemplateGetInstancePostRequest {
	return ApiFilesystemAcltemplateGetInstancePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateGetInstancePostExecute(r ApiFilesystemAcltemplateGetInstancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateGetInstancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate/get_instance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filesystemAcltemplateGetInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplateIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *FilesystemAcltemplateApiService
	id         int32
}

func (r ApiFilesystemAcltemplateIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateIdIdDeleteExecute(r)
}

/*
FilesystemAcltemplateIdIdDelete Method for FilesystemAcltemplateIdIdDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiFilesystemAcltemplateIdIdDeleteRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdDelete(ctx context.Context, id int32) ApiFilesystemAcltemplateIdIdDeleteRequest {
	return ApiFilesystemAcltemplateIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdDeleteExecute(r ApiFilesystemAcltemplateIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplateIdIdGetRequest struct {
	ctx        context.Context
	ApiService *FilesystemAcltemplateApiService
	id         int32
}

func (r ApiFilesystemAcltemplateIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateIdIdGetExecute(r)
}

/*
FilesystemAcltemplateIdIdGet Method for FilesystemAcltemplateIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiFilesystemAcltemplateIdIdGetRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdGet(ctx context.Context, id int32) ApiFilesystemAcltemplateIdIdGetRequest {
	return ApiFilesystemAcltemplateIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdGetExecute(r ApiFilesystemAcltemplateIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplateIdIdPutRequest struct {
	ctx        context.Context
	ApiService *FilesystemAcltemplateApiService
	id         int32
}

func (r ApiFilesystemAcltemplateIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplateIdIdPutExecute(r)
}

/*
FilesystemAcltemplateIdIdPut Method for FilesystemAcltemplateIdIdPut

update filesystem ACL template with `id`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiFilesystemAcltemplateIdIdPutRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdPut(ctx context.Context, id int32) ApiFilesystemAcltemplateIdIdPutRequest {
	return ApiFilesystemAcltemplateIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplateIdIdPutExecute(r ApiFilesystemAcltemplateIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplateIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFilesystemAcltemplatePostRequest struct {
	ctx                          context.Context
	ApiService                   *FilesystemAcltemplateApiService
	filesystemAcltemplateCreate0 *FilesystemAcltemplateCreate0
}

func (r ApiFilesystemAcltemplatePostRequest) FilesystemAcltemplateCreate0(filesystemAcltemplateCreate0 FilesystemAcltemplateCreate0) ApiFilesystemAcltemplatePostRequest {
	r.filesystemAcltemplateCreate0 = &filesystemAcltemplateCreate0
	return r
}

func (r ApiFilesystemAcltemplatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.FilesystemAcltemplatePostExecute(r)
}

/*
FilesystemAcltemplatePost Method for FilesystemAcltemplatePost

Create a new filesystem ACL template.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesystemAcltemplatePostRequest
*/
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplatePost(ctx context.Context) ApiFilesystemAcltemplatePostRequest {
	return ApiFilesystemAcltemplatePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FilesystemAcltemplateApiService) FilesystemAcltemplatePostExecute(r ApiFilesystemAcltemplatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesystemAcltemplateApiService.FilesystemAcltemplatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/filesystem/acltemplate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filesystemAcltemplateCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
