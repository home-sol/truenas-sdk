/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// AdvPowermgmt the model 'AdvPowermgmt'
type AdvPowermgmt string

// List of AdvPowermgmt
const (
	DISABLED AdvPowermgmt = "DISABLED"
	_1       AdvPowermgmt = "1"
	_64      AdvPowermgmt = "64"
	_127     AdvPowermgmt = "127"
	_128     AdvPowermgmt = "128"
	_192     AdvPowermgmt = "192"
	_254     AdvPowermgmt = "254"
)

// All allowed values of AdvPowermgmt enum
var AllowedAdvPowermgmtEnumValues = []AdvPowermgmt{
	"DISABLED",
	"1",
	"64",
	"127",
	"128",
	"192",
	"254",
}

func (v *AdvPowermgmt) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdvPowermgmt(value)
	for _, existing := range AllowedAdvPowermgmtEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdvPowermgmt", value)
}

// NewAdvPowermgmtFromValue returns a pointer to a valid AdvPowermgmt
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdvPowermgmtFromValue(v string) (*AdvPowermgmt, error) {
	ev := AdvPowermgmt(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdvPowermgmt: valid values are %v", v, AllowedAdvPowermgmtEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdvPowermgmt) IsValid() bool {
	for _, existing := range AllowedAdvPowermgmtEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AdvPowermgmt value
func (v AdvPowermgmt) Ptr() *AdvPowermgmt {
	return &v
}

type NullableAdvPowermgmt struct {
	value *AdvPowermgmt
	isSet bool
}

func (v NullableAdvPowermgmt) Get() *AdvPowermgmt {
	return v.value
}

func (v *NullableAdvPowermgmt) Set(val *AdvPowermgmt) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvPowermgmt) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvPowermgmt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvPowermgmt(val *AdvPowermgmt) *NullableAdvPowermgmt {
	return &NullableAdvPowermgmt{value: val, isSet: true}
}

func (v NullableAdvPowermgmt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvPowermgmt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
