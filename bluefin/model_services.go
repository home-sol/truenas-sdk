/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Services type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Services{}

// Services struct for Services
type Services struct {
	Ssh *bool `json:"ssh,omitempty"`
}

// NewServices instantiates a new Services object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServices() *Services {
	this := Services{}
	var ssh bool
	this.Ssh = &ssh
	return &this
}

// NewServicesWithDefaults instantiates a new Services object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesWithDefaults() *Services {
	this := Services{}
	var ssh bool
	this.Ssh = &ssh
	return &this
}

// GetSsh returns the Ssh field value if set, zero value otherwise.
func (o *Services) GetSsh() bool {
	if o == nil || IsNil(o.Ssh) {
		var ret bool
		return ret
	}
	return *o.Ssh
}

// GetSshOk returns a tuple with the Ssh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Services) GetSshOk() (*bool, bool) {
	if o == nil || IsNil(o.Ssh) {
		return nil, false
	}
	return o.Ssh, true
}

// HasSsh returns a boolean if a field has been set.
func (o *Services) HasSsh() bool {
	if o != nil && !IsNil(o.Ssh) {
		return true
	}

	return false
}

// SetSsh gets a reference to the given bool and assigns it to the Ssh field.
func (o *Services) SetSsh(v bool) {
	o.Ssh = &v
}

func (o Services) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Services) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ssh) {
		toSerialize["ssh"] = o.Ssh
	}
	return toSerialize, nil
}

type NullableServices struct {
	value *Services
	isSet bool
}

func (v NullableServices) Get() *Services {
	return v.value
}

func (v *NullableServices) Set(val *Services) {
	v.value = val
	v.isSet = true
}

func (v NullableServices) IsSet() bool {
	return v.isSet
}

func (v *NullableServices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServices(val *Services) *NullableServices {
	return &NullableServices{value: val, isSet: true}
}

func (v NullableServices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
