/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PrivilegeCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivilegeCreate0{}

// PrivilegeCreate0 struct for PrivilegeCreate0
type PrivilegeCreate0 struct {
	Id *int32 `json:"id,omitempty"`
	// `name` is a name for privilege (must be unique).
	Name *string `json:"name,omitempty"`
	// `local_groups` is a list of local user account group GIDs that gain this privilege.
	LocalGroups []int32 `json:"local_groups,omitempty"`
	// `ds_groups` is list of Directory Service group GIDs that will gain this privilege.
	DsGroups []int32 `json:"ds_groups,omitempty"`
	// `allowlist` is a list of API endpoints allowed for this privilege.
	Allowlist []AllowlistItem `json:"allowlist,omitempty"`
	WebShell  *bool           `json:"web_shell,omitempty"`
}

// NewPrivilegeCreate0 instantiates a new PrivilegeCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegeCreate0() *PrivilegeCreate0 {
	this := PrivilegeCreate0{}
	return &this
}

// NewPrivilegeCreate0WithDefaults instantiates a new PrivilegeCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeCreate0WithDefaults() *PrivilegeCreate0 {
	this := PrivilegeCreate0{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PrivilegeCreate0) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrivilegeCreate0) SetName(v string) {
	o.Name = &v
}

// GetLocalGroups returns the LocalGroups field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetLocalGroups() []int32 {
	if o == nil || IsNil(o.LocalGroups) {
		var ret []int32
		return ret
	}
	return o.LocalGroups
}

// GetLocalGroupsOk returns a tuple with the LocalGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetLocalGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LocalGroups) {
		return nil, false
	}
	return o.LocalGroups, true
}

// HasLocalGroups returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasLocalGroups() bool {
	if o != nil && !IsNil(o.LocalGroups) {
		return true
	}

	return false
}

// SetLocalGroups gets a reference to the given []int32 and assigns it to the LocalGroups field.
func (o *PrivilegeCreate0) SetLocalGroups(v []int32) {
	o.LocalGroups = v
}

// GetDsGroups returns the DsGroups field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetDsGroups() []int32 {
	if o == nil || IsNil(o.DsGroups) {
		var ret []int32
		return ret
	}
	return o.DsGroups
}

// GetDsGroupsOk returns a tuple with the DsGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetDsGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DsGroups) {
		return nil, false
	}
	return o.DsGroups, true
}

// HasDsGroups returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasDsGroups() bool {
	if o != nil && !IsNil(o.DsGroups) {
		return true
	}

	return false
}

// SetDsGroups gets a reference to the given []int32 and assigns it to the DsGroups field.
func (o *PrivilegeCreate0) SetDsGroups(v []int32) {
	o.DsGroups = v
}

// GetAllowlist returns the Allowlist field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetAllowlist() []AllowlistItem {
	if o == nil || IsNil(o.Allowlist) {
		var ret []AllowlistItem
		return ret
	}
	return o.Allowlist
}

// GetAllowlistOk returns a tuple with the Allowlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetAllowlistOk() ([]AllowlistItem, bool) {
	if o == nil || IsNil(o.Allowlist) {
		return nil, false
	}
	return o.Allowlist, true
}

// HasAllowlist returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasAllowlist() bool {
	if o != nil && !IsNil(o.Allowlist) {
		return true
	}

	return false
}

// SetAllowlist gets a reference to the given []AllowlistItem and assigns it to the Allowlist field.
func (o *PrivilegeCreate0) SetAllowlist(v []AllowlistItem) {
	o.Allowlist = v
}

// GetWebShell returns the WebShell field value if set, zero value otherwise.
func (o *PrivilegeCreate0) GetWebShell() bool {
	if o == nil || IsNil(o.WebShell) {
		var ret bool
		return ret
	}
	return *o.WebShell
}

// GetWebShellOk returns a tuple with the WebShell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivilegeCreate0) GetWebShellOk() (*bool, bool) {
	if o == nil || IsNil(o.WebShell) {
		return nil, false
	}
	return o.WebShell, true
}

// HasWebShell returns a boolean if a field has been set.
func (o *PrivilegeCreate0) HasWebShell() bool {
	if o != nil && !IsNil(o.WebShell) {
		return true
	}

	return false
}

// SetWebShell gets a reference to the given bool and assigns it to the WebShell field.
func (o *PrivilegeCreate0) SetWebShell(v bool) {
	o.WebShell = &v
}

func (o PrivilegeCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivilegeCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LocalGroups) {
		toSerialize["local_groups"] = o.LocalGroups
	}
	if !IsNil(o.DsGroups) {
		toSerialize["ds_groups"] = o.DsGroups
	}
	if !IsNil(o.Allowlist) {
		toSerialize["allowlist"] = o.Allowlist
	}
	if !IsNil(o.WebShell) {
		toSerialize["web_shell"] = o.WebShell
	}
	return toSerialize, nil
}

type NullablePrivilegeCreate0 struct {
	value *PrivilegeCreate0
	isSet bool
}

func (v NullablePrivilegeCreate0) Get() *PrivilegeCreate0 {
	return v.value
}

func (v *NullablePrivilegeCreate0) Set(val *PrivilegeCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeCreate0(val *PrivilegeCreate0) *NullablePrivilegeCreate0 {
	return &NullablePrivilegeCreate0{value: val, isSet: true}
}

func (v NullablePrivilegeCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
