/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the GroupHasPasswordEnabledUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupHasPasswordEnabledUser{}

// GroupHasPasswordEnabledUser struct for GroupHasPasswordEnabledUser
type GroupHasPasswordEnabledUser struct {
	Gids                 []int32 `json:"gids,omitempty"`
	ExcludeUserIds       []int32 `json:"exclude_user_ids,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GroupHasPasswordEnabledUser GroupHasPasswordEnabledUser

// NewGroupHasPasswordEnabledUser instantiates a new GroupHasPasswordEnabledUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupHasPasswordEnabledUser() *GroupHasPasswordEnabledUser {
	this := GroupHasPasswordEnabledUser{}
	return &this
}

// NewGroupHasPasswordEnabledUserWithDefaults instantiates a new GroupHasPasswordEnabledUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupHasPasswordEnabledUserWithDefaults() *GroupHasPasswordEnabledUser {
	this := GroupHasPasswordEnabledUser{}
	return &this
}

// GetGids returns the Gids field value if set, zero value otherwise.
func (o *GroupHasPasswordEnabledUser) GetGids() []int32 {
	if o == nil || IsNil(o.Gids) {
		var ret []int32
		return ret
	}
	return o.Gids
}

// GetGidsOk returns a tuple with the Gids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupHasPasswordEnabledUser) GetGidsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Gids) {
		return nil, false
	}
	return o.Gids, true
}

// HasGids returns a boolean if a field has been set.
func (o *GroupHasPasswordEnabledUser) HasGids() bool {
	if o != nil && !IsNil(o.Gids) {
		return true
	}

	return false
}

// SetGids gets a reference to the given []int32 and assigns it to the Gids field.
func (o *GroupHasPasswordEnabledUser) SetGids(v []int32) {
	o.Gids = v
}

// GetExcludeUserIds returns the ExcludeUserIds field value if set, zero value otherwise.
func (o *GroupHasPasswordEnabledUser) GetExcludeUserIds() []int32 {
	if o == nil || IsNil(o.ExcludeUserIds) {
		var ret []int32
		return ret
	}
	return o.ExcludeUserIds
}

// GetExcludeUserIdsOk returns a tuple with the ExcludeUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupHasPasswordEnabledUser) GetExcludeUserIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExcludeUserIds) {
		return nil, false
	}
	return o.ExcludeUserIds, true
}

// HasExcludeUserIds returns a boolean if a field has been set.
func (o *GroupHasPasswordEnabledUser) HasExcludeUserIds() bool {
	if o != nil && !IsNil(o.ExcludeUserIds) {
		return true
	}

	return false
}

// SetExcludeUserIds gets a reference to the given []int32 and assigns it to the ExcludeUserIds field.
func (o *GroupHasPasswordEnabledUser) SetExcludeUserIds(v []int32) {
	o.ExcludeUserIds = v
}

func (o GroupHasPasswordEnabledUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupHasPasswordEnabledUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gids) {
		toSerialize["gids"] = o.Gids
	}
	if !IsNil(o.ExcludeUserIds) {
		toSerialize["exclude_user_ids"] = o.ExcludeUserIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GroupHasPasswordEnabledUser) UnmarshalJSON(bytes []byte) (err error) {
	varGroupHasPasswordEnabledUser := _GroupHasPasswordEnabledUser{}

	if err = json.Unmarshal(bytes, &varGroupHasPasswordEnabledUser); err == nil {
		*o = GroupHasPasswordEnabledUser(varGroupHasPasswordEnabledUser)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "gids")
		delete(additionalProperties, "exclude_user_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGroupHasPasswordEnabledUser struct {
	value *GroupHasPasswordEnabledUser
	isSet bool
}

func (v NullableGroupHasPasswordEnabledUser) Get() *GroupHasPasswordEnabledUser {
	return v.value
}

func (v *NullableGroupHasPasswordEnabledUser) Set(val *GroupHasPasswordEnabledUser) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupHasPasswordEnabledUser) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupHasPasswordEnabledUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupHasPasswordEnabledUser(val *GroupHasPasswordEnabledUser) *NullableGroupHasPasswordEnabledUser {
	return &NullableGroupHasPasswordEnabledUser{value: val, isSet: true}
}

func (v NullableGroupHasPasswordEnabledUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupHasPasswordEnabledUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
