/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// ReplicationTargetUnmatchedSnapshots3 the model 'ReplicationTargetUnmatchedSnapshots3'
type ReplicationTargetUnmatchedSnapshots3 string

// List of replication_target_unmatched_snapshots_3
const (
	SSH       ReplicationTargetUnmatchedSnapshots3 = "SSH"
	SSHNETCAT ReplicationTargetUnmatchedSnapshots3 = "SSH+NETCAT"
	LOCAL     ReplicationTargetUnmatchedSnapshots3 = "LOCAL"
	LEGACY    ReplicationTargetUnmatchedSnapshots3 = "LEGACY"
)

// All allowed values of ReplicationTargetUnmatchedSnapshots3 enum
var AllowedReplicationTargetUnmatchedSnapshots3EnumValues = []ReplicationTargetUnmatchedSnapshots3{
	"SSH",
	"SSH+NETCAT",
	"LOCAL",
	"LEGACY",
}

func (v *ReplicationTargetUnmatchedSnapshots3) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationTargetUnmatchedSnapshots3(value)
	for _, existing := range AllowedReplicationTargetUnmatchedSnapshots3EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationTargetUnmatchedSnapshots3", value)
}

// NewReplicationTargetUnmatchedSnapshots3FromValue returns a pointer to a valid ReplicationTargetUnmatchedSnapshots3
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationTargetUnmatchedSnapshots3FromValue(v string) (*ReplicationTargetUnmatchedSnapshots3, error) {
	ev := ReplicationTargetUnmatchedSnapshots3(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationTargetUnmatchedSnapshots3: valid values are %v", v, AllowedReplicationTargetUnmatchedSnapshots3EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationTargetUnmatchedSnapshots3) IsValid() bool {
	for _, existing := range AllowedReplicationTargetUnmatchedSnapshots3EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to replication_target_unmatched_snapshots_3 value
func (v ReplicationTargetUnmatchedSnapshots3) Ptr() *ReplicationTargetUnmatchedSnapshots3 {
	return &v
}

type NullableReplicationTargetUnmatchedSnapshots3 struct {
	value *ReplicationTargetUnmatchedSnapshots3
	isSet bool
}

func (v NullableReplicationTargetUnmatchedSnapshots3) Get() *ReplicationTargetUnmatchedSnapshots3 {
	return v.value
}

func (v *NullableReplicationTargetUnmatchedSnapshots3) Set(val *ReplicationTargetUnmatchedSnapshots3) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationTargetUnmatchedSnapshots3) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationTargetUnmatchedSnapshots3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationTargetUnmatchedSnapshots3(val *ReplicationTargetUnmatchedSnapshots3) *NullableReplicationTargetUnmatchedSnapshots3 {
	return &NullableReplicationTargetUnmatchedSnapshots3{value: val, isSet: true}
}

func (v NullableReplicationTargetUnmatchedSnapshots3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationTargetUnmatchedSnapshots3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
