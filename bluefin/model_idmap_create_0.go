/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the IdmapCreate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdmapCreate0{}

// IdmapCreate0 struct for IdmapCreate0
type IdmapCreate0 struct {
	// `name` the pre-windows 2000 domain name.
	Name          *string `json:"name,omitempty"`
	DnsDomainName *string `json:"dns_domain_name,omitempty"`
	// `range_low` and `range_high` specify the UID and GID range for which this backend is authoritative. `range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.
	RangeLow *int32 `json:"range_low,omitempty"`
	// `range_low` and `range_high` specify the UID and GID range for which this backend is authoritative. `range_low` and `range_high` specify the UID and GID range for which this backend is authoritative.
	RangeHigh *int32 `json:"range_high,omitempty"`
	// `idmap_backend` provides a plugin interface for Winbind to use varying backends to store SID/uid/gid mapping tables. The correct setting depends on the environment in which the NAS is deployed.
	IdmapBackend *string              `json:"idmap_backend,omitempty"`
	Certificate  NullableInt32        `json:"certificate,omitempty"`
	Options      *IdmapCreate0Options `json:"options,omitempty"`
}

// NewIdmapCreate0 instantiates a new IdmapCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdmapCreate0() *IdmapCreate0 {
	this := IdmapCreate0{}
	return &this
}

// NewIdmapCreate0WithDefaults instantiates a new IdmapCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdmapCreate0WithDefaults() *IdmapCreate0 {
	this := IdmapCreate0{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdmapCreate0) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdmapCreate0) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdmapCreate0) SetName(v string) {
	o.Name = &v
}

// GetDnsDomainName returns the DnsDomainName field value if set, zero value otherwise.
func (o *IdmapCreate0) GetDnsDomainName() string {
	if o == nil || IsNil(o.DnsDomainName) {
		var ret string
		return ret
	}
	return *o.DnsDomainName
}

// GetDnsDomainNameOk returns a tuple with the DnsDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetDnsDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DnsDomainName) {
		return nil, false
	}
	return o.DnsDomainName, true
}

// HasDnsDomainName returns a boolean if a field has been set.
func (o *IdmapCreate0) HasDnsDomainName() bool {
	if o != nil && !IsNil(o.DnsDomainName) {
		return true
	}

	return false
}

// SetDnsDomainName gets a reference to the given string and assigns it to the DnsDomainName field.
func (o *IdmapCreate0) SetDnsDomainName(v string) {
	o.DnsDomainName = &v
}

// GetRangeLow returns the RangeLow field value if set, zero value otherwise.
func (o *IdmapCreate0) GetRangeLow() int32 {
	if o == nil || IsNil(o.RangeLow) {
		var ret int32
		return ret
	}
	return *o.RangeLow
}

// GetRangeLowOk returns a tuple with the RangeLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetRangeLowOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeLow) {
		return nil, false
	}
	return o.RangeLow, true
}

// HasRangeLow returns a boolean if a field has been set.
func (o *IdmapCreate0) HasRangeLow() bool {
	if o != nil && !IsNil(o.RangeLow) {
		return true
	}

	return false
}

// SetRangeLow gets a reference to the given int32 and assigns it to the RangeLow field.
func (o *IdmapCreate0) SetRangeLow(v int32) {
	o.RangeLow = &v
}

// GetRangeHigh returns the RangeHigh field value if set, zero value otherwise.
func (o *IdmapCreate0) GetRangeHigh() int32 {
	if o == nil || IsNil(o.RangeHigh) {
		var ret int32
		return ret
	}
	return *o.RangeHigh
}

// GetRangeHighOk returns a tuple with the RangeHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetRangeHighOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeHigh) {
		return nil, false
	}
	return o.RangeHigh, true
}

// HasRangeHigh returns a boolean if a field has been set.
func (o *IdmapCreate0) HasRangeHigh() bool {
	if o != nil && !IsNil(o.RangeHigh) {
		return true
	}

	return false
}

// SetRangeHigh gets a reference to the given int32 and assigns it to the RangeHigh field.
func (o *IdmapCreate0) SetRangeHigh(v int32) {
	o.RangeHigh = &v
}

// GetIdmapBackend returns the IdmapBackend field value if set, zero value otherwise.
func (o *IdmapCreate0) GetIdmapBackend() string {
	if o == nil || IsNil(o.IdmapBackend) {
		var ret string
		return ret
	}
	return *o.IdmapBackend
}

// GetIdmapBackendOk returns a tuple with the IdmapBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetIdmapBackendOk() (*string, bool) {
	if o == nil || IsNil(o.IdmapBackend) {
		return nil, false
	}
	return o.IdmapBackend, true
}

// HasIdmapBackend returns a boolean if a field has been set.
func (o *IdmapCreate0) HasIdmapBackend() bool {
	if o != nil && !IsNil(o.IdmapBackend) {
		return true
	}

	return false
}

// SetIdmapBackend gets a reference to the given string and assigns it to the IdmapBackend field.
func (o *IdmapCreate0) SetIdmapBackend(v string) {
	o.IdmapBackend = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdmapCreate0) GetCertificate() int32 {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret int32
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdmapCreate0) GetCertificateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *IdmapCreate0) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableInt32 and assigns it to the Certificate field.
func (o *IdmapCreate0) SetCertificate(v int32) {
	o.Certificate.Set(&v)
}

// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *IdmapCreate0) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *IdmapCreate0) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *IdmapCreate0) GetOptions() IdmapCreate0Options {
	if o == nil || IsNil(o.Options) {
		var ret IdmapCreate0Options
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdmapCreate0) GetOptionsOk() (*IdmapCreate0Options, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IdmapCreate0) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given IdmapCreate0Options and assigns it to the Options field.
func (o *IdmapCreate0) SetOptions(v IdmapCreate0Options) {
	o.Options = &v
}

func (o IdmapCreate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdmapCreate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DnsDomainName) {
		toSerialize["dns_domain_name"] = o.DnsDomainName
	}
	if !IsNil(o.RangeLow) {
		toSerialize["range_low"] = o.RangeLow
	}
	if !IsNil(o.RangeHigh) {
		toSerialize["range_high"] = o.RangeHigh
	}
	if !IsNil(o.IdmapBackend) {
		toSerialize["idmap_backend"] = o.IdmapBackend
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableIdmapCreate0 struct {
	value *IdmapCreate0
	isSet bool
}

func (v NullableIdmapCreate0) Get() *IdmapCreate0 {
	return v.value
}

func (v *NullableIdmapCreate0) Set(val *IdmapCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableIdmapCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableIdmapCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdmapCreate0(val *IdmapCreate0) *NullableIdmapCreate0 {
	return &NullableIdmapCreate0{value: val, isSet: true}
}

func (v NullableIdmapCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdmapCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
