/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FailoverUpdate0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverUpdate0{}

// FailoverUpdate0 struct for FailoverUpdate0
type FailoverUpdate0 struct {
	// `disabled` When true indicates that HA will be disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// `timeout` is the time to WAIT until a failover occurs when a network     event occurs on an interface that is marked critical for failover AND     HA is enabled and working appropriately.
	Timeout *int32 `json:"timeout,omitempty"`
	// `master`  Marks the particular node in the chassis as the master node.             The standby node will have the opposite value.
	Master NullableBool `json:"master,omitempty"`
}

// NewFailoverUpdate0 instantiates a new FailoverUpdate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverUpdate0() *FailoverUpdate0 {
	this := FailoverUpdate0{}
	return &this
}

// NewFailoverUpdate0WithDefaults instantiates a new FailoverUpdate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverUpdate0WithDefaults() *FailoverUpdate0 {
	this := FailoverUpdate0{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *FailoverUpdate0) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverUpdate0) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *FailoverUpdate0) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *FailoverUpdate0) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *FailoverUpdate0) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverUpdate0) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *FailoverUpdate0) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *FailoverUpdate0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetMaster returns the Master field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverUpdate0) GetMaster() bool {
	if o == nil || IsNil(o.Master.Get()) {
		var ret bool
		return ret
	}
	return *o.Master.Get()
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverUpdate0) GetMasterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Master.Get(), o.Master.IsSet()
}

// HasMaster returns a boolean if a field has been set.
func (o *FailoverUpdate0) HasMaster() bool {
	if o != nil && o.Master.IsSet() {
		return true
	}

	return false
}

// SetMaster gets a reference to the given NullableBool and assigns it to the Master field.
func (o *FailoverUpdate0) SetMaster(v bool) {
	o.Master.Set(&v)
}

// SetMasterNil sets the value for Master to be an explicit nil
func (o *FailoverUpdate0) SetMasterNil() {
	o.Master.Set(nil)
}

// UnsetMaster ensures that no value is present for Master, not even an explicit nil
func (o *FailoverUpdate0) UnsetMaster() {
	o.Master.Unset()
}

func (o FailoverUpdate0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverUpdate0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if o.Master.IsSet() {
		toSerialize["master"] = o.Master.Get()
	}
	return toSerialize, nil
}

type NullableFailoverUpdate0 struct {
	value *FailoverUpdate0
	isSet bool
}

func (v NullableFailoverUpdate0) Get() *FailoverUpdate0 {
	return v.value
}

func (v *NullableFailoverUpdate0) Set(val *FailoverUpdate0) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverUpdate0) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverUpdate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverUpdate0(val *FailoverUpdate0) *NullableFailoverUpdate0 {
	return &NullableFailoverUpdate0{value: val, isSet: true}
}

func (v NullableFailoverUpdate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverUpdate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
