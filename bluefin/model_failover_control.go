/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FailoverControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverControl{}

// FailoverControl struct for FailoverControl
type FailoverControl struct {
	Action               *FailoverControl0 `json:"action,omitempty"`
	Options              *FailoverControl1 `json:"options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FailoverControl FailoverControl

// NewFailoverControl instantiates a new FailoverControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverControl() *FailoverControl {
	this := FailoverControl{}
	var options FailoverControl1
	this.Options = &options
	return &this
}

// NewFailoverControlWithDefaults instantiates a new FailoverControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverControlWithDefaults() *FailoverControl {
	this := FailoverControl{}
	var options FailoverControl1
	this.Options = &options
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *FailoverControl) GetAction() FailoverControl0 {
	if o == nil || IsNil(o.Action) {
		var ret FailoverControl0
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverControl) GetActionOk() (*FailoverControl0, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *FailoverControl) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given FailoverControl0 and assigns it to the Action field.
func (o *FailoverControl) SetAction(v FailoverControl0) {
	o.Action = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FailoverControl) GetOptions() FailoverControl1 {
	if o == nil || IsNil(o.Options) {
		var ret FailoverControl1
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverControl) GetOptionsOk() (*FailoverControl1, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FailoverControl) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given FailoverControl1 and assigns it to the Options field.
func (o *FailoverControl) SetOptions(v FailoverControl1) {
	o.Options = &v
}

func (o FailoverControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FailoverControl) UnmarshalJSON(bytes []byte) (err error) {
	varFailoverControl := _FailoverControl{}

	if err = json.Unmarshal(bytes, &varFailoverControl); err == nil {
		*o = FailoverControl(varFailoverControl)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFailoverControl struct {
	value *FailoverControl
	isSet bool
}

func (v NullableFailoverControl) Get() *FailoverControl {
	return v.value
}

func (v *NullableFailoverControl) Set(val *FailoverControl) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverControl) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverControl(val *FailoverControl) *NullableFailoverControl {
	return &NullableFailoverControl{value: val, isSet: true}
}

func (v NullableFailoverControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
