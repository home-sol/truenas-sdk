/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the MailSend0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailSend0{}

// MailSend0 struct for MailSend0
type MailSend0 struct {
	Subject *string `json:"subject,omitempty"`
	// `text` will be formatted to HTML using Markdown and rendered using default E-Mail template.
	Text *string `json:"text,omitempty"`
	// You can put your own HTML using `html`. If `html` is null, no HTML MIME part will be added to E-Mail.
	Html     NullableString `json:"html,omitempty"`
	To       []string       `json:"to,omitempty"`
	Cc       []string       `json:"cc,omitempty"`
	Interval NullableInt32  `json:"interval,omitempty"`
	Channel  NullableString `json:"channel,omitempty"`
	Timeout  *int32         `json:"timeout,omitempty"`
	// If `attachments` is true, a list compromised of the following dict is required via HTTP upload:   - headers(list)     - name(str)     - value(str)     - params(dict)   - content (str)
	Attachments  *bool                  `json:"attachments,omitempty"`
	Queue        *bool                  `json:"queue,omitempty"`
	ExtraHeaders map[string]interface{} `json:"extra_headers,omitempty"`
}

// NewMailSend0 instantiates a new MailSend0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailSend0() *MailSend0 {
	this := MailSend0{}
	var timeout int32
	this.Timeout = &timeout
	var attachments bool
	this.Attachments = &attachments
	var queue bool
	this.Queue = &queue
	return &this
}

// NewMailSend0WithDefaults instantiates a new MailSend0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailSend0WithDefaults() *MailSend0 {
	this := MailSend0{}
	var timeout int32
	this.Timeout = &timeout
	var attachments bool
	this.Attachments = &attachments
	var queue bool
	this.Queue = &queue
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *MailSend0) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *MailSend0) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *MailSend0) SetSubject(v string) {
	o.Subject = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MailSend0) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MailSend0) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MailSend0) SetText(v string) {
	o.Text = &v
}

// GetHtml returns the Html field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MailSend0) GetHtml() string {
	if o == nil || IsNil(o.Html.Get()) {
		var ret string
		return ret
	}
	return *o.Html.Get()
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailSend0) GetHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Html.Get(), o.Html.IsSet()
}

// HasHtml returns a boolean if a field has been set.
func (o *MailSend0) HasHtml() bool {
	if o != nil && o.Html.IsSet() {
		return true
	}

	return false
}

// SetHtml gets a reference to the given NullableString and assigns it to the Html field.
func (o *MailSend0) SetHtml(v string) {
	o.Html.Set(&v)
}

// SetHtmlNil sets the value for Html to be an explicit nil
func (o *MailSend0) SetHtmlNil() {
	o.Html.Set(nil)
}

// UnsetHtml ensures that no value is present for Html, not even an explicit nil
func (o *MailSend0) UnsetHtml() {
	o.Html.Unset()
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *MailSend0) GetTo() []string {
	if o == nil || IsNil(o.To) {
		var ret []string
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetToOk() ([]string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *MailSend0) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []string and assigns it to the To field.
func (o *MailSend0) SetTo(v []string) {
	o.To = v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *MailSend0) GetCc() []string {
	if o == nil || IsNil(o.Cc) {
		var ret []string
		return ret
	}
	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetCcOk() ([]string, bool) {
	if o == nil || IsNil(o.Cc) {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *MailSend0) HasCc() bool {
	if o != nil && !IsNil(o.Cc) {
		return true
	}

	return false
}

// SetCc gets a reference to the given []string and assigns it to the Cc field.
func (o *MailSend0) SetCc(v []string) {
	o.Cc = v
}

// GetInterval returns the Interval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MailSend0) GetInterval() int32 {
	if o == nil || IsNil(o.Interval.Get()) {
		var ret int32
		return ret
	}
	return *o.Interval.Get()
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailSend0) GetIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interval.Get(), o.Interval.IsSet()
}

// HasInterval returns a boolean if a field has been set.
func (o *MailSend0) HasInterval() bool {
	if o != nil && o.Interval.IsSet() {
		return true
	}

	return false
}

// SetInterval gets a reference to the given NullableInt32 and assigns it to the Interval field.
func (o *MailSend0) SetInterval(v int32) {
	o.Interval.Set(&v)
}

// SetIntervalNil sets the value for Interval to be an explicit nil
func (o *MailSend0) SetIntervalNil() {
	o.Interval.Set(nil)
}

// UnsetInterval ensures that no value is present for Interval, not even an explicit nil
func (o *MailSend0) UnsetInterval() {
	o.Interval.Unset()
}

// GetChannel returns the Channel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MailSend0) GetChannel() string {
	if o == nil || IsNil(o.Channel.Get()) {
		var ret string
		return ret
	}
	return *o.Channel.Get()
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MailSend0) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channel.Get(), o.Channel.IsSet()
}

// HasChannel returns a boolean if a field has been set.
func (o *MailSend0) HasChannel() bool {
	if o != nil && o.Channel.IsSet() {
		return true
	}

	return false
}

// SetChannel gets a reference to the given NullableString and assigns it to the Channel field.
func (o *MailSend0) SetChannel(v string) {
	o.Channel.Set(&v)
}

// SetChannelNil sets the value for Channel to be an explicit nil
func (o *MailSend0) SetChannelNil() {
	o.Channel.Set(nil)
}

// UnsetChannel ensures that no value is present for Channel, not even an explicit nil
func (o *MailSend0) UnsetChannel() {
	o.Channel.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *MailSend0) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *MailSend0) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *MailSend0) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *MailSend0) GetAttachments() bool {
	if o == nil || IsNil(o.Attachments) {
		var ret bool
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetAttachmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *MailSend0) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given bool and assigns it to the Attachments field.
func (o *MailSend0) SetAttachments(v bool) {
	o.Attachments = &v
}

// GetQueue returns the Queue field value if set, zero value otherwise.
func (o *MailSend0) GetQueue() bool {
	if o == nil || IsNil(o.Queue) {
		var ret bool
		return ret
	}
	return *o.Queue
}

// GetQueueOk returns a tuple with the Queue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetQueueOk() (*bool, bool) {
	if o == nil || IsNil(o.Queue) {
		return nil, false
	}
	return o.Queue, true
}

// HasQueue returns a boolean if a field has been set.
func (o *MailSend0) HasQueue() bool {
	if o != nil && !IsNil(o.Queue) {
		return true
	}

	return false
}

// SetQueue gets a reference to the given bool and assigns it to the Queue field.
func (o *MailSend0) SetQueue(v bool) {
	o.Queue = &v
}

// GetExtraHeaders returns the ExtraHeaders field value if set, zero value otherwise.
func (o *MailSend0) GetExtraHeaders() map[string]interface{} {
	if o == nil || IsNil(o.ExtraHeaders) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraHeaders
}

// GetExtraHeadersOk returns a tuple with the ExtraHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailSend0) GetExtraHeadersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraHeaders) {
		return map[string]interface{}{}, false
	}
	return o.ExtraHeaders, true
}

// HasExtraHeaders returns a boolean if a field has been set.
func (o *MailSend0) HasExtraHeaders() bool {
	if o != nil && !IsNil(o.ExtraHeaders) {
		return true
	}

	return false
}

// SetExtraHeaders gets a reference to the given map[string]interface{} and assigns it to the ExtraHeaders field.
func (o *MailSend0) SetExtraHeaders(v map[string]interface{}) {
	o.ExtraHeaders = v
}

func (o MailSend0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailSend0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if o.Html.IsSet() {
		toSerialize["html"] = o.Html.Get()
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Cc) {
		toSerialize["cc"] = o.Cc
	}
	if o.Interval.IsSet() {
		toSerialize["interval"] = o.Interval.Get()
	}
	if o.Channel.IsSet() {
		toSerialize["channel"] = o.Channel.Get()
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Queue) {
		toSerialize["queue"] = o.Queue
	}
	if !IsNil(o.ExtraHeaders) {
		toSerialize["extra_headers"] = o.ExtraHeaders
	}
	return toSerialize, nil
}

type NullableMailSend0 struct {
	value *MailSend0
	isSet bool
}

func (v NullableMailSend0) Get() *MailSend0 {
	return v.value
}

func (v *NullableMailSend0) Set(val *MailSend0) {
	v.value = val
	v.isSet = true
}

func (v NullableMailSend0) IsSet() bool {
	return v.isSet
}

func (v *NullableMailSend0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailSend0(val *MailSend0) *NullableMailSend0 {
	return &NullableMailSend0{value: val, isSet: true}
}

func (v NullableMailSend0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailSend0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
