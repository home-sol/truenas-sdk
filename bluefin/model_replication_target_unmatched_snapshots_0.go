/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// ReplicationTargetUnmatchedSnapshots0 the model 'ReplicationTargetUnmatchedSnapshots0'
type ReplicationTargetUnmatchedSnapshots0 string

// List of replication_target_unmatched_snapshots_0
const (
	PUSH ReplicationTargetUnmatchedSnapshots0 = "PUSH"
	PULL ReplicationTargetUnmatchedSnapshots0 = "PULL"
)

// All allowed values of ReplicationTargetUnmatchedSnapshots0 enum
var AllowedReplicationTargetUnmatchedSnapshots0EnumValues = []ReplicationTargetUnmatchedSnapshots0{
	"PUSH",
	"PULL",
}

func (v *ReplicationTargetUnmatchedSnapshots0) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationTargetUnmatchedSnapshots0(value)
	for _, existing := range AllowedReplicationTargetUnmatchedSnapshots0EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationTargetUnmatchedSnapshots0", value)
}

// NewReplicationTargetUnmatchedSnapshots0FromValue returns a pointer to a valid ReplicationTargetUnmatchedSnapshots0
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationTargetUnmatchedSnapshots0FromValue(v string) (*ReplicationTargetUnmatchedSnapshots0, error) {
	ev := ReplicationTargetUnmatchedSnapshots0(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationTargetUnmatchedSnapshots0: valid values are %v", v, AllowedReplicationTargetUnmatchedSnapshots0EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationTargetUnmatchedSnapshots0) IsValid() bool {
	for _, existing := range AllowedReplicationTargetUnmatchedSnapshots0EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to replication_target_unmatched_snapshots_0 value
func (v ReplicationTargetUnmatchedSnapshots0) Ptr() *ReplicationTargetUnmatchedSnapshots0 {
	return &v
}

type NullableReplicationTargetUnmatchedSnapshots0 struct {
	value *ReplicationTargetUnmatchedSnapshots0
	isSet bool
}

func (v NullableReplicationTargetUnmatchedSnapshots0) Get() *ReplicationTargetUnmatchedSnapshots0 {
	return v.value
}

func (v *NullableReplicationTargetUnmatchedSnapshots0) Set(val *ReplicationTargetUnmatchedSnapshots0) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationTargetUnmatchedSnapshots0) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationTargetUnmatchedSnapshots0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationTargetUnmatchedSnapshots0(val *ReplicationTargetUnmatchedSnapshots0) *NullableReplicationTargetUnmatchedSnapshots0 {
	return &NullableReplicationTargetUnmatchedSnapshots0{value: val, isSet: true}
}

func (v NullableReplicationTargetUnmatchedSnapshots0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationTargetUnmatchedSnapshots0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
