/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PrivateKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateKey{}

// PrivateKey struct for PrivateKey
type PrivateKey struct {
	GenerateKey   *bool   `json:"generate_key,omitempty"`
	ExistingKeyId *int32  `json:"existing_key_id,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// NewPrivateKey instantiates a new PrivateKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateKey() *PrivateKey {
	this := PrivateKey{}
	var generateKey bool
	this.GenerateKey = &generateKey
	return &this
}

// NewPrivateKeyWithDefaults instantiates a new PrivateKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateKeyWithDefaults() *PrivateKey {
	this := PrivateKey{}
	var generateKey bool
	this.GenerateKey = &generateKey
	return &this
}

// GetGenerateKey returns the GenerateKey field value if set, zero value otherwise.
func (o *PrivateKey) GetGenerateKey() bool {
	if o == nil || IsNil(o.GenerateKey) {
		var ret bool
		return ret
	}
	return *o.GenerateKey
}

// GetGenerateKeyOk returns a tuple with the GenerateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetGenerateKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateKey) {
		return nil, false
	}
	return o.GenerateKey, true
}

// HasGenerateKey returns a boolean if a field has been set.
func (o *PrivateKey) HasGenerateKey() bool {
	if o != nil && !IsNil(o.GenerateKey) {
		return true
	}

	return false
}

// SetGenerateKey gets a reference to the given bool and assigns it to the GenerateKey field.
func (o *PrivateKey) SetGenerateKey(v bool) {
	o.GenerateKey = &v
}

// GetExistingKeyId returns the ExistingKeyId field value if set, zero value otherwise.
func (o *PrivateKey) GetExistingKeyId() int32 {
	if o == nil || IsNil(o.ExistingKeyId) {
		var ret int32
		return ret
	}
	return *o.ExistingKeyId
}

// GetExistingKeyIdOk returns a tuple with the ExistingKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetExistingKeyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExistingKeyId) {
		return nil, false
	}
	return o.ExistingKeyId, true
}

// HasExistingKeyId returns a boolean if a field has been set.
func (o *PrivateKey) HasExistingKeyId() bool {
	if o != nil && !IsNil(o.ExistingKeyId) {
		return true
	}

	return false
}

// SetExistingKeyId gets a reference to the given int32 and assigns it to the ExistingKeyId field.
func (o *PrivateKey) SetExistingKeyId(v int32) {
	o.ExistingKeyId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PrivateKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PrivateKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PrivateKey) SetName(v string) {
	o.Name = &v
}

func (o PrivateKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GenerateKey) {
		toSerialize["generate_key"] = o.GenerateKey
	}
	if !IsNil(o.ExistingKeyId) {
		toSerialize["existing_key_id"] = o.ExistingKeyId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullablePrivateKey struct {
	value *PrivateKey
	isSet bool
}

func (v NullablePrivateKey) Get() *PrivateKey {
	return v.value
}

func (v *NullablePrivateKey) Set(val *PrivateKey) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateKey) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateKey(val *PrivateKey) *NullablePrivateKey {
	return &NullablePrivateKey{value: val, isSet: true}
}

func (v NullablePrivateKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
