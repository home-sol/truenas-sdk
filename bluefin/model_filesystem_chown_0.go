/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FilesystemChown0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesystemChown0{}

// FilesystemChown0 struct for FilesystemChown0
type FilesystemChown0 struct {
	// Change owner or group of file at `path`.
	Path *string `json:"path,omitempty"`
	// `uid` and `gid` specify new owner of the file. If either key is absent or None, then existing value on the file is not changed.
	Uid NullableInt32 `json:"uid,omitempty"`
	// `uid` and `gid` specify new owner of the file. If either key is absent or None, then existing value on the file is not changed.
	Gid     NullableInt32 `json:"gid,omitempty"`
	Options *Options      `json:"options,omitempty"`
}

// NewFilesystemChown0 instantiates a new FilesystemChown0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemChown0() *FilesystemChown0 {
	this := FilesystemChown0{}
	var options Options
	this.Options = &options
	return &this
}

// NewFilesystemChown0WithDefaults instantiates a new FilesystemChown0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemChown0WithDefaults() *FilesystemChown0 {
	this := FilesystemChown0{}
	var options Options
	this.Options = &options
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *FilesystemChown0) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemChown0) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *FilesystemChown0) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *FilesystemChown0) SetPath(v string) {
	o.Path = &v
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemChown0) GetUid() int32 {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret int32
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemChown0) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *FilesystemChown0) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt32 and assigns it to the Uid field.
func (o *FilesystemChown0) SetUid(v int32) {
	o.Uid.Set(&v)
}

// SetUidNil sets the value for Uid to be an explicit nil
func (o *FilesystemChown0) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *FilesystemChown0) UnsetUid() {
	o.Uid.Unset()
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemChown0) GetGid() int32 {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret int32
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemChown0) GetGidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *FilesystemChown0) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt32 and assigns it to the Gid field.
func (o *FilesystemChown0) SetGid(v int32) {
	o.Gid.Set(&v)
}

// SetGidNil sets the value for Gid to be an explicit nil
func (o *FilesystemChown0) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *FilesystemChown0) UnsetGid() {
	o.Gid.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *FilesystemChown0) GetOptions() Options {
	if o == nil || IsNil(o.Options) {
		var ret Options
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesystemChown0) GetOptionsOk() (*Options, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *FilesystemChown0) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given Options and assigns it to the Options field.
func (o *FilesystemChown0) SetOptions(v Options) {
	o.Options = &v
}

func (o FilesystemChown0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesystemChown0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableFilesystemChown0 struct {
	value *FilesystemChown0
	isSet bool
}

func (v NullableFilesystemChown0) Get() *FilesystemChown0 {
	return v.value
}

func (v *NullableFilesystemChown0) Set(val *FilesystemChown0) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemChown0) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemChown0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemChown0(val *FilesystemChown0) *NullableFilesystemChown0 {
	return &NullableFilesystemChown0{value: val, isSet: true}
}

func (v NullableFilesystemChown0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemChown0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
