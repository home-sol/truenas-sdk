/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the FailoverControl1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FailoverControl1{}

// FailoverControl1 struct for FailoverControl1
type FailoverControl1 struct {
	Active *bool `json:"active,omitempty"`
}

// NewFailoverControl1 instantiates a new FailoverControl1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverControl1() *FailoverControl1 {
	this := FailoverControl1{}
	return &this
}

// NewFailoverControl1WithDefaults instantiates a new FailoverControl1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverControl1WithDefaults() *FailoverControl1 {
	this := FailoverControl1{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *FailoverControl1) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FailoverControl1) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *FailoverControl1) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *FailoverControl1) SetActive(v bool) {
	o.Active = &v
}

func (o FailoverControl1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FailoverControl1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableFailoverControl1 struct {
	value *FailoverControl1
	isSet bool
}

func (v NullableFailoverControl1) Get() *FailoverControl1 {
	return v.value
}

func (v *NullableFailoverControl1) Set(val *FailoverControl1) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverControl1) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverControl1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverControl1(val *FailoverControl1) *NullableFailoverControl1 {
	return &NullableFailoverControl1{value: val, isSet: true}
}

func (v NullableFailoverControl1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverControl1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
