/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the InterfaceIpInUse0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceIpInUse0{}

// InterfaceIpInUse0 struct for InterfaceIpInUse0
type InterfaceIpInUse0 struct {
	Ipv4          *bool `json:"ipv4,omitempty"`
	Ipv6          *bool `json:"ipv6,omitempty"`
	Ipv6LinkLocal *bool `json:"ipv6_link_local,omitempty"`
	// `loopback` will return loopback interface addresses.
	Loopback *bool `json:"loopback,omitempty"`
	// `any` will return wildcard addresses (0.0.0.0 and ::).
	Any *bool `json:"any,omitempty"`
	// `static` when enabled will ensure we only return static ip's configured.
	Static *bool `json:"static,omitempty"`
}

// NewInterfaceIpInUse0 instantiates a new InterfaceIpInUse0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceIpInUse0() *InterfaceIpInUse0 {
	this := InterfaceIpInUse0{}
	var ipv4 bool
	this.Ipv4 = &ipv4
	var ipv6 bool
	this.Ipv6 = &ipv6
	var ipv6LinkLocal bool
	this.Ipv6LinkLocal = &ipv6LinkLocal
	var loopback bool
	this.Loopback = &loopback
	var any bool
	this.Any = &any
	var static bool
	this.Static = &static
	return &this
}

// NewInterfaceIpInUse0WithDefaults instantiates a new InterfaceIpInUse0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceIpInUse0WithDefaults() *InterfaceIpInUse0 {
	this := InterfaceIpInUse0{}
	var ipv4 bool
	this.Ipv4 = &ipv4
	var ipv6 bool
	this.Ipv6 = &ipv6
	var ipv6LinkLocal bool
	this.Ipv6LinkLocal = &ipv6LinkLocal
	var loopback bool
	this.Loopback = &loopback
	var any bool
	this.Any = &any
	var static bool
	this.Static = &static
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetIpv4() bool {
	if o == nil || IsNil(o.Ipv4) {
		var ret bool
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetIpv4Ok() (*bool, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given bool and assigns it to the Ipv4 field.
func (o *InterfaceIpInUse0) SetIpv4(v bool) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetIpv6() bool {
	if o == nil || IsNil(o.Ipv6) {
		var ret bool
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given bool and assigns it to the Ipv6 field.
func (o *InterfaceIpInUse0) SetIpv6(v bool) {
	o.Ipv6 = &v
}

// GetIpv6LinkLocal returns the Ipv6LinkLocal field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetIpv6LinkLocal() bool {
	if o == nil || IsNil(o.Ipv6LinkLocal) {
		var ret bool
		return ret
	}
	return *o.Ipv6LinkLocal
}

// GetIpv6LinkLocalOk returns a tuple with the Ipv6LinkLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetIpv6LinkLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6LinkLocal) {
		return nil, false
	}
	return o.Ipv6LinkLocal, true
}

// HasIpv6LinkLocal returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasIpv6LinkLocal() bool {
	if o != nil && !IsNil(o.Ipv6LinkLocal) {
		return true
	}

	return false
}

// SetIpv6LinkLocal gets a reference to the given bool and assigns it to the Ipv6LinkLocal field.
func (o *InterfaceIpInUse0) SetIpv6LinkLocal(v bool) {
	o.Ipv6LinkLocal = &v
}

// GetLoopback returns the Loopback field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetLoopback() bool {
	if o == nil || IsNil(o.Loopback) {
		var ret bool
		return ret
	}
	return *o.Loopback
}

// GetLoopbackOk returns a tuple with the Loopback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetLoopbackOk() (*bool, bool) {
	if o == nil || IsNil(o.Loopback) {
		return nil, false
	}
	return o.Loopback, true
}

// HasLoopback returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasLoopback() bool {
	if o != nil && !IsNil(o.Loopback) {
		return true
	}

	return false
}

// SetLoopback gets a reference to the given bool and assigns it to the Loopback field.
func (o *InterfaceIpInUse0) SetLoopback(v bool) {
	o.Loopback = &v
}

// GetAny returns the Any field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetAny() bool {
	if o == nil || IsNil(o.Any) {
		var ret bool
		return ret
	}
	return *o.Any
}

// GetAnyOk returns a tuple with the Any field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetAnyOk() (*bool, bool) {
	if o == nil || IsNil(o.Any) {
		return nil, false
	}
	return o.Any, true
}

// HasAny returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasAny() bool {
	if o != nil && !IsNil(o.Any) {
		return true
	}

	return false
}

// SetAny gets a reference to the given bool and assigns it to the Any field.
func (o *InterfaceIpInUse0) SetAny(v bool) {
	o.Any = &v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *InterfaceIpInUse0) GetStatic() bool {
	if o == nil || IsNil(o.Static) {
		var ret bool
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceIpInUse0) GetStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *InterfaceIpInUse0) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given bool and assigns it to the Static field.
func (o *InterfaceIpInUse0) SetStatic(v bool) {
	o.Static = &v
}

func (o InterfaceIpInUse0) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceIpInUse0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.Ipv6LinkLocal) {
		toSerialize["ipv6_link_local"] = o.Ipv6LinkLocal
	}
	if !IsNil(o.Loopback) {
		toSerialize["loopback"] = o.Loopback
	}
	if !IsNil(o.Any) {
		toSerialize["any"] = o.Any
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	return toSerialize, nil
}

type NullableInterfaceIpInUse0 struct {
	value *InterfaceIpInUse0
	isSet bool
}

func (v NullableInterfaceIpInUse0) Get() *InterfaceIpInUse0 {
	return v.value
}

func (v *NullableInterfaceIpInUse0) Set(val *InterfaceIpInUse0) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceIpInUse0) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceIpInUse0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceIpInUse0(val *InterfaceIpInUse0) *NullableInterfaceIpInUse0 {
	return &NullableInterfaceIpInUse0{value: val, isSet: true}
}

func (v NullableInterfaceIpInUse0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceIpInUse0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
