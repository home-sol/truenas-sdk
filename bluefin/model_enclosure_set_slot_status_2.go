/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
	"fmt"
)

// EnclosureSetSlotStatus2 the model 'EnclosureSetSlotStatus2'
type EnclosureSetSlotStatus2 string

// List of enclosure_set_slot_status_2
const (
	CLEAR    EnclosureSetSlotStatus2 = "CLEAR"
	FAULT    EnclosureSetSlotStatus2 = "FAULT"
	IDENTIFY EnclosureSetSlotStatus2 = "IDENTIFY"
)

// All allowed values of EnclosureSetSlotStatus2 enum
var AllowedEnclosureSetSlotStatus2EnumValues = []EnclosureSetSlotStatus2{
	"CLEAR",
	"FAULT",
	"IDENTIFY",
}

func (v *EnclosureSetSlotStatus2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnclosureSetSlotStatus2(value)
	for _, existing := range AllowedEnclosureSetSlotStatus2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnclosureSetSlotStatus2", value)
}

// NewEnclosureSetSlotStatus2FromValue returns a pointer to a valid EnclosureSetSlotStatus2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnclosureSetSlotStatus2FromValue(v string) (*EnclosureSetSlotStatus2, error) {
	ev := EnclosureSetSlotStatus2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnclosureSetSlotStatus2: valid values are %v", v, AllowedEnclosureSetSlotStatus2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnclosureSetSlotStatus2) IsValid() bool {
	for _, existing := range AllowedEnclosureSetSlotStatus2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enclosure_set_slot_status_2 value
func (v EnclosureSetSlotStatus2) Ptr() *EnclosureSetSlotStatus2 {
	return &v
}

type NullableEnclosureSetSlotStatus2 struct {
	value *EnclosureSetSlotStatus2
	isSet bool
}

func (v NullableEnclosureSetSlotStatus2) Get() *EnclosureSetSlotStatus2 {
	return v.value
}

func (v *NullableEnclosureSetSlotStatus2) Set(val *EnclosureSetSlotStatus2) {
	v.value = val
	v.isSet = true
}

func (v NullableEnclosureSetSlotStatus2) IsSet() bool {
	return v.isSet
}

func (v *NullableEnclosureSetSlotStatus2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnclosureSetSlotStatus2(val *EnclosureSetSlotStatus2) *NullableEnclosureSetSlotStatus2 {
	return &NullableEnclosureSetSlotStatus2{value: val, isSet: true}
}

func (v NullableEnclosureSetSlotStatus2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnclosureSetSlotStatus2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
