/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Disk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Disk{}

// Disk struct for Disk
type Disk struct {
	Identifier    string         `json:"identifier"`
	Name          string         `json:"name"`
	Subsystem     string         `json:"subsystem"`
	Number        int32          `json:"number"`
	Serial        string         `json:"serial"`
	Lunid         NullableString `json:"lunid"`
	Size          int64          `json:"size"`
	Description   string         `json:"description"`
	Transfermode  string         `json:"transfermode"`
	Hddstandby    HDDStandby     `json:"hddstandby"`
	Advpowermgmt  AdvPowermgmt   `json:"advpowermgmt"`
	Togglesmart   bool           `json:"togglesmart"`
	Smartoptions  string         `json:"smartoptions"`
	Expiretime    NullableString `json:"expiretime"`
	Critical      NullableInt32  `json:"critical"`
	Difference    NullableInt32  `json:"difference"`
	Informational NullableInt32  `json:"informational"`
	Model         NullableString `json:"model"`
	Rotationrate  NullableInt32  `json:"rotationrate"`
	Type          NullableString `json:"type"`
	ZfsGuid       NullableString `json:"zfs_guid"`
	Bus           string         `json:"bus"`
	Devname       string         `json:"devname"`
	Enclosure     DiskEnclosure  `json:"enclosure"`
	Pool          NullableString `json:"pool"`
	Passwd        *string        `json:"passwd,omitempty"`
	KmipUid       NullableString `json:"kmip_uid,omitempty"`
	SupportsSmart NullableBool   `json:"supports_smart,omitempty"`
}

// NewDisk instantiates a new Disk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisk(identifier string, name string, subsystem string, number int32, serial string, lunid NullableString, size int64, description string, transfermode string, hddstandby HDDStandby, advpowermgmt AdvPowermgmt, togglesmart bool, smartoptions string, expiretime NullableString, critical NullableInt32, difference NullableInt32, informational NullableInt32, model NullableString, rotationrate NullableInt32, type_ NullableString, zfsGuid NullableString, bus string, devname string, enclosure DiskEnclosure, pool NullableString) *Disk {
	this := Disk{}
	this.Identifier = identifier
	this.Name = name
	this.Subsystem = subsystem
	this.Number = number
	this.Serial = serial
	this.Lunid = lunid
	this.Size = size
	this.Description = description
	this.Transfermode = transfermode
	this.Hddstandby = hddstandby
	this.Advpowermgmt = advpowermgmt
	this.Togglesmart = togglesmart
	this.Smartoptions = smartoptions
	this.Expiretime = expiretime
	this.Critical = critical
	this.Difference = difference
	this.Informational = informational
	this.Model = model
	this.Rotationrate = rotationrate
	this.Type = type_
	this.ZfsGuid = zfsGuid
	this.Bus = bus
	this.Devname = devname
	this.Enclosure = enclosure
	this.Pool = pool
	return &this
}

// NewDiskWithDefaults instantiates a new Disk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskWithDefaults() *Disk {
	this := Disk{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *Disk) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Disk) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Disk) SetIdentifier(v string) {
	o.Identifier = v
}

// GetName returns the Name field value
func (o *Disk) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Disk) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Disk) SetName(v string) {
	o.Name = v
}

// GetSubsystem returns the Subsystem field value
func (o *Disk) GetSubsystem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subsystem
}

// GetSubsystemOk returns a tuple with the Subsystem field value
// and a boolean to check if the value has been set.
func (o *Disk) GetSubsystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subsystem, true
}

// SetSubsystem sets field value
func (o *Disk) SetSubsystem(v string) {
	o.Subsystem = v
}

// GetNumber returns the Number field value
func (o *Disk) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Disk) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Disk) SetNumber(v int32) {
	o.Number = v
}

// GetSerial returns the Serial field value
func (o *Disk) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *Disk) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *Disk) SetSerial(v string) {
	o.Serial = v
}

// GetLunid returns the Lunid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetLunid() string {
	if o == nil || o.Lunid.Get() == nil {
		var ret string
		return ret
	}

	return *o.Lunid.Get()
}

// GetLunidOk returns a tuple with the Lunid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetLunidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lunid.Get(), o.Lunid.IsSet()
}

// SetLunid sets field value
func (o *Disk) SetLunid(v string) {
	o.Lunid.Set(&v)
}

// GetSize returns the Size field value
func (o *Disk) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Disk) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Disk) SetSize(v int64) {
	o.Size = v
}

// GetDescription returns the Description field value
func (o *Disk) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Disk) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Disk) SetDescription(v string) {
	o.Description = v
}

// GetTransfermode returns the Transfermode field value
func (o *Disk) GetTransfermode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transfermode
}

// GetTransfermodeOk returns a tuple with the Transfermode field value
// and a boolean to check if the value has been set.
func (o *Disk) GetTransfermodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transfermode, true
}

// SetTransfermode sets field value
func (o *Disk) SetTransfermode(v string) {
	o.Transfermode = v
}

// GetHddstandby returns the Hddstandby field value
func (o *Disk) GetHddstandby() HDDStandby {
	if o == nil {
		var ret HDDStandby
		return ret
	}

	return o.Hddstandby
}

// GetHddstandbyOk returns a tuple with the Hddstandby field value
// and a boolean to check if the value has been set.
func (o *Disk) GetHddstandbyOk() (*HDDStandby, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hddstandby, true
}

// SetHddstandby sets field value
func (o *Disk) SetHddstandby(v HDDStandby) {
	o.Hddstandby = v
}

// GetAdvpowermgmt returns the Advpowermgmt field value
func (o *Disk) GetAdvpowermgmt() AdvPowermgmt {
	if o == nil {
		var ret AdvPowermgmt
		return ret
	}

	return o.Advpowermgmt
}

// GetAdvpowermgmtOk returns a tuple with the Advpowermgmt field value
// and a boolean to check if the value has been set.
func (o *Disk) GetAdvpowermgmtOk() (*AdvPowermgmt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Advpowermgmt, true
}

// SetAdvpowermgmt sets field value
func (o *Disk) SetAdvpowermgmt(v AdvPowermgmt) {
	o.Advpowermgmt = v
}

// GetTogglesmart returns the Togglesmart field value
func (o *Disk) GetTogglesmart() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Togglesmart
}

// GetTogglesmartOk returns a tuple with the Togglesmart field value
// and a boolean to check if the value has been set.
func (o *Disk) GetTogglesmartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Togglesmart, true
}

// SetTogglesmart sets field value
func (o *Disk) SetTogglesmart(v bool) {
	o.Togglesmart = v
}

// GetSmartoptions returns the Smartoptions field value
func (o *Disk) GetSmartoptions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Smartoptions
}

// GetSmartoptionsOk returns a tuple with the Smartoptions field value
// and a boolean to check if the value has been set.
func (o *Disk) GetSmartoptionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Smartoptions, true
}

// SetSmartoptions sets field value
func (o *Disk) SetSmartoptions(v string) {
	o.Smartoptions = v
}

// GetExpiretime returns the Expiretime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetExpiretime() string {
	if o == nil || o.Expiretime.Get() == nil {
		var ret string
		return ret
	}

	return *o.Expiretime.Get()
}

// GetExpiretimeOk returns a tuple with the Expiretime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetExpiretimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expiretime.Get(), o.Expiretime.IsSet()
}

// SetExpiretime sets field value
func (o *Disk) SetExpiretime(v string) {
	o.Expiretime.Set(&v)
}

// GetCritical returns the Critical field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Disk) GetCritical() int32 {
	if o == nil || o.Critical.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Critical.Get()
}

// GetCriticalOk returns a tuple with the Critical field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetCriticalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Critical.Get(), o.Critical.IsSet()
}

// SetCritical sets field value
func (o *Disk) SetCritical(v int32) {
	o.Critical.Set(&v)
}

// GetDifference returns the Difference field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Disk) GetDifference() int32 {
	if o == nil || o.Difference.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Difference.Get()
}

// GetDifferenceOk returns a tuple with the Difference field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetDifferenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Difference.Get(), o.Difference.IsSet()
}

// SetDifference sets field value
func (o *Disk) SetDifference(v int32) {
	o.Difference.Set(&v)
}

// GetInformational returns the Informational field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Disk) GetInformational() int32 {
	if o == nil || o.Informational.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Informational.Get()
}

// GetInformationalOk returns a tuple with the Informational field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetInformationalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Informational.Get(), o.Informational.IsSet()
}

// SetInformational sets field value
func (o *Disk) SetInformational(v int32) {
	o.Informational.Set(&v)
}

// GetModel returns the Model field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetModel() string {
	if o == nil || o.Model.Get() == nil {
		var ret string
		return ret
	}

	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// SetModel sets field value
func (o *Disk) SetModel(v string) {
	o.Model.Set(&v)
}

// GetRotationrate returns the Rotationrate field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Disk) GetRotationrate() int32 {
	if o == nil || o.Rotationrate.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Rotationrate.Get()
}

// GetRotationrateOk returns a tuple with the Rotationrate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetRotationrateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rotationrate.Get(), o.Rotationrate.IsSet()
}

// SetRotationrate sets field value
func (o *Disk) SetRotationrate(v int32) {
	o.Rotationrate.Set(&v)
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *Disk) SetType(v string) {
	o.Type.Set(&v)
}

// GetZfsGuid returns the ZfsGuid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetZfsGuid() string {
	if o == nil || o.ZfsGuid.Get() == nil {
		var ret string
		return ret
	}

	return *o.ZfsGuid.Get()
}

// GetZfsGuidOk returns a tuple with the ZfsGuid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetZfsGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZfsGuid.Get(), o.ZfsGuid.IsSet()
}

// SetZfsGuid sets field value
func (o *Disk) SetZfsGuid(v string) {
	o.ZfsGuid.Set(&v)
}

// GetBus returns the Bus field value
func (o *Disk) GetBus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bus
}

// GetBusOk returns a tuple with the Bus field value
// and a boolean to check if the value has been set.
func (o *Disk) GetBusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bus, true
}

// SetBus sets field value
func (o *Disk) SetBus(v string) {
	o.Bus = v
}

// GetDevname returns the Devname field value
func (o *Disk) GetDevname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Devname
}

// GetDevnameOk returns a tuple with the Devname field value
// and a boolean to check if the value has been set.
func (o *Disk) GetDevnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Devname, true
}

// SetDevname sets field value
func (o *Disk) SetDevname(v string) {
	o.Devname = v
}

// GetEnclosure returns the Enclosure field value
func (o *Disk) GetEnclosure() DiskEnclosure {
	if o == nil {
		var ret DiskEnclosure
		return ret
	}

	return o.Enclosure
}

// GetEnclosureOk returns a tuple with the Enclosure field value
// and a boolean to check if the value has been set.
func (o *Disk) GetEnclosureOk() (*DiskEnclosure, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enclosure, true
}

// SetEnclosure sets field value
func (o *Disk) SetEnclosure(v DiskEnclosure) {
	o.Enclosure = v
}

// GetPool returns the Pool field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Disk) GetPool() string {
	if o == nil || o.Pool.Get() == nil {
		var ret string
		return ret
	}

	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// SetPool sets field value
func (o *Disk) SetPool(v string) {
	o.Pool.Set(&v)
}

// GetPasswd returns the Passwd field value if set, zero value otherwise.
func (o *Disk) GetPasswd() string {
	if o == nil || IsNil(o.Passwd) {
		var ret string
		return ret
	}
	return *o.Passwd
}

// GetPasswdOk returns a tuple with the Passwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetPasswdOk() (*string, bool) {
	if o == nil || IsNil(o.Passwd) {
		return nil, false
	}
	return o.Passwd, true
}

// HasPasswd returns a boolean if a field has been set.
func (o *Disk) HasPasswd() bool {
	if o != nil && !IsNil(o.Passwd) {
		return true
	}

	return false
}

// SetPasswd gets a reference to the given string and assigns it to the Passwd field.
func (o *Disk) SetPasswd(v string) {
	o.Passwd = &v
}

// GetKmipUid returns the KmipUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetKmipUid() string {
	if o == nil || IsNil(o.KmipUid.Get()) {
		var ret string
		return ret
	}
	return *o.KmipUid.Get()
}

// GetKmipUidOk returns a tuple with the KmipUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetKmipUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmipUid.Get(), o.KmipUid.IsSet()
}

// HasKmipUid returns a boolean if a field has been set.
func (o *Disk) HasKmipUid() bool {
	if o != nil && o.KmipUid.IsSet() {
		return true
	}

	return false
}

// SetKmipUid gets a reference to the given NullableString and assigns it to the KmipUid field.
func (o *Disk) SetKmipUid(v string) {
	o.KmipUid.Set(&v)
}

// SetKmipUidNil sets the value for KmipUid to be an explicit nil
func (o *Disk) SetKmipUidNil() {
	o.KmipUid.Set(nil)
}

// UnsetKmipUid ensures that no value is present for KmipUid, not even an explicit nil
func (o *Disk) UnsetKmipUid() {
	o.KmipUid.Unset()
}

// GetSupportsSmart returns the SupportsSmart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetSupportsSmart() bool {
	if o == nil || IsNil(o.SupportsSmart.Get()) {
		var ret bool
		return ret
	}
	return *o.SupportsSmart.Get()
}

// GetSupportsSmartOk returns a tuple with the SupportsSmart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetSupportsSmartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportsSmart.Get(), o.SupportsSmart.IsSet()
}

// HasSupportsSmart returns a boolean if a field has been set.
func (o *Disk) HasSupportsSmart() bool {
	if o != nil && o.SupportsSmart.IsSet() {
		return true
	}

	return false
}

// SetSupportsSmart gets a reference to the given NullableBool and assigns it to the SupportsSmart field.
func (o *Disk) SetSupportsSmart(v bool) {
	o.SupportsSmart.Set(&v)
}

// SetSupportsSmartNil sets the value for SupportsSmart to be an explicit nil
func (o *Disk) SetSupportsSmartNil() {
	o.SupportsSmart.Set(nil)
}

// UnsetSupportsSmart ensures that no value is present for SupportsSmart, not even an explicit nil
func (o *Disk) UnsetSupportsSmart() {
	o.SupportsSmart.Unset()
}

func (o Disk) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Disk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: identifier is readOnly
	// skip: name is readOnly
	// skip: subsystem is readOnly
	toSerialize["number"] = o.Number
	// skip: serial is readOnly
	toSerialize["lunid"] = o.Lunid.Get()
	// skip: size is readOnly
	toSerialize["description"] = o.Description
	// skip: transfermode is readOnly
	toSerialize["hddstandby"] = o.Hddstandby
	toSerialize["advpowermgmt"] = o.Advpowermgmt
	toSerialize["togglesmart"] = o.Togglesmart
	toSerialize["smartoptions"] = o.Smartoptions
	toSerialize["expiretime"] = o.Expiretime.Get()
	toSerialize["critical"] = o.Critical.Get()
	toSerialize["difference"] = o.Difference.Get()
	toSerialize["informational"] = o.Informational.Get()
	toSerialize["model"] = o.Model.Get()
	toSerialize["rotationrate"] = o.Rotationrate.Get()
	toSerialize["type"] = o.Type.Get()
	toSerialize["zfs_guid"] = o.ZfsGuid.Get()
	toSerialize["bus"] = o.Bus
	// skip: devname is readOnly
	toSerialize["enclosure"] = o.Enclosure
	toSerialize["pool"] = o.Pool.Get()
	if !IsNil(o.Passwd) {
		toSerialize["passwd"] = o.Passwd
	}
	if o.KmipUid.IsSet() {
		toSerialize["kmip_uid"] = o.KmipUid.Get()
	}
	if o.SupportsSmart.IsSet() {
		toSerialize["supports_smart"] = o.SupportsSmart.Get()
	}
	return toSerialize, nil
}

type NullableDisk struct {
	value *Disk
	isSet bool
}

func (v NullableDisk) Get() *Disk {
	return v.value
}

func (v *NullableDisk) Set(val *Disk) {
	v.value = val
	v.isSet = true
}

func (v NullableDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisk(val *Disk) *NullableDisk {
	return &NullableDisk{value: val, isSet: true}
}

func (v NullableDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
