/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the CoreDebug1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoreDebug1{}

// CoreDebug1 struct for CoreDebug1
type CoreDebug1 struct {
	Secret      *string `json:"secret,omitempty"`
	BindAddress *string `json:"bind_address,omitempty"`
	BindPort    *int32  `json:"bind_port,omitempty"`
	Host        *string `json:"host,omitempty"`
	WaitAttach  *bool   `json:"wait_attach,omitempty"`
	LocalPath   *string `json:"local_path,omitempty"`
	Threaded    *bool   `json:"threaded,omitempty"`
}

// NewCoreDebug1 instantiates a new CoreDebug1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreDebug1() *CoreDebug1 {
	this := CoreDebug1{}
	var bindAddress string
	this.BindAddress = &bindAddress
	var bindPort int32
	this.BindPort = &bindPort
	var waitAttach bool
	this.WaitAttach = &waitAttach
	var threaded bool
	this.Threaded = &threaded
	return &this
}

// NewCoreDebug1WithDefaults instantiates a new CoreDebug1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreDebug1WithDefaults() *CoreDebug1 {
	this := CoreDebug1{}
	var bindAddress string
	this.BindAddress = &bindAddress
	var bindPort int32
	this.BindPort = &bindPort
	var waitAttach bool
	this.WaitAttach = &waitAttach
	var threaded bool
	this.Threaded = &threaded
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *CoreDebug1) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *CoreDebug1) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *CoreDebug1) SetSecret(v string) {
	o.Secret = &v
}

// GetBindAddress returns the BindAddress field value if set, zero value otherwise.
func (o *CoreDebug1) GetBindAddress() string {
	if o == nil || IsNil(o.BindAddress) {
		var ret string
		return ret
	}
	return *o.BindAddress
}

// GetBindAddressOk returns a tuple with the BindAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetBindAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BindAddress) {
		return nil, false
	}
	return o.BindAddress, true
}

// HasBindAddress returns a boolean if a field has been set.
func (o *CoreDebug1) HasBindAddress() bool {
	if o != nil && !IsNil(o.BindAddress) {
		return true
	}

	return false
}

// SetBindAddress gets a reference to the given string and assigns it to the BindAddress field.
func (o *CoreDebug1) SetBindAddress(v string) {
	o.BindAddress = &v
}

// GetBindPort returns the BindPort field value if set, zero value otherwise.
func (o *CoreDebug1) GetBindPort() int32 {
	if o == nil || IsNil(o.BindPort) {
		var ret int32
		return ret
	}
	return *o.BindPort
}

// GetBindPortOk returns a tuple with the BindPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetBindPortOk() (*int32, bool) {
	if o == nil || IsNil(o.BindPort) {
		return nil, false
	}
	return o.BindPort, true
}

// HasBindPort returns a boolean if a field has been set.
func (o *CoreDebug1) HasBindPort() bool {
	if o != nil && !IsNil(o.BindPort) {
		return true
	}

	return false
}

// SetBindPort gets a reference to the given int32 and assigns it to the BindPort field.
func (o *CoreDebug1) SetBindPort(v int32) {
	o.BindPort = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *CoreDebug1) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *CoreDebug1) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *CoreDebug1) SetHost(v string) {
	o.Host = &v
}

// GetWaitAttach returns the WaitAttach field value if set, zero value otherwise.
func (o *CoreDebug1) GetWaitAttach() bool {
	if o == nil || IsNil(o.WaitAttach) {
		var ret bool
		return ret
	}
	return *o.WaitAttach
}

// GetWaitAttachOk returns a tuple with the WaitAttach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetWaitAttachOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitAttach) {
		return nil, false
	}
	return o.WaitAttach, true
}

// HasWaitAttach returns a boolean if a field has been set.
func (o *CoreDebug1) HasWaitAttach() bool {
	if o != nil && !IsNil(o.WaitAttach) {
		return true
	}

	return false
}

// SetWaitAttach gets a reference to the given bool and assigns it to the WaitAttach field.
func (o *CoreDebug1) SetWaitAttach(v bool) {
	o.WaitAttach = &v
}

// GetLocalPath returns the LocalPath field value if set, zero value otherwise.
func (o *CoreDebug1) GetLocalPath() string {
	if o == nil || IsNil(o.LocalPath) {
		var ret string
		return ret
	}
	return *o.LocalPath
}

// GetLocalPathOk returns a tuple with the LocalPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetLocalPathOk() (*string, bool) {
	if o == nil || IsNil(o.LocalPath) {
		return nil, false
	}
	return o.LocalPath, true
}

// HasLocalPath returns a boolean if a field has been set.
func (o *CoreDebug1) HasLocalPath() bool {
	if o != nil && !IsNil(o.LocalPath) {
		return true
	}

	return false
}

// SetLocalPath gets a reference to the given string and assigns it to the LocalPath field.
func (o *CoreDebug1) SetLocalPath(v string) {
	o.LocalPath = &v
}

// GetThreaded returns the Threaded field value if set, zero value otherwise.
func (o *CoreDebug1) GetThreaded() bool {
	if o == nil || IsNil(o.Threaded) {
		var ret bool
		return ret
	}
	return *o.Threaded
}

// GetThreadedOk returns a tuple with the Threaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoreDebug1) GetThreadedOk() (*bool, bool) {
	if o == nil || IsNil(o.Threaded) {
		return nil, false
	}
	return o.Threaded, true
}

// HasThreaded returns a boolean if a field has been set.
func (o *CoreDebug1) HasThreaded() bool {
	if o != nil && !IsNil(o.Threaded) {
		return true
	}

	return false
}

// SetThreaded gets a reference to the given bool and assigns it to the Threaded field.
func (o *CoreDebug1) SetThreaded(v bool) {
	o.Threaded = &v
}

func (o CoreDebug1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoreDebug1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.BindAddress) {
		toSerialize["bind_address"] = o.BindAddress
	}
	if !IsNil(o.BindPort) {
		toSerialize["bind_port"] = o.BindPort
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.WaitAttach) {
		toSerialize["wait_attach"] = o.WaitAttach
	}
	if !IsNil(o.LocalPath) {
		toSerialize["local_path"] = o.LocalPath
	}
	if !IsNil(o.Threaded) {
		toSerialize["threaded"] = o.Threaded
	}
	return toSerialize, nil
}

type NullableCoreDebug1 struct {
	value *CoreDebug1
	isSet bool
}

func (v NullableCoreDebug1) Get() *CoreDebug1 {
	return v.value
}

func (v *NullableCoreDebug1) Set(val *CoreDebug1) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreDebug1) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreDebug1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreDebug1(val *CoreDebug1) *NullableCoreDebug1 {
	return &NullableCoreDebug1{value: val, isSet: true}
}

func (v NullableCoreDebug1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreDebug1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
