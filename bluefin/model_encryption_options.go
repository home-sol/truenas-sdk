/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the EncryptionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptionOptions{}

// EncryptionOptions `encryption_options` specifies configuration for encryption of root dataset for `name` pool. `encryption_options.passphrase` must be specified if encryption for root dataset is desired with a passphrase as a key. Otherwise a hex encoded key can be specified by providing `encryption_options.key`. `encryption_options.generate_key` when enabled automatically generates the key to be used for dataset encryption.
type EncryptionOptions struct {
	GenerateKey *bool          `json:"generate_key,omitempty"`
	Pbkdf2iters *int32         `json:"pbkdf2iters,omitempty"`
	Algorithm   *string        `json:"algorithm,omitempty"`
	Passphrase  NullableString `json:"passphrase,omitempty"`
	Key         NullableString `json:"key,omitempty"`
}

// NewEncryptionOptions instantiates a new EncryptionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionOptions() *EncryptionOptions {
	this := EncryptionOptions{}
	var generateKey bool
	this.GenerateKey = &generateKey
	var pbkdf2iters int32
	this.Pbkdf2iters = &pbkdf2iters
	var algorithm string
	this.Algorithm = &algorithm
	return &this
}

// NewEncryptionOptionsWithDefaults instantiates a new EncryptionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionOptionsWithDefaults() *EncryptionOptions {
	this := EncryptionOptions{}
	var generateKey bool
	this.GenerateKey = &generateKey
	var pbkdf2iters int32
	this.Pbkdf2iters = &pbkdf2iters
	var algorithm string
	this.Algorithm = &algorithm
	return &this
}

// GetGenerateKey returns the GenerateKey field value if set, zero value otherwise.
func (o *EncryptionOptions) GetGenerateKey() bool {
	if o == nil || IsNil(o.GenerateKey) {
		var ret bool
		return ret
	}
	return *o.GenerateKey
}

// GetGenerateKeyOk returns a tuple with the GenerateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionOptions) GetGenerateKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateKey) {
		return nil, false
	}
	return o.GenerateKey, true
}

// HasGenerateKey returns a boolean if a field has been set.
func (o *EncryptionOptions) HasGenerateKey() bool {
	if o != nil && !IsNil(o.GenerateKey) {
		return true
	}

	return false
}

// SetGenerateKey gets a reference to the given bool and assigns it to the GenerateKey field.
func (o *EncryptionOptions) SetGenerateKey(v bool) {
	o.GenerateKey = &v
}

// GetPbkdf2iters returns the Pbkdf2iters field value if set, zero value otherwise.
func (o *EncryptionOptions) GetPbkdf2iters() int32 {
	if o == nil || IsNil(o.Pbkdf2iters) {
		var ret int32
		return ret
	}
	return *o.Pbkdf2iters
}

// GetPbkdf2itersOk returns a tuple with the Pbkdf2iters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionOptions) GetPbkdf2itersOk() (*int32, bool) {
	if o == nil || IsNil(o.Pbkdf2iters) {
		return nil, false
	}
	return o.Pbkdf2iters, true
}

// HasPbkdf2iters returns a boolean if a field has been set.
func (o *EncryptionOptions) HasPbkdf2iters() bool {
	if o != nil && !IsNil(o.Pbkdf2iters) {
		return true
	}

	return false
}

// SetPbkdf2iters gets a reference to the given int32 and assigns it to the Pbkdf2iters field.
func (o *EncryptionOptions) SetPbkdf2iters(v int32) {
	o.Pbkdf2iters = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *EncryptionOptions) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptionOptions) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *EncryptionOptions) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *EncryptionOptions) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionOptions) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase.Get()) {
		var ret string
		return ret
	}
	return *o.Passphrase.Get()
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionOptions) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passphrase.Get(), o.Passphrase.IsSet()
}

// HasPassphrase returns a boolean if a field has been set.
func (o *EncryptionOptions) HasPassphrase() bool {
	if o != nil && o.Passphrase.IsSet() {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given NullableString and assigns it to the Passphrase field.
func (o *EncryptionOptions) SetPassphrase(v string) {
	o.Passphrase.Set(&v)
}

// SetPassphraseNil sets the value for Passphrase to be an explicit nil
func (o *EncryptionOptions) SetPassphraseNil() {
	o.Passphrase.Set(nil)
}

// UnsetPassphrase ensures that no value is present for Passphrase, not even an explicit nil
func (o *EncryptionOptions) UnsetPassphrase() {
	o.Passphrase.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionOptions) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionOptions) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *EncryptionOptions) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *EncryptionOptions) SetKey(v string) {
	o.Key.Set(&v)
}

// SetKeyNil sets the value for Key to be an explicit nil
func (o *EncryptionOptions) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *EncryptionOptions) UnsetKey() {
	o.Key.Unset()
}

func (o EncryptionOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GenerateKey) {
		toSerialize["generate_key"] = o.GenerateKey
	}
	if !IsNil(o.Pbkdf2iters) {
		toSerialize["pbkdf2iters"] = o.Pbkdf2iters
	}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.Passphrase.IsSet() {
		toSerialize["passphrase"] = o.Passphrase.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	return toSerialize, nil
}

type NullableEncryptionOptions struct {
	value *EncryptionOptions
	isSet bool
}

func (v NullableEncryptionOptions) Get() *EncryptionOptions {
	return v.value
}

func (v *NullableEncryptionOptions) Set(val *EncryptionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionOptions(val *EncryptionOptions) *NullableEncryptionOptions {
	return &NullableEncryptionOptions{value: val, isSet: true}
}

func (v NullableEncryptionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
