/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the PoolAttach1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PoolAttach1{}

// PoolAttach1 struct for PoolAttach1
type PoolAttach1 struct {
	TargetVdev            *string `json:"target_vdev,omitempty"`
	NewDisk               *string `json:"new_disk,omitempty"`
	AllowDuplicateSerials *bool   `json:"allow_duplicate_serials,omitempty"`
}

// NewPoolAttach1 instantiates a new PoolAttach1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolAttach1() *PoolAttach1 {
	this := PoolAttach1{}
	var allowDuplicateSerials bool
	this.AllowDuplicateSerials = &allowDuplicateSerials
	return &this
}

// NewPoolAttach1WithDefaults instantiates a new PoolAttach1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolAttach1WithDefaults() *PoolAttach1 {
	this := PoolAttach1{}
	var allowDuplicateSerials bool
	this.AllowDuplicateSerials = &allowDuplicateSerials
	return &this
}

// GetTargetVdev returns the TargetVdev field value if set, zero value otherwise.
func (o *PoolAttach1) GetTargetVdev() string {
	if o == nil || IsNil(o.TargetVdev) {
		var ret string
		return ret
	}
	return *o.TargetVdev
}

// GetTargetVdevOk returns a tuple with the TargetVdev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolAttach1) GetTargetVdevOk() (*string, bool) {
	if o == nil || IsNil(o.TargetVdev) {
		return nil, false
	}
	return o.TargetVdev, true
}

// HasTargetVdev returns a boolean if a field has been set.
func (o *PoolAttach1) HasTargetVdev() bool {
	if o != nil && !IsNil(o.TargetVdev) {
		return true
	}

	return false
}

// SetTargetVdev gets a reference to the given string and assigns it to the TargetVdev field.
func (o *PoolAttach1) SetTargetVdev(v string) {
	o.TargetVdev = &v
}

// GetNewDisk returns the NewDisk field value if set, zero value otherwise.
func (o *PoolAttach1) GetNewDisk() string {
	if o == nil || IsNil(o.NewDisk) {
		var ret string
		return ret
	}
	return *o.NewDisk
}

// GetNewDiskOk returns a tuple with the NewDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolAttach1) GetNewDiskOk() (*string, bool) {
	if o == nil || IsNil(o.NewDisk) {
		return nil, false
	}
	return o.NewDisk, true
}

// HasNewDisk returns a boolean if a field has been set.
func (o *PoolAttach1) HasNewDisk() bool {
	if o != nil && !IsNil(o.NewDisk) {
		return true
	}

	return false
}

// SetNewDisk gets a reference to the given string and assigns it to the NewDisk field.
func (o *PoolAttach1) SetNewDisk(v string) {
	o.NewDisk = &v
}

// GetAllowDuplicateSerials returns the AllowDuplicateSerials field value if set, zero value otherwise.
func (o *PoolAttach1) GetAllowDuplicateSerials() bool {
	if o == nil || IsNil(o.AllowDuplicateSerials) {
		var ret bool
		return ret
	}
	return *o.AllowDuplicateSerials
}

// GetAllowDuplicateSerialsOk returns a tuple with the AllowDuplicateSerials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolAttach1) GetAllowDuplicateSerialsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDuplicateSerials) {
		return nil, false
	}
	return o.AllowDuplicateSerials, true
}

// HasAllowDuplicateSerials returns a boolean if a field has been set.
func (o *PoolAttach1) HasAllowDuplicateSerials() bool {
	if o != nil && !IsNil(o.AllowDuplicateSerials) {
		return true
	}

	return false
}

// SetAllowDuplicateSerials gets a reference to the given bool and assigns it to the AllowDuplicateSerials field.
func (o *PoolAttach1) SetAllowDuplicateSerials(v bool) {
	o.AllowDuplicateSerials = &v
}

func (o PoolAttach1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PoolAttach1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetVdev) {
		toSerialize["target_vdev"] = o.TargetVdev
	}
	if !IsNil(o.NewDisk) {
		toSerialize["new_disk"] = o.NewDisk
	}
	if !IsNil(o.AllowDuplicateSerials) {
		toSerialize["allow_duplicate_serials"] = o.AllowDuplicateSerials
	}
	return toSerialize, nil
}

type NullablePoolAttach1 struct {
	value *PoolAttach1
	isSet bool
}

func (v NullablePoolAttach1) Get() *PoolAttach1 {
	return v.value
}

func (v *NullablePoolAttach1) Set(val *PoolAttach1) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolAttach1) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolAttach1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolAttach1(val *PoolAttach1) *NullablePoolAttach1 {
	return &NullablePoolAttach1{value: val, isSet: true}
}

func (v NullablePoolAttach1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolAttach1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
