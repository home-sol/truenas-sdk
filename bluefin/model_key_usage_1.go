/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the KeyUsage1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyUsage1{}

// KeyUsage1 struct for KeyUsage1
type KeyUsage1 struct {
	Enabled           *bool `json:"enabled,omitempty"`
	DigitalSignature  *bool `json:"digital_signature,omitempty"`
	ContentCommitment *bool `json:"content_commitment,omitempty"`
	KeyEncipherment   *bool `json:"key_encipherment,omitempty"`
	DataEncipherment  *bool `json:"data_encipherment,omitempty"`
	KeyAgreement      *bool `json:"key_agreement,omitempty"`
	KeyCertSign       *bool `json:"key_cert_sign,omitempty"`
	CrlSign           *bool `json:"crl_sign,omitempty"`
	EncipherOnly      *bool `json:"encipher_only,omitempty"`
	DecipherOnly      *bool `json:"decipher_only,omitempty"`
	ExtensionCritical *bool `json:"extension_critical,omitempty"`
}

// NewKeyUsage1 instantiates a new KeyUsage1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyUsage1() *KeyUsage1 {
	this := KeyUsage1{}
	var enabled bool
	this.Enabled = &enabled
	var digitalSignature bool
	this.DigitalSignature = &digitalSignature
	var contentCommitment bool
	this.ContentCommitment = &contentCommitment
	var keyEncipherment bool
	this.KeyEncipherment = &keyEncipherment
	var dataEncipherment bool
	this.DataEncipherment = &dataEncipherment
	var keyAgreement bool
	this.KeyAgreement = &keyAgreement
	var keyCertSign bool
	this.KeyCertSign = &keyCertSign
	var crlSign bool
	this.CrlSign = &crlSign
	var encipherOnly bool
	this.EncipherOnly = &encipherOnly
	var decipherOnly bool
	this.DecipherOnly = &decipherOnly
	var extensionCritical bool
	this.ExtensionCritical = &extensionCritical
	return &this
}

// NewKeyUsage1WithDefaults instantiates a new KeyUsage1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyUsage1WithDefaults() *KeyUsage1 {
	this := KeyUsage1{}
	var enabled bool
	this.Enabled = &enabled
	var digitalSignature bool
	this.DigitalSignature = &digitalSignature
	var contentCommitment bool
	this.ContentCommitment = &contentCommitment
	var keyEncipherment bool
	this.KeyEncipherment = &keyEncipherment
	var dataEncipherment bool
	this.DataEncipherment = &dataEncipherment
	var keyAgreement bool
	this.KeyAgreement = &keyAgreement
	var keyCertSign bool
	this.KeyCertSign = &keyCertSign
	var crlSign bool
	this.CrlSign = &crlSign
	var encipherOnly bool
	this.EncipherOnly = &encipherOnly
	var decipherOnly bool
	this.DecipherOnly = &decipherOnly
	var extensionCritical bool
	this.ExtensionCritical = &extensionCritical
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *KeyUsage1) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *KeyUsage1) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *KeyUsage1) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDigitalSignature returns the DigitalSignature field value if set, zero value otherwise.
func (o *KeyUsage1) GetDigitalSignature() bool {
	if o == nil || IsNil(o.DigitalSignature) {
		var ret bool
		return ret
	}
	return *o.DigitalSignature
}

// GetDigitalSignatureOk returns a tuple with the DigitalSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetDigitalSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.DigitalSignature) {
		return nil, false
	}
	return o.DigitalSignature, true
}

// HasDigitalSignature returns a boolean if a field has been set.
func (o *KeyUsage1) HasDigitalSignature() bool {
	if o != nil && !IsNil(o.DigitalSignature) {
		return true
	}

	return false
}

// SetDigitalSignature gets a reference to the given bool and assigns it to the DigitalSignature field.
func (o *KeyUsage1) SetDigitalSignature(v bool) {
	o.DigitalSignature = &v
}

// GetContentCommitment returns the ContentCommitment field value if set, zero value otherwise.
func (o *KeyUsage1) GetContentCommitment() bool {
	if o == nil || IsNil(o.ContentCommitment) {
		var ret bool
		return ret
	}
	return *o.ContentCommitment
}

// GetContentCommitmentOk returns a tuple with the ContentCommitment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetContentCommitmentOk() (*bool, bool) {
	if o == nil || IsNil(o.ContentCommitment) {
		return nil, false
	}
	return o.ContentCommitment, true
}

// HasContentCommitment returns a boolean if a field has been set.
func (o *KeyUsage1) HasContentCommitment() bool {
	if o != nil && !IsNil(o.ContentCommitment) {
		return true
	}

	return false
}

// SetContentCommitment gets a reference to the given bool and assigns it to the ContentCommitment field.
func (o *KeyUsage1) SetContentCommitment(v bool) {
	o.ContentCommitment = &v
}

// GetKeyEncipherment returns the KeyEncipherment field value if set, zero value otherwise.
func (o *KeyUsage1) GetKeyEncipherment() bool {
	if o == nil || IsNil(o.KeyEncipherment) {
		var ret bool
		return ret
	}
	return *o.KeyEncipherment
}

// GetKeyEnciphermentOk returns a tuple with the KeyEncipherment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetKeyEnciphermentOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyEncipherment) {
		return nil, false
	}
	return o.KeyEncipherment, true
}

// HasKeyEncipherment returns a boolean if a field has been set.
func (o *KeyUsage1) HasKeyEncipherment() bool {
	if o != nil && !IsNil(o.KeyEncipherment) {
		return true
	}

	return false
}

// SetKeyEncipherment gets a reference to the given bool and assigns it to the KeyEncipherment field.
func (o *KeyUsage1) SetKeyEncipherment(v bool) {
	o.KeyEncipherment = &v
}

// GetDataEncipherment returns the DataEncipherment field value if set, zero value otherwise.
func (o *KeyUsage1) GetDataEncipherment() bool {
	if o == nil || IsNil(o.DataEncipherment) {
		var ret bool
		return ret
	}
	return *o.DataEncipherment
}

// GetDataEnciphermentOk returns a tuple with the DataEncipherment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetDataEnciphermentOk() (*bool, bool) {
	if o == nil || IsNil(o.DataEncipherment) {
		return nil, false
	}
	return o.DataEncipherment, true
}

// HasDataEncipherment returns a boolean if a field has been set.
func (o *KeyUsage1) HasDataEncipherment() bool {
	if o != nil && !IsNil(o.DataEncipherment) {
		return true
	}

	return false
}

// SetDataEncipherment gets a reference to the given bool and assigns it to the DataEncipherment field.
func (o *KeyUsage1) SetDataEncipherment(v bool) {
	o.DataEncipherment = &v
}

// GetKeyAgreement returns the KeyAgreement field value if set, zero value otherwise.
func (o *KeyUsage1) GetKeyAgreement() bool {
	if o == nil || IsNil(o.KeyAgreement) {
		var ret bool
		return ret
	}
	return *o.KeyAgreement
}

// GetKeyAgreementOk returns a tuple with the KeyAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetKeyAgreementOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyAgreement) {
		return nil, false
	}
	return o.KeyAgreement, true
}

// HasKeyAgreement returns a boolean if a field has been set.
func (o *KeyUsage1) HasKeyAgreement() bool {
	if o != nil && !IsNil(o.KeyAgreement) {
		return true
	}

	return false
}

// SetKeyAgreement gets a reference to the given bool and assigns it to the KeyAgreement field.
func (o *KeyUsage1) SetKeyAgreement(v bool) {
	o.KeyAgreement = &v
}

// GetKeyCertSign returns the KeyCertSign field value if set, zero value otherwise.
func (o *KeyUsage1) GetKeyCertSign() bool {
	if o == nil || IsNil(o.KeyCertSign) {
		var ret bool
		return ret
	}
	return *o.KeyCertSign
}

// GetKeyCertSignOk returns a tuple with the KeyCertSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetKeyCertSignOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyCertSign) {
		return nil, false
	}
	return o.KeyCertSign, true
}

// HasKeyCertSign returns a boolean if a field has been set.
func (o *KeyUsage1) HasKeyCertSign() bool {
	if o != nil && !IsNil(o.KeyCertSign) {
		return true
	}

	return false
}

// SetKeyCertSign gets a reference to the given bool and assigns it to the KeyCertSign field.
func (o *KeyUsage1) SetKeyCertSign(v bool) {
	o.KeyCertSign = &v
}

// GetCrlSign returns the CrlSign field value if set, zero value otherwise.
func (o *KeyUsage1) GetCrlSign() bool {
	if o == nil || IsNil(o.CrlSign) {
		var ret bool
		return ret
	}
	return *o.CrlSign
}

// GetCrlSignOk returns a tuple with the CrlSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetCrlSignOk() (*bool, bool) {
	if o == nil || IsNil(o.CrlSign) {
		return nil, false
	}
	return o.CrlSign, true
}

// HasCrlSign returns a boolean if a field has been set.
func (o *KeyUsage1) HasCrlSign() bool {
	if o != nil && !IsNil(o.CrlSign) {
		return true
	}

	return false
}

// SetCrlSign gets a reference to the given bool and assigns it to the CrlSign field.
func (o *KeyUsage1) SetCrlSign(v bool) {
	o.CrlSign = &v
}

// GetEncipherOnly returns the EncipherOnly field value if set, zero value otherwise.
func (o *KeyUsage1) GetEncipherOnly() bool {
	if o == nil || IsNil(o.EncipherOnly) {
		var ret bool
		return ret
	}
	return *o.EncipherOnly
}

// GetEncipherOnlyOk returns a tuple with the EncipherOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetEncipherOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.EncipherOnly) {
		return nil, false
	}
	return o.EncipherOnly, true
}

// HasEncipherOnly returns a boolean if a field has been set.
func (o *KeyUsage1) HasEncipherOnly() bool {
	if o != nil && !IsNil(o.EncipherOnly) {
		return true
	}

	return false
}

// SetEncipherOnly gets a reference to the given bool and assigns it to the EncipherOnly field.
func (o *KeyUsage1) SetEncipherOnly(v bool) {
	o.EncipherOnly = &v
}

// GetDecipherOnly returns the DecipherOnly field value if set, zero value otherwise.
func (o *KeyUsage1) GetDecipherOnly() bool {
	if o == nil || IsNil(o.DecipherOnly) {
		var ret bool
		return ret
	}
	return *o.DecipherOnly
}

// GetDecipherOnlyOk returns a tuple with the DecipherOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetDecipherOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.DecipherOnly) {
		return nil, false
	}
	return o.DecipherOnly, true
}

// HasDecipherOnly returns a boolean if a field has been set.
func (o *KeyUsage1) HasDecipherOnly() bool {
	if o != nil && !IsNil(o.DecipherOnly) {
		return true
	}

	return false
}

// SetDecipherOnly gets a reference to the given bool and assigns it to the DecipherOnly field.
func (o *KeyUsage1) SetDecipherOnly(v bool) {
	o.DecipherOnly = &v
}

// GetExtensionCritical returns the ExtensionCritical field value if set, zero value otherwise.
func (o *KeyUsage1) GetExtensionCritical() bool {
	if o == nil || IsNil(o.ExtensionCritical) {
		var ret bool
		return ret
	}
	return *o.ExtensionCritical
}

// GetExtensionCriticalOk returns a tuple with the ExtensionCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUsage1) GetExtensionCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtensionCritical) {
		return nil, false
	}
	return o.ExtensionCritical, true
}

// HasExtensionCritical returns a boolean if a field has been set.
func (o *KeyUsage1) HasExtensionCritical() bool {
	if o != nil && !IsNil(o.ExtensionCritical) {
		return true
	}

	return false
}

// SetExtensionCritical gets a reference to the given bool and assigns it to the ExtensionCritical field.
func (o *KeyUsage1) SetExtensionCritical(v bool) {
	o.ExtensionCritical = &v
}

func (o KeyUsage1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyUsage1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.DigitalSignature) {
		toSerialize["digital_signature"] = o.DigitalSignature
	}
	if !IsNil(o.ContentCommitment) {
		toSerialize["content_commitment"] = o.ContentCommitment
	}
	if !IsNil(o.KeyEncipherment) {
		toSerialize["key_encipherment"] = o.KeyEncipherment
	}
	if !IsNil(o.DataEncipherment) {
		toSerialize["data_encipherment"] = o.DataEncipherment
	}
	if !IsNil(o.KeyAgreement) {
		toSerialize["key_agreement"] = o.KeyAgreement
	}
	if !IsNil(o.KeyCertSign) {
		toSerialize["key_cert_sign"] = o.KeyCertSign
	}
	if !IsNil(o.CrlSign) {
		toSerialize["crl_sign"] = o.CrlSign
	}
	if !IsNil(o.EncipherOnly) {
		toSerialize["encipher_only"] = o.EncipherOnly
	}
	if !IsNil(o.DecipherOnly) {
		toSerialize["decipher_only"] = o.DecipherOnly
	}
	if !IsNil(o.ExtensionCritical) {
		toSerialize["extension_critical"] = o.ExtensionCritical
	}
	return toSerialize, nil
}

type NullableKeyUsage1 struct {
	value *KeyUsage1
	isSet bool
}

func (v NullableKeyUsage1) Get() *KeyUsage1 {
	return v.value
}

func (v *NullableKeyUsage1) Set(val *KeyUsage1) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyUsage1) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyUsage1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyUsage1(val *KeyUsage1) *NullableKeyUsage1 {
	return &NullableKeyUsage1{value: val, isSet: true}
}

func (v NullableKeyUsage1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyUsage1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
