/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the Options type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Options{}

// Options struct for Options
type Options struct {
	Recursive *bool `json:"recursive,omitempty"`
	Traverse  *bool `json:"traverse,omitempty"`
}

// NewOptions instantiates a new Options object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptions() *Options {
	this := Options{}
	var recursive bool
	this.Recursive = &recursive
	var traverse bool
	this.Traverse = &traverse
	return &this
}

// NewOptionsWithDefaults instantiates a new Options object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsWithDefaults() *Options {
	this := Options{}
	var recursive bool
	this.Recursive = &recursive
	var traverse bool
	this.Traverse = &traverse
	return &this
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *Options) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Options) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *Options) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *Options) SetRecursive(v bool) {
	o.Recursive = &v
}

// GetTraverse returns the Traverse field value if set, zero value otherwise.
func (o *Options) GetTraverse() bool {
	if o == nil || IsNil(o.Traverse) {
		var ret bool
		return ret
	}
	return *o.Traverse
}

// GetTraverseOk returns a tuple with the Traverse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Options) GetTraverseOk() (*bool, bool) {
	if o == nil || IsNil(o.Traverse) {
		return nil, false
	}
	return o.Traverse, true
}

// HasTraverse returns a boolean if a field has been set.
func (o *Options) HasTraverse() bool {
	if o != nil && !IsNil(o.Traverse) {
		return true
	}

	return false
}

// SetTraverse gets a reference to the given bool and assigns it to the Traverse field.
func (o *Options) SetTraverse(v bool) {
	o.Traverse = &v
}

func (o Options) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Options) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}
	if !IsNil(o.Traverse) {
		toSerialize["traverse"] = o.Traverse
	}
	return toSerialize, nil
}

type NullableOptions struct {
	value *Options
	isSet bool
}

func (v NullableOptions) Get() *Options {
	return v.value
}

func (v *NullableOptions) Set(val *Options) {
	v.value = val
	v.isSet = true
}

func (v NullableOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptions(val *Options) *NullableOptions {
	return &NullableOptions{value: val, isSet: true}
}

func (v NullableOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
