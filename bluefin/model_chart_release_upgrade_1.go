/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bluefin

import (
	"encoding/json"
)

// checks if the ChartReleaseUpgrade1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartReleaseUpgrade1{}

// ChartReleaseUpgrade1 struct for ChartReleaseUpgrade1
type ChartReleaseUpgrade1 struct {
	Values      map[string]interface{} `json:"values,omitempty"`
	ItemVersion *string                `json:"item_version,omitempty"`
}

// NewChartReleaseUpgrade1 instantiates a new ChartReleaseUpgrade1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartReleaseUpgrade1() *ChartReleaseUpgrade1 {
	this := ChartReleaseUpgrade1{}
	var itemVersion string
	this.ItemVersion = &itemVersion
	return &this
}

// NewChartReleaseUpgrade1WithDefaults instantiates a new ChartReleaseUpgrade1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartReleaseUpgrade1WithDefaults() *ChartReleaseUpgrade1 {
	this := ChartReleaseUpgrade1{}
	var itemVersion string
	this.ItemVersion = &itemVersion
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ChartReleaseUpgrade1) GetValues() map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseUpgrade1) GetValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return map[string]interface{}{}, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ChartReleaseUpgrade1) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]interface{} and assigns it to the Values field.
func (o *ChartReleaseUpgrade1) SetValues(v map[string]interface{}) {
	o.Values = v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *ChartReleaseUpgrade1) GetItemVersion() string {
	if o == nil || IsNil(o.ItemVersion) {
		var ret string
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseUpgrade1) GetItemVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemVersion) {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *ChartReleaseUpgrade1) HasItemVersion() bool {
	if o != nil && !IsNil(o.ItemVersion) {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given string and assigns it to the ItemVersion field.
func (o *ChartReleaseUpgrade1) SetItemVersion(v string) {
	o.ItemVersion = &v
}

func (o ChartReleaseUpgrade1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartReleaseUpgrade1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ItemVersion) {
		toSerialize["item_version"] = o.ItemVersion
	}
	return toSerialize, nil
}

type NullableChartReleaseUpgrade1 struct {
	value *ChartReleaseUpgrade1
	isSet bool
}

func (v NullableChartReleaseUpgrade1) Get() *ChartReleaseUpgrade1 {
	return v.value
}

func (v *NullableChartReleaseUpgrade1) Set(val *ChartReleaseUpgrade1) {
	v.value = val
	v.isSet = true
}

func (v NullableChartReleaseUpgrade1) IsSet() bool {
	return v.isSet
}

func (v *NullableChartReleaseUpgrade1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartReleaseUpgrade1(val *ChartReleaseUpgrade1) *NullableChartReleaseUpgrade1 {
	return &NullableChartReleaseUpgrade1{value: val, isSet: true}
}

func (v NullableChartReleaseUpgrade1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartReleaseUpgrade1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
